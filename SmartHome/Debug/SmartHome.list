
SmartHome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000104e0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002788  08010670  08010670  00011670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012df8  08012df8  00014120  2**0
                  CONTENTS
  4 .ARM          00000008  08012df8  08012df8  00013df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012e00  08012e00  00014120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012e00  08012e00  00013e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012e04  08012e04  00013e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000120  20000000  08012e08  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00014120  2**0
                  CONTENTS
 10 .bss          00004fd0  20000120  20000120  00014120  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200050f0  200050f0  00014120  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00014120  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021932  00000000  00000000  00014150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000530f  00000000  00000000  00035a82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d08  00000000  00000000  0003ad98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001679  00000000  00000000  0003caa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028aca  00000000  00000000  0003e119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026a06  00000000  00000000  00066be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd2c5  00000000  00000000  0008d5e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016a8ae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008eec  00000000  00000000  0016a8f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  001737e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000120 	.word	0x20000120
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010658 	.word	0x08010658

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000124 	.word	0x20000124
 80001cc:	08010658 	.word	0x08010658

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ldivmod>:
 8000c08:	b97b      	cbnz	r3, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0a:	b972      	cbnz	r2, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bfbe      	ittt	lt
 8000c10:	2000      	movlt	r0, #0
 8000c12:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c16:	e006      	blt.n	8000c26 <__aeabi_ldivmod+0x1e>
 8000c18:	bf08      	it	eq
 8000c1a:	2800      	cmpeq	r0, #0
 8000c1c:	bf1c      	itt	ne
 8000c1e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c22:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c26:	f000 b9b5 	b.w	8000f94 <__aeabi_idiv0>
 8000c2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c32:	2900      	cmp	r1, #0
 8000c34:	db09      	blt.n	8000c4a <__aeabi_ldivmod+0x42>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db1a      	blt.n	8000c70 <__aeabi_ldivmod+0x68>
 8000c3a:	f000 f84d 	bl	8000cd8 <__udivmoddi4>
 8000c3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c46:	b004      	add	sp, #16
 8000c48:	4770      	bx	lr
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db1b      	blt.n	8000c8c <__aeabi_ldivmod+0x84>
 8000c54:	f000 f840 	bl	8000cd8 <__udivmoddi4>
 8000c58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c60:	b004      	add	sp, #16
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	4252      	negs	r2, r2
 8000c6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f82f 	bl	8000cd8 <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4240      	negs	r0, r0
 8000c86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8a:	4770      	bx	lr
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	f000 f821 	bl	8000cd8 <__udivmoddi4>
 8000c96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9e:	b004      	add	sp, #16
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cbc:	f000 b96a 	b.w	8000f94 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	460c      	mov	r4, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14e      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	458c      	cmp	ip, r1
 8000ce8:	4686      	mov	lr, r0
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	d962      	bls.n	8000db6 <__udivmoddi4+0xde>
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0320 	rsb	r3, r2, #32
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	4319      	orrs	r1, r3
 8000d02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f f68c 	uxth.w	r6, ip
 8000d0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d16:	fb07 1114 	mls	r1, r7, r4, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb04 f106 	mul.w	r1, r4, r6
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d2e:	f080 8112 	bcs.w	8000f56 <__udivmoddi4+0x27e>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 810f 	bls.w	8000f56 <__udivmoddi4+0x27e>
 8000d38:	3c02      	subs	r4, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	fa1f f38e 	uxth.w	r3, lr
 8000d42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d46:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f606 	mul.w	r6, r0, r6
 8000d52:	429e      	cmp	r6, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x94>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d5e:	f080 80fc 	bcs.w	8000f5a <__udivmoddi4+0x282>
 8000d62:	429e      	cmp	r6, r3
 8000d64:	f240 80f9 	bls.w	8000f5a <__udivmoddi4+0x282>
 8000d68:	4463      	add	r3, ip
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d72:	2100      	movs	r1, #0
 8000d74:	b11d      	cbz	r5, 8000d7e <__udivmoddi4+0xa6>
 8000d76:	40d3      	lsrs	r3, r2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d905      	bls.n	8000d92 <__udivmoddi4+0xba>
 8000d86:	b10d      	cbz	r5, 8000d8c <__udivmoddi4+0xb4>
 8000d88:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e7f5      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000d92:	fab3 f183 	clz	r1, r3
 8000d96:	2900      	cmp	r1, #0
 8000d98:	d146      	bne.n	8000e28 <__udivmoddi4+0x150>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d302      	bcc.n	8000da4 <__udivmoddi4+0xcc>
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	f0c0 80f0 	bcc.w	8000f84 <__udivmoddi4+0x2ac>
 8000da4:	1a86      	subs	r6, r0, r2
 8000da6:	eb64 0303 	sbc.w	r3, r4, r3
 8000daa:	2001      	movs	r0, #1
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	d0e6      	beq.n	8000d7e <__udivmoddi4+0xa6>
 8000db0:	e9c5 6300 	strd	r6, r3, [r5]
 8000db4:	e7e3      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x204>
 8000dbc:	eba1 040c 	sub.w	r4, r1, ip
 8000dc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc4:	fa1f f78c 	uxth.w	r7, ip
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dda:	fb07 f006 	mul.w	r0, r7, r6
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x11c>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x11a>
 8000dec:	4298      	cmp	r0, r3
 8000dee:	f200 80cd 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000df2:	4626      	mov	r6, r4
 8000df4:	1a1c      	subs	r4, r3, r0
 8000df6:	fa1f f38e 	uxth.w	r3, lr
 8000dfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000e02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e06:	fb00 f707 	mul.w	r7, r0, r7
 8000e0a:	429f      	cmp	r7, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x148>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x146>
 8000e18:	429f      	cmp	r7, r3
 8000e1a:	f200 80b0 	bhi.w	8000f7e <__udivmoddi4+0x2a6>
 8000e1e:	4620      	mov	r0, r4
 8000e20:	1bdb      	subs	r3, r3, r7
 8000e22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e26:	e7a5      	b.n	8000d74 <__udivmoddi4+0x9c>
 8000e28:	f1c1 0620 	rsb	r6, r1, #32
 8000e2c:	408b      	lsls	r3, r1
 8000e2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e32:	431f      	orrs	r7, r3
 8000e34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e38:	fa04 f301 	lsl.w	r3, r4, r1
 8000e3c:	ea43 030c 	orr.w	r3, r3, ip
 8000e40:	40f4      	lsrs	r4, r6
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	0c38      	lsrs	r0, r7, #16
 8000e48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fb00 441e 	mls	r4, r0, lr, r4
 8000e58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e60:	45a1      	cmp	r9, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x1a6>
 8000e68:	193c      	adds	r4, r7, r4
 8000e6a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e6e:	f080 8084 	bcs.w	8000f7a <__udivmoddi4+0x2a2>
 8000e72:	45a1      	cmp	r9, r4
 8000e74:	f240 8081 	bls.w	8000f7a <__udivmoddi4+0x2a2>
 8000e78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e7c:	443c      	add	r4, r7
 8000e7e:	eba4 0409 	sub.w	r4, r4, r9
 8000e82:	fa1f f983 	uxth.w	r9, r3
 8000e86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e96:	45a4      	cmp	ip, r4
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x1d2>
 8000e9a:	193c      	adds	r4, r7, r4
 8000e9c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ea0:	d267      	bcs.n	8000f72 <__udivmoddi4+0x29a>
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d965      	bls.n	8000f72 <__udivmoddi4+0x29a>
 8000ea6:	3b02      	subs	r3, #2
 8000ea8:	443c      	add	r4, r7
 8000eaa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eae:	fba0 9302 	umull	r9, r3, r0, r2
 8000eb2:	eba4 040c 	sub.w	r4, r4, ip
 8000eb6:	429c      	cmp	r4, r3
 8000eb8:	46ce      	mov	lr, r9
 8000eba:	469c      	mov	ip, r3
 8000ebc:	d351      	bcc.n	8000f62 <__udivmoddi4+0x28a>
 8000ebe:	d04e      	beq.n	8000f5e <__udivmoddi4+0x286>
 8000ec0:	b155      	cbz	r5, 8000ed8 <__udivmoddi4+0x200>
 8000ec2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eca:	fa04 f606 	lsl.w	r6, r4, r6
 8000ece:	40cb      	lsrs	r3, r1
 8000ed0:	431e      	orrs	r6, r3
 8000ed2:	40cc      	lsrs	r4, r1
 8000ed4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e750      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000edc:	f1c2 0320 	rsb	r3, r2, #32
 8000ee0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eec:	4094      	lsls	r4, r2
 8000eee:	430c      	orrs	r4, r1
 8000ef0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef8:	fa1f f78c 	uxth.w	r7, ip
 8000efc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f00:	fb08 3110 	mls	r1, r8, r0, r3
 8000f04:	0c23      	lsrs	r3, r4, #16
 8000f06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f0a:	fb00 f107 	mul.w	r1, r0, r7
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x24c>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f1a:	d22c      	bcs.n	8000f76 <__udivmoddi4+0x29e>
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d92a      	bls.n	8000f76 <__udivmoddi4+0x29e>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4463      	add	r3, ip
 8000f24:	1a5b      	subs	r3, r3, r1
 8000f26:	b2a4      	uxth	r4, r4
 8000f28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f34:	fb01 f307 	mul.w	r3, r1, r7
 8000f38:	42a3      	cmp	r3, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x276>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f44:	d213      	bcs.n	8000f6e <__udivmoddi4+0x296>
 8000f46:	42a3      	cmp	r3, r4
 8000f48:	d911      	bls.n	8000f6e <__udivmoddi4+0x296>
 8000f4a:	3902      	subs	r1, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	1ae4      	subs	r4, r4, r3
 8000f50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f54:	e739      	b.n	8000dca <__udivmoddi4+0xf2>
 8000f56:	4604      	mov	r4, r0
 8000f58:	e6f0      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e706      	b.n	8000d6c <__udivmoddi4+0x94>
 8000f5e:	45c8      	cmp	r8, r9
 8000f60:	d2ae      	bcs.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f6a:	3801      	subs	r0, #1
 8000f6c:	e7a8      	b.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f6e:	4631      	mov	r1, r6
 8000f70:	e7ed      	b.n	8000f4e <__udivmoddi4+0x276>
 8000f72:	4603      	mov	r3, r0
 8000f74:	e799      	b.n	8000eaa <__udivmoddi4+0x1d2>
 8000f76:	4630      	mov	r0, r6
 8000f78:	e7d4      	b.n	8000f24 <__udivmoddi4+0x24c>
 8000f7a:	46d6      	mov	lr, sl
 8000f7c:	e77f      	b.n	8000e7e <__udivmoddi4+0x1a6>
 8000f7e:	4463      	add	r3, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e74d      	b.n	8000e20 <__udivmoddi4+0x148>
 8000f84:	4606      	mov	r6, r0
 8000f86:	4623      	mov	r3, r4
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e70f      	b.n	8000dac <__udivmoddi4+0xd4>
 8000f8c:	3e02      	subs	r6, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	e730      	b.n	8000df4 <__udivmoddi4+0x11c>
 8000f92:	bf00      	nop

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <BH1750_Send_CMD>:

extern I2C_HandleTypeDef hi2c1;

//写命令
void BH1750_Send_CMD(uint8_t cmd)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, BH1750_WRITE_ADDR, &cmd, 1, HAL_MAX_DELAY);
 8000fa2:	1dfa      	adds	r2, r7, #7
 8000fa4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2301      	movs	r3, #1
 8000fac:	2146      	movs	r1, #70	@ 0x46
 8000fae:	4803      	ldr	r0, [pc, #12]	@ (8000fbc <BH1750_Send_CMD+0x24>)
 8000fb0:	f005 fde2 	bl	8006b78 <HAL_I2C_Master_Transmit>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000470 	.word	0x20000470

08000fc0 <BH1750_Read_Data>:

//读结果
void BH1750_Read_Data(uint8_t *pData)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af02      	add	r7, sp, #8
 8000fc6:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Receive(&hi2c1, BH1750_READ_ADDR, pData, 2, HAL_MAX_DELAY);
 8000fc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	2302      	movs	r3, #2
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	2147      	movs	r1, #71	@ 0x47
 8000fd4:	4803      	ldr	r0, [pc, #12]	@ (8000fe4 <BH1750_Read_Data+0x24>)
 8000fd6:	f005 fecd 	bl	8006d74 <HAL_I2C_Master_Receive>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000470 	.word	0x20000470

08000fe8 <BH1750_Data_To_Lx>:

//转换结果
uint16_t BH1750_Data_To_Lx(uint8_t *pData)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	uint16_t light = pData[0];
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	81fb      	strh	r3, [r7, #14]
	
	light <<= 8;
 8000ff6:	89fb      	ldrh	r3, [r7, #14]
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	81fb      	strh	r3, [r7, #14]
	
	light += pData[1];
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3301      	adds	r3, #1
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	89fb      	ldrh	r3, [r7, #14]
 8001006:	4413      	add	r3, r2
 8001008:	81fb      	strh	r3, [r7, #14]
	
	light = (uint16_t)(light / 1.2);
 800100a:	89fb      	ldrh	r3, [r7, #14]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fa99 	bl	8000544 <__aeabi_i2d>
 8001012:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8001016:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <BH1750_Data_To_Lx+0x50>)
 8001018:	f7ff fc28 	bl	800086c <__aeabi_ddiv>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4610      	mov	r0, r2
 8001022:	4619      	mov	r1, r3
 8001024:	f7ff fdd0 	bl	8000bc8 <__aeabi_d2uiz>
 8001028:	4603      	mov	r3, r0
 800102a:	81fb      	strh	r3, [r7, #14]
	
	return light;
 800102c:	89fb      	ldrh	r3, [r7, #14]
	
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	3ff33333 	.word	0x3ff33333

0800103c <cJSON_strcasecmp>:
static const char *ep;

const char *cJSON_GetErrorPtr(void) {return ep;}

static int cJSON_strcasecmp(const char *s1,const char *s2)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
	if (!s1) return (s1==s2)?0:1;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d107      	bne.n	800105c <cJSON_strcasecmp+0x20>
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	429a      	cmp	r2, r3
 8001052:	bf14      	ite	ne
 8001054:	2301      	movne	r3, #1
 8001056:	2300      	moveq	r3, #0
 8001058:	b2db      	uxtb	r3, r3
 800105a:	e055      	b.n	8001108 <cJSON_strcasecmp+0xcc>
	if (!s2) return 1;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d10d      	bne.n	800107e <cJSON_strcasecmp+0x42>
 8001062:	2301      	movs	r3, #1
 8001064:	e050      	b.n	8001108 <cJSON_strcasecmp+0xcc>
	for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)	if(*s1 == 0)	return 0;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <cJSON_strcasecmp+0x36>
 800106e:	2300      	movs	r3, #0
 8001070:	e04a      	b.n	8001108 <cJSON_strcasecmp+0xcc>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3301      	adds	r3, #1
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	3301      	adds	r3, #1
 800107c:	603b      	str	r3, [r7, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	3301      	adds	r3, #1
 8001088:	4a22      	ldr	r2, [pc, #136]	@ (8001114 <cJSON_strcasecmp+0xd8>)
 800108a:	4413      	add	r3, r2
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	f003 0303 	and.w	r3, r3, #3
 8001092:	2b01      	cmp	r3, #1
 8001094:	d103      	bne.n	800109e <cJSON_strcasecmp+0x62>
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	f103 0220 	add.w	r2, r3, #32
 800109c:	e000      	b.n	80010a0 <cJSON_strcasecmp+0x64>
 800109e:	7bfa      	ldrb	r2, [r7, #15]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	73bb      	strb	r3, [r7, #14]
 80010a6:	7bbb      	ldrb	r3, [r7, #14]
 80010a8:	3301      	adds	r3, #1
 80010aa:	491a      	ldr	r1, [pc, #104]	@ (8001114 <cJSON_strcasecmp+0xd8>)
 80010ac:	440b      	add	r3, r1
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d102      	bne.n	80010be <cJSON_strcasecmp+0x82>
 80010b8:	7bbb      	ldrb	r3, [r7, #14]
 80010ba:	3320      	adds	r3, #32
 80010bc:	e000      	b.n	80010c0 <cJSON_strcasecmp+0x84>
 80010be:	7bbb      	ldrb	r3, [r7, #14]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d0d0      	beq.n	8001066 <cJSON_strcasecmp+0x2a>
	return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	737b      	strb	r3, [r7, #13]
 80010ca:	7b7b      	ldrb	r3, [r7, #13]
 80010cc:	3301      	adds	r3, #1
 80010ce:	4a11      	ldr	r2, [pc, #68]	@ (8001114 <cJSON_strcasecmp+0xd8>)
 80010d0:	4413      	add	r3, r2
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d103      	bne.n	80010e4 <cJSON_strcasecmp+0xa8>
 80010dc:	7b7b      	ldrb	r3, [r7, #13]
 80010de:	f103 0220 	add.w	r2, r3, #32
 80010e2:	e000      	b.n	80010e6 <cJSON_strcasecmp+0xaa>
 80010e4:	7b7a      	ldrb	r2, [r7, #13]
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	733b      	strb	r3, [r7, #12]
 80010ec:	7b3b      	ldrb	r3, [r7, #12]
 80010ee:	3301      	adds	r3, #1
 80010f0:	4908      	ldr	r1, [pc, #32]	@ (8001114 <cJSON_strcasecmp+0xd8>)
 80010f2:	440b      	add	r3, r1
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d102      	bne.n	8001104 <cJSON_strcasecmp+0xc8>
 80010fe:	7b3b      	ldrb	r3, [r7, #12]
 8001100:	3320      	adds	r3, #32
 8001102:	e000      	b.n	8001106 <cJSON_strcasecmp+0xca>
 8001104:	7b3b      	ldrb	r3, [r7, #12]
 8001106:	1ad3      	subs	r3, r2, r3
}
 8001108:	4618      	mov	r0, r3
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	08012c36 	.word	0x08012c36

08001118 <cJSON_strdup>:

static void *(*cJSON_malloc)(size_t sz) = pvPortMalloc;
static void (*cJSON_free)(void *ptr) = vPortFree;

static char* cJSON_strdup(const char* str)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
    size_t len;
    char* copy;

    len = strlen(str) + 1;
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff f855 	bl	80001d0 <strlen>
 8001126:	4603      	mov	r3, r0
 8001128:	3301      	adds	r3, #1
 800112a:	60fb      	str	r3, [r7, #12]

    copy = (char*)cJSON_malloc(len);
 800112c:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <cJSON_strdup+0x3c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	68f8      	ldr	r0, [r7, #12]
 8001132:	4798      	blx	r3
 8001134:	60b8      	str	r0, [r7, #8]
    if (!copy) 
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d101      	bne.n	8001140 <cJSON_strdup+0x28>
      return NULL;
 800113c:	2300      	movs	r3, #0
 800113e:	e005      	b.n	800114c <cJSON_strdup+0x34>
    
    memcpy(copy, str, len);
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	68b8      	ldr	r0, [r7, #8]
 8001146:	f00c fde4 	bl	800dd12 <memcpy>

    return copy;
 800114a:	68bb      	ldr	r3, [r7, #8]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000000 	.word	0x20000000

08001158 <cJSON_New_Item>:
	cJSON_free	 = (hooks->free_fn)?hooks->free_fn:free;
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
	cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));
 800115e:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <cJSON_New_Item+0x2c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2028      	movs	r0, #40	@ 0x28
 8001164:	4798      	blx	r3
 8001166:	6078      	str	r0, [r7, #4]
	if (node) memset(node,0,sizeof(cJSON));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d004      	beq.n	8001178 <cJSON_New_Item+0x20>
 800116e:	2228      	movs	r2, #40	@ 0x28
 8001170:	2100      	movs	r1, #0
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f00c f941 	bl	800d3fa <memset>
	return node;
 8001178:	687b      	ldr	r3, [r7, #4]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000000 	.word	0x20000000

08001188 <cJSON_Delete>:

/* Delete a cJSON structure. */
void cJSON_Delete(cJSON *c)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	cJSON *next;
	while (c)
 8001190:	e037      	b.n	8001202 <cJSON_Delete+0x7a>
	{
		next=c->next;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	60fb      	str	r3, [r7, #12]
		if (!(c->type&cJSON_IsReference) && c->child) cJSON_Delete(c->child);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d108      	bne.n	80011b6 <cJSON_Delete+0x2e>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d004      	beq.n	80011b6 <cJSON_Delete+0x2e>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ffe9 	bl	8001188 <cJSON_Delete>
		if (!(c->type&cJSON_IsReference) && c->valuestring) cJSON_free(c->valuestring);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d109      	bne.n	80011d6 <cJSON_Delete+0x4e>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d005      	beq.n	80011d6 <cJSON_Delete+0x4e>
 80011ca:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <cJSON_Delete+0x8c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	6912      	ldr	r2, [r2, #16]
 80011d2:	4610      	mov	r0, r2
 80011d4:	4798      	blx	r3
		if (!(c->type&cJSON_StringIsConst) && c->string) cJSON_free(c->string);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d109      	bne.n	80011f6 <cJSON_Delete+0x6e>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a1b      	ldr	r3, [r3, #32]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d005      	beq.n	80011f6 <cJSON_Delete+0x6e>
 80011ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <cJSON_Delete+0x8c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	6a12      	ldr	r2, [r2, #32]
 80011f2:	4610      	mov	r0, r2
 80011f4:	4798      	blx	r3
		cJSON_free(c);
 80011f6:	4b07      	ldr	r3, [pc, #28]	@ (8001214 <cJSON_Delete+0x8c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	4798      	blx	r3
		c=next;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	607b      	str	r3, [r7, #4]
	while (c)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1c4      	bne.n	8001192 <cJSON_Delete+0xa>
	}
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000004 	.word	0x20000004

08001218 <parse_number>:

/* Parse the input text to generate a number, and populate the result into item. */
static const char *parse_number(cJSON *item,const char *num)
{
 8001218:	b5b0      	push	{r4, r5, r7, lr}
 800121a:	b08a      	sub	sp, #40	@ 0x28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	f04f 0300 	mov.w	r3, #0
 800122a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	4b83      	ldr	r3, [pc, #524]	@ (8001440 <parse_number+0x228>)
 8001234:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	f04f 0300 	mov.w	r3, #0
 8001240:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	2301      	movs	r3, #1
 800124a:	60bb      	str	r3, [r7, #8]

	if (*num=='-') sign=-1,num++;	/* Has sign? */
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b2d      	cmp	r3, #45	@ 0x2d
 8001252:	d107      	bne.n	8001264 <parse_number+0x4c>
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	4b7a      	ldr	r3, [pc, #488]	@ (8001444 <parse_number+0x22c>)
 800125a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	3301      	adds	r3, #1
 8001262:	603b      	str	r3, [r7, #0]
	if (*num=='0') num++;			/* is zero */
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b30      	cmp	r3, #48	@ 0x30
 800126a:	d102      	bne.n	8001272 <parse_number+0x5a>
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	3301      	adds	r3, #1
 8001270:	603b      	str	r3, [r7, #0]
	if (*num>='1' && *num<='9')	do	n=(n*10.0)+(*num++ -'0');	while (*num>='0' && *num<='9');	/* Number? */
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b30      	cmp	r3, #48	@ 0x30
 8001278:	d928      	bls.n	80012cc <parse_number+0xb4>
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b39      	cmp	r3, #57	@ 0x39
 8001280:	d824      	bhi.n	80012cc <parse_number+0xb4>
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	4b70      	ldr	r3, [pc, #448]	@ (8001448 <parse_number+0x230>)
 8001288:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800128c:	f7ff f9c4 	bl	8000618 <__aeabi_dmul>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4614      	mov	r4, r2
 8001296:	461d      	mov	r5, r3
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	1c5a      	adds	r2, r3, #1
 800129c:	603a      	str	r2, [r7, #0]
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	3b30      	subs	r3, #48	@ 0x30
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff f94e 	bl	8000544 <__aeabi_i2d>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4620      	mov	r0, r4
 80012ae:	4629      	mov	r1, r5
 80012b0:	f7fe fffc 	bl	80002ac <__adddf3>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b2f      	cmp	r3, #47	@ 0x2f
 80012c2:	d903      	bls.n	80012cc <parse_number+0xb4>
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b39      	cmp	r3, #57	@ 0x39
 80012ca:	d9da      	bls.n	8001282 <parse_number+0x6a>
	if (*num=='.' && num[1]>='0' && num[1]<='9') {num++;		do	n=(n*10.0)+(*num++ -'0'),scale--; while (*num>='0' && *num<='9');}	/* Fractional part? */
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80012d2:	d13c      	bne.n	800134e <parse_number+0x136>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	3301      	adds	r3, #1
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b2f      	cmp	r3, #47	@ 0x2f
 80012dc:	d937      	bls.n	800134e <parse_number+0x136>
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	3301      	adds	r3, #1
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b39      	cmp	r3, #57	@ 0x39
 80012e6:	d832      	bhi.n	800134e <parse_number+0x136>
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	3301      	adds	r3, #1
 80012ec:	603b      	str	r3, [r7, #0]
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	4b55      	ldr	r3, [pc, #340]	@ (8001448 <parse_number+0x230>)
 80012f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80012f8:	f7ff f98e 	bl	8000618 <__aeabi_dmul>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4614      	mov	r4, r2
 8001302:	461d      	mov	r5, r3
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	1c5a      	adds	r2, r3, #1
 8001308:	603a      	str	r2, [r7, #0]
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	3b30      	subs	r3, #48	@ 0x30
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f918 	bl	8000544 <__aeabi_i2d>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4620      	mov	r0, r4
 800131a:	4629      	mov	r1, r5
 800131c:	f7fe ffc6 	bl	80002ac <__adddf3>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	4b44      	ldr	r3, [pc, #272]	@ (8001440 <parse_number+0x228>)
 800132e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001332:	f7fe ffb9 	bl	80002a8 <__aeabi_dsub>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b2f      	cmp	r3, #47	@ 0x2f
 8001344:	d903      	bls.n	800134e <parse_number+0x136>
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b39      	cmp	r3, #57	@ 0x39
 800134c:	d9cf      	bls.n	80012ee <parse_number+0xd6>
	if (*num=='e' || *num=='E')		/* Exponent? */
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b65      	cmp	r3, #101	@ 0x65
 8001354:	d003      	beq.n	800135e <parse_number+0x146>
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b45      	cmp	r3, #69	@ 0x45
 800135c:	d12a      	bne.n	80013b4 <parse_number+0x19c>
	{	num++;if (*num=='+') num++;	else if (*num=='-') signsubscale=-1,num++;		/* With sign? */
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	3301      	adds	r3, #1
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b2b      	cmp	r3, #43	@ 0x2b
 800136a:	d103      	bne.n	8001374 <parse_number+0x15c>
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	3301      	adds	r3, #1
 8001370:	603b      	str	r3, [r7, #0]
 8001372:	e017      	b.n	80013a4 <parse_number+0x18c>
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b2d      	cmp	r3, #45	@ 0x2d
 800137a:	d113      	bne.n	80013a4 <parse_number+0x18c>
 800137c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	3301      	adds	r3, #1
 8001386:	603b      	str	r3, [r7, #0]
		while (*num>='0' && *num<='9') subscale=(subscale*10)+(*num++ - '0');	/* Number? */
 8001388:	e00c      	b.n	80013a4 <parse_number+0x18c>
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	4613      	mov	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4619      	mov	r1, r3
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	1c5a      	adds	r2, r3, #1
 800139a:	603a      	str	r2, [r7, #0]
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	3b30      	subs	r3, #48	@ 0x30
 80013a0:	440b      	add	r3, r1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b2f      	cmp	r3, #47	@ 0x2f
 80013aa:	d903      	bls.n	80013b4 <parse_number+0x19c>
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b39      	cmp	r3, #57	@ 0x39
 80013b2:	d9ea      	bls.n	800138a <parse_number+0x172>
	}

	n=sign*n*pow(10.0,(scale+subscale*signsubscale));	/* number = +/- number.fraction * 10^+/- exponent */
 80013b4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013b8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013bc:	f7ff f92c 	bl	8000618 <__aeabi_dmul>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4614      	mov	r4, r2
 80013c6:	461d      	mov	r5, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	fb02 f303 	mul.w	r3, r2, r3
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f8b7 	bl	8000544 <__aeabi_i2d>
 80013d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013da:	f7fe ff67 	bl	80002ac <__adddf3>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	ec43 2b17 	vmov	d7, r2, r3
 80013e6:	eeb0 1a47 	vmov.f32	s2, s14
 80013ea:	eef0 1a67 	vmov.f32	s3, s15
 80013ee:	ed9f 0b12 	vldr	d0, [pc, #72]	@ 8001438 <parse_number+0x220>
 80013f2:	f00e f959 	bl	800f6a8 <pow>
 80013f6:	ec53 2b10 	vmov	r2, r3, d0
 80013fa:	4620      	mov	r0, r4
 80013fc:	4629      	mov	r1, r5
 80013fe:	f7ff f90b 	bl	8000618 <__aeabi_dmul>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	item->valuedouble=n;
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001410:	e9c1 2306 	strd	r2, r3, [r1, #24]
	item->valueint=(int)n;
 8001414:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001418:	f7ff fbae 	bl	8000b78 <__aeabi_d2iz>
 800141c:	4602      	mov	r2, r0
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	615a      	str	r2, [r3, #20]
	item->type=cJSON_Number;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2203      	movs	r2, #3
 8001426:	60da      	str	r2, [r3, #12]
	return num;
 8001428:	683b      	ldr	r3, [r7, #0]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3728      	adds	r7, #40	@ 0x28
 800142e:	46bd      	mov	sp, r7
 8001430:	bdb0      	pop	{r4, r5, r7, pc}
 8001432:	bf00      	nop
 8001434:	f3af 8000 	nop.w
 8001438:	00000000 	.word	0x00000000
 800143c:	40240000 	.word	0x40240000
 8001440:	3ff00000 	.word	0x3ff00000
 8001444:	bff00000 	.word	0xbff00000
 8001448:	40240000 	.word	0x40240000

0800144c <pow2gt>:

static int pow2gt (int x)	{	--x;	x|=x>>1;	x|=x>>2;	x|=x>>4;	x|=x>>8;	x|=x>>16;	return x+1;	}
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	105b      	asrs	r3, r3, #1
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	4313      	orrs	r3, r2
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	109b      	asrs	r3, r3, #2
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	4313      	orrs	r3, r2
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	111b      	asrs	r3, r3, #4
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	4313      	orrs	r3, r2
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	121b      	asrs	r3, r3, #8
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	4313      	orrs	r3, r2
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	141b      	asrs	r3, r3, #16
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	4313      	orrs	r3, r2
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3301      	adds	r3, #1
 8001490:	4618      	mov	r0, r3
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <ensure>:

typedef struct {char *buffer; int length; int offset; } printbuffer;

static char* ensure(printbuffer *p,int needed)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
	char *newbuffer;int newsize;
	if (!p || !p->buffer) return 0;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <ensure+0x18>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <ensure+0x1c>
 80014b4:	2300      	movs	r3, #0
 80014b6:	e046      	b.n	8001546 <ensure+0xaa>
	needed+=p->offset;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	603b      	str	r3, [r7, #0]
	if (needed<=p->length) return p->buffer+p->offset;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	dc05      	bgt.n	80014d8 <ensure+0x3c>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	6892      	ldr	r2, [r2, #8]
 80014d4:	4413      	add	r3, r2
 80014d6:	e036      	b.n	8001546 <ensure+0xaa>

	newsize=pow2gt(needed);
 80014d8:	6838      	ldr	r0, [r7, #0]
 80014da:	f7ff ffb7 	bl	800144c <pow2gt>
 80014de:	60f8      	str	r0, [r7, #12]
	newbuffer=(char*)cJSON_malloc(newsize);
 80014e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001550 <ensure+0xb4>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68fa      	ldr	r2, [r7, #12]
 80014e6:	4610      	mov	r0, r2
 80014e8:	4798      	blx	r3
 80014ea:	60b8      	str	r0, [r7, #8]
	if (!newbuffer) {cJSON_free(p->buffer);p->length=0,p->buffer=0;return 0;}
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10d      	bne.n	800150e <ensure+0x72>
 80014f2:	4b18      	ldr	r3, [pc, #96]	@ (8001554 <ensure+0xb8>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6812      	ldr	r2, [r2, #0]
 80014fa:	4610      	mov	r0, r2
 80014fc:	4798      	blx	r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	2300      	movs	r3, #0
 800150c:	e01b      	b.n	8001546 <ensure+0xaa>
	if (newbuffer) memcpy(newbuffer,p->buffer,p->length);
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d007      	beq.n	8001524 <ensure+0x88>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6819      	ldr	r1, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	461a      	mov	r2, r3
 800151e:	68b8      	ldr	r0, [r7, #8]
 8001520:	f00c fbf7 	bl	800dd12 <memcpy>
	cJSON_free(p->buffer);
 8001524:	4b0b      	ldr	r3, [pc, #44]	@ (8001554 <ensure+0xb8>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	6812      	ldr	r2, [r2, #0]
 800152c:	4610      	mov	r0, r2
 800152e:	4798      	blx	r3
	p->length=newsize;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	605a      	str	r2, [r3, #4]
	p->buffer=newbuffer;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68ba      	ldr	r2, [r7, #8]
 800153a:	601a      	str	r2, [r3, #0]
	return newbuffer+p->offset;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	461a      	mov	r2, r3
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	4413      	add	r3, r2
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000000 	.word	0x20000000
 8001554:	20000004 	.word	0x20000004

08001558 <update>:

static int update(printbuffer *p)
{
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	char *str;
	if (!p || !p->buffer) return 0;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <update+0x16>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <update+0x1a>
 800156e:	2300      	movs	r3, #0
 8001570:	e00d      	b.n	800158e <update+0x36>
	str=p->buffer+p->offset;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	6892      	ldr	r2, [r2, #8]
 800157a:	4413      	add	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]
	return p->offset+strlen(str);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	461c      	mov	r4, r3
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f7fe fe23 	bl	80001d0 <strlen>
 800158a:	4603      	mov	r3, r0
 800158c:	4423      	add	r3, r4
}
 800158e:	4618      	mov	r0, r3
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	bd90      	pop	{r4, r7, pc}
	...

08001598 <print_number>:

/* Render the number nicely from the given item into a string. */
static char *print_number(cJSON *item,printbuffer *p)
{
 8001598:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800159c:	b08c      	sub	sp, #48	@ 0x30
 800159e:	af00      	add	r7, sp, #0
 80015a0:	61f8      	str	r0, [r7, #28]
 80015a2:	61b9      	str	r1, [r7, #24]
	char *str=0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	double d=item->valuedouble;
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80015ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
	if (d==0)
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	f04f 0300 	mov.w	r3, #0
 80015ba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80015be:	f7ff fa93 	bl	8000ae8 <__aeabi_dcmpeq>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d018      	beq.n	80015fa <print_number+0x62>
	{
		if (p)	str=ensure(p,2);
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d005      	beq.n	80015da <print_number+0x42>
 80015ce:	2102      	movs	r1, #2
 80015d0:	69b8      	ldr	r0, [r7, #24]
 80015d2:	f7ff ff63 	bl	800149c <ensure>
 80015d6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80015d8:	e004      	b.n	80015e4 <print_number+0x4c>
		else	str=(char*)cJSON_malloc(2);	/* special case for 0. */
 80015da:	4b6d      	ldr	r3, [pc, #436]	@ (8001790 <print_number+0x1f8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2002      	movs	r0, #2
 80015e0:	4798      	blx	r3
 80015e2:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if (str) strcpy(str,"0");
 80015e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 80ba 	beq.w	8001760 <print_number+0x1c8>
 80015ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ee:	4969      	ldr	r1, [pc, #420]	@ (8001794 <print_number+0x1fc>)
 80015f0:	461a      	mov	r2, r3
 80015f2:	460b      	mov	r3, r1
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	8013      	strh	r3, [r2, #0]
 80015f8:	e0b2      	b.n	8001760 <print_number+0x1c8>
	}
	else if (fabs(((double)item->valueint)-d)<=DBL_EPSILON && d<=INT_MAX && d>=INT_MIN)
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe ffa0 	bl	8000544 <__aeabi_i2d>
 8001604:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001608:	f7fe fe4e 	bl	80002a8 <__aeabi_dsub>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4614      	mov	r4, r2
 8001612:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	4b5f      	ldr	r3, [pc, #380]	@ (8001798 <print_number+0x200>)
 800161c:	4620      	mov	r0, r4
 800161e:	4629      	mov	r1, r5
 8001620:	f7ff fa76 	bl	8000b10 <__aeabi_dcmple>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d02c      	beq.n	8001684 <print_number+0xec>
 800162a:	a351      	add	r3, pc, #324	@ (adr r3, 8001770 <print_number+0x1d8>)
 800162c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001630:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001634:	f7ff fa6c 	bl	8000b10 <__aeabi_dcmple>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d022      	beq.n	8001684 <print_number+0xec>
 800163e:	f04f 0200 	mov.w	r2, #0
 8001642:	4b56      	ldr	r3, [pc, #344]	@ (800179c <print_number+0x204>)
 8001644:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001648:	f7ff fa6c 	bl	8000b24 <__aeabi_dcmpge>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d018      	beq.n	8001684 <print_number+0xec>
	{
		if (p)	str=ensure(p,21);
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <print_number+0xcc>
 8001658:	2115      	movs	r1, #21
 800165a:	69b8      	ldr	r0, [r7, #24]
 800165c:	f7ff ff1e 	bl	800149c <ensure>
 8001660:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001662:	e004      	b.n	800166e <print_number+0xd6>
		else	str=(char*)cJSON_malloc(21);	/* 2^64+1 can be represented in 21 chars. */
 8001664:	4b4a      	ldr	r3, [pc, #296]	@ (8001790 <print_number+0x1f8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2015      	movs	r0, #21
 800166a:	4798      	blx	r3
 800166c:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if (str)	sprintf(str,"%d",item->valueint);
 800166e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001670:	2b00      	cmp	r3, #0
 8001672:	d075      	beq.n	8001760 <print_number+0x1c8>
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	461a      	mov	r2, r3
 800167a:	4949      	ldr	r1, [pc, #292]	@ (80017a0 <print_number+0x208>)
 800167c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800167e:	f00b fcc5 	bl	800d00c <siprintf>
 8001682:	e06d      	b.n	8001760 <print_number+0x1c8>
	}
	else
	{
		if (p)	str=ensure(p,64);
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d005      	beq.n	8001696 <print_number+0xfe>
 800168a:	2140      	movs	r1, #64	@ 0x40
 800168c:	69b8      	ldr	r0, [r7, #24]
 800168e:	f7ff ff05 	bl	800149c <ensure>
 8001692:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001694:	e004      	b.n	80016a0 <print_number+0x108>
		else	str=(char*)cJSON_malloc(64);	/* This is a nice tradeoff. */
 8001696:	4b3e      	ldr	r3, [pc, #248]	@ (8001790 <print_number+0x1f8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2040      	movs	r0, #64	@ 0x40
 800169c:	4798      	blx	r3
 800169e:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if (str)
 80016a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d05c      	beq.n	8001760 <print_number+0x1c8>
		{
			if (fabs(floor(d)-d)<=DBL_EPSILON && fabs(d)<1.0e60)sprintf(str,"%.0f",d);
 80016a6:	ed97 0b08 	vldr	d0, [r7, #32]
 80016aa:	f00e f879 	bl	800f7a0 <floor>
 80016ae:	ec51 0b10 	vmov	r0, r1, d0
 80016b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016b6:	f7fe fdf7 	bl	80002a8 <__aeabi_dsub>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4690      	mov	r8, r2
 80016c0:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	4b33      	ldr	r3, [pc, #204]	@ (8001798 <print_number+0x200>)
 80016ca:	4640      	mov	r0, r8
 80016cc:	4649      	mov	r1, r9
 80016ce:	f7ff fa1f 	bl	8000b10 <__aeabi_dcmple>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d016      	beq.n	8001706 <print_number+0x16e>
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	a324      	add	r3, pc, #144	@ (adr r3, 8001778 <print_number+0x1e0>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016ee:	f7ff fa05 	bl	8000afc <__aeabi_dcmplt>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d006      	beq.n	8001706 <print_number+0x16e>
 80016f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016fc:	4929      	ldr	r1, [pc, #164]	@ (80017a4 <print_number+0x20c>)
 80016fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001700:	f00b fc84 	bl	800d00c <siprintf>
 8001704:	e02c      	b.n	8001760 <print_number+0x1c8>
			else if (fabs(d)<1.0e-6 || fabs(d)>1.0e9)			sprintf(str,"%e",d);
 8001706:	6a3b      	ldr	r3, [r7, #32]
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	a31b      	add	r3, pc, #108	@ (adr r3, 8001780 <print_number+0x1e8>)
 8001714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001718:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800171c:	f7ff f9ee 	bl	8000afc <__aeabi_dcmplt>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d10f      	bne.n	8001746 <print_number+0x1ae>
 8001726:	6a3b      	ldr	r3, [r7, #32]
 8001728:	603b      	str	r3, [r7, #0]
 800172a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	a315      	add	r3, pc, #84	@ (adr r3, 8001788 <print_number+0x1f0>)
 8001734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001738:	e9d7 0100 	ldrd	r0, r1, [r7]
 800173c:	f7ff f9fc 	bl	8000b38 <__aeabi_dcmpgt>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d006      	beq.n	8001754 <print_number+0x1bc>
 8001746:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800174a:	4917      	ldr	r1, [pc, #92]	@ (80017a8 <print_number+0x210>)
 800174c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800174e:	f00b fc5d 	bl	800d00c <siprintf>
 8001752:	e005      	b.n	8001760 <print_number+0x1c8>
			else												sprintf(str,"%f",d);
 8001754:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001758:	4914      	ldr	r1, [pc, #80]	@ (80017ac <print_number+0x214>)
 800175a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800175c:	f00b fc56 	bl	800d00c <siprintf>
		}
	}
	return str;
 8001760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001762:	4618      	mov	r0, r3
 8001764:	3730      	adds	r7, #48	@ 0x30
 8001766:	46bd      	mov	sp, r7
 8001768:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800176c:	f3af 8000 	nop.w
 8001770:	ffc00000 	.word	0xffc00000
 8001774:	41dfffff 	.word	0x41dfffff
 8001778:	e4c2f344 	.word	0xe4c2f344
 800177c:	4c63e9e4 	.word	0x4c63e9e4
 8001780:	a0b5ed8d 	.word	0xa0b5ed8d
 8001784:	3eb0c6f7 	.word	0x3eb0c6f7
 8001788:	00000000 	.word	0x00000000
 800178c:	41cdcd65 	.word	0x41cdcd65
 8001790:	20000000 	.word	0x20000000
 8001794:	08010670 	.word	0x08010670
 8001798:	3cb00000 	.word	0x3cb00000
 800179c:	c1e00000 	.word	0xc1e00000
 80017a0:	08010674 	.word	0x08010674
 80017a4:	08010678 	.word	0x08010678
 80017a8:	08010680 	.word	0x08010680
 80017ac:	08010684 	.word	0x08010684

080017b0 <parse_hex4>:

static unsigned parse_hex4(const char *str)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	unsigned h=0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b2f      	cmp	r3, #47	@ 0x2f
 80017c2:	d90b      	bls.n	80017dc <parse_hex4+0x2c>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b39      	cmp	r3, #57	@ 0x39
 80017ca:	d807      	bhi.n	80017dc <parse_hex4+0x2c>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4413      	add	r3, r2
 80017d6:	3b30      	subs	r3, #48	@ 0x30
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	e021      	b.n	8001820 <parse_hex4+0x70>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b40      	cmp	r3, #64	@ 0x40
 80017e2:	d90b      	bls.n	80017fc <parse_hex4+0x4c>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b46      	cmp	r3, #70	@ 0x46
 80017ea:	d807      	bhi.n	80017fc <parse_hex4+0x4c>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4413      	add	r3, r2
 80017f6:	3b37      	subs	r3, #55	@ 0x37
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	e011      	b.n	8001820 <parse_hex4+0x70>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b60      	cmp	r3, #96	@ 0x60
 8001802:	d90b      	bls.n	800181c <parse_hex4+0x6c>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b66      	cmp	r3, #102	@ 0x66
 800180a:	d807      	bhi.n	800181c <parse_hex4+0x6c>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	4413      	add	r3, r2
 8001816:	3b57      	subs	r3, #87	@ 0x57
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	e001      	b.n	8001820 <parse_hex4+0x70>
 800181c:	2300      	movs	r3, #0
 800181e:	e0a8      	b.n	8001972 <parse_hex4+0x1c2>
	h=h<<4;str++;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	011b      	lsls	r3, r3, #4
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3301      	adds	r3, #1
 800182a:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b2f      	cmp	r3, #47	@ 0x2f
 8001832:	d90b      	bls.n	800184c <parse_hex4+0x9c>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b39      	cmp	r3, #57	@ 0x39
 800183a:	d807      	bhi.n	800184c <parse_hex4+0x9c>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4413      	add	r3, r2
 8001846:	3b30      	subs	r3, #48	@ 0x30
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	e021      	b.n	8001890 <parse_hex4+0xe0>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b40      	cmp	r3, #64	@ 0x40
 8001852:	d90b      	bls.n	800186c <parse_hex4+0xbc>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b46      	cmp	r3, #70	@ 0x46
 800185a:	d807      	bhi.n	800186c <parse_hex4+0xbc>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4413      	add	r3, r2
 8001866:	3b37      	subs	r3, #55	@ 0x37
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	e011      	b.n	8001890 <parse_hex4+0xe0>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b60      	cmp	r3, #96	@ 0x60
 8001872:	d90b      	bls.n	800188c <parse_hex4+0xdc>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b66      	cmp	r3, #102	@ 0x66
 800187a:	d807      	bhi.n	800188c <parse_hex4+0xdc>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	4413      	add	r3, r2
 8001886:	3b57      	subs	r3, #87	@ 0x57
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	e001      	b.n	8001890 <parse_hex4+0xe0>
 800188c:	2300      	movs	r3, #0
 800188e:	e070      	b.n	8001972 <parse_hex4+0x1c2>
	h=h<<4;str++;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	011b      	lsls	r3, r3, #4
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3301      	adds	r3, #1
 800189a:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b2f      	cmp	r3, #47	@ 0x2f
 80018a2:	d90b      	bls.n	80018bc <parse_hex4+0x10c>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b39      	cmp	r3, #57	@ 0x39
 80018aa:	d807      	bhi.n	80018bc <parse_hex4+0x10c>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4413      	add	r3, r2
 80018b6:	3b30      	subs	r3, #48	@ 0x30
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	e021      	b.n	8001900 <parse_hex4+0x150>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b40      	cmp	r3, #64	@ 0x40
 80018c2:	d90b      	bls.n	80018dc <parse_hex4+0x12c>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b46      	cmp	r3, #70	@ 0x46
 80018ca:	d807      	bhi.n	80018dc <parse_hex4+0x12c>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4413      	add	r3, r2
 80018d6:	3b37      	subs	r3, #55	@ 0x37
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	e011      	b.n	8001900 <parse_hex4+0x150>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b60      	cmp	r3, #96	@ 0x60
 80018e2:	d90b      	bls.n	80018fc <parse_hex4+0x14c>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b66      	cmp	r3, #102	@ 0x66
 80018ea:	d807      	bhi.n	80018fc <parse_hex4+0x14c>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4413      	add	r3, r2
 80018f6:	3b57      	subs	r3, #87	@ 0x57
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	e001      	b.n	8001900 <parse_hex4+0x150>
 80018fc:	2300      	movs	r3, #0
 80018fe:	e038      	b.n	8001972 <parse_hex4+0x1c2>
	h=h<<4;str++;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	011b      	lsls	r3, r3, #4
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3301      	adds	r3, #1
 800190a:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b2f      	cmp	r3, #47	@ 0x2f
 8001912:	d90b      	bls.n	800192c <parse_hex4+0x17c>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b39      	cmp	r3, #57	@ 0x39
 800191a:	d807      	bhi.n	800192c <parse_hex4+0x17c>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	4413      	add	r3, r2
 8001926:	3b30      	subs	r3, #48	@ 0x30
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	e021      	b.n	8001970 <parse_hex4+0x1c0>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b40      	cmp	r3, #64	@ 0x40
 8001932:	d90b      	bls.n	800194c <parse_hex4+0x19c>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b46      	cmp	r3, #70	@ 0x46
 800193a:	d807      	bhi.n	800194c <parse_hex4+0x19c>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4413      	add	r3, r2
 8001946:	3b37      	subs	r3, #55	@ 0x37
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	e011      	b.n	8001970 <parse_hex4+0x1c0>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b60      	cmp	r3, #96	@ 0x60
 8001952:	d90b      	bls.n	800196c <parse_hex4+0x1bc>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b66      	cmp	r3, #102	@ 0x66
 800195a:	d807      	bhi.n	800196c <parse_hex4+0x1bc>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4413      	add	r3, r2
 8001966:	3b57      	subs	r3, #87	@ 0x57
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	e001      	b.n	8001970 <parse_hex4+0x1c0>
 800196c:	2300      	movs	r3, #0
 800196e:	e000      	b.n	8001972 <parse_hex4+0x1c2>
	return h;
 8001970:	68fb      	ldr	r3, [r7, #12]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <parse_string>:

/* Parse the input text into an unescaped cstring, and populate item. */
static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };
static const char *parse_string(cJSON *item,const char *str)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	3301      	adds	r3, #1
 800198e:	61fb      	str	r3, [r7, #28]
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
	if (*str!='\"') {ep=str;return 0;}	/* not a string! */
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b22      	cmp	r3, #34	@ 0x22
 800199a:	d00d      	beq.n	80019b8 <parse_string+0x38>
 800199c:	4a9f      	ldr	r2, [pc, #636]	@ (8001c1c <parse_string+0x29c>)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	2300      	movs	r3, #0
 80019a4:	e166      	b.n	8001c74 <parse_string+0x2f4>
	
	while (*ptr!='\"' && *ptr && ++len) if (*ptr++ == '\\') ptr++;	/* Skip escaped quotes. */
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	1c5a      	adds	r2, r3, #1
 80019aa:	61fa      	str	r2, [r7, #28]
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b5c      	cmp	r3, #92	@ 0x5c
 80019b0:	d102      	bne.n	80019b8 <parse_string+0x38>
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3301      	adds	r3, #1
 80019b6:	61fb      	str	r3, [r7, #28]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b22      	cmp	r3, #34	@ 0x22
 80019be:	d009      	beq.n	80019d4 <parse_string+0x54>
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d005      	beq.n	80019d4 <parse_string+0x54>
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	3301      	adds	r3, #1
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1e8      	bne.n	80019a6 <parse_string+0x26>
	
	out=(char*)cJSON_malloc(len+1);	/* This is how long we need for the string, roughly. */
 80019d4:	4b92      	ldr	r3, [pc, #584]	@ (8001c20 <parse_string+0x2a0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	3201      	adds	r2, #1
 80019dc:	4610      	mov	r0, r2
 80019de:	4798      	blx	r3
 80019e0:	60f8      	str	r0, [r7, #12]
	if (!out) return 0;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <parse_string+0x6c>
 80019e8:	2300      	movs	r3, #0
 80019ea:	e143      	b.n	8001c74 <parse_string+0x2f4>
	
	ptr=str+1;ptr2=out;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	3301      	adds	r3, #1
 80019f0:	61fb      	str	r3, [r7, #28]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	61bb      	str	r3, [r7, #24]
	while (*ptr!='\"' && *ptr)
 80019f6:	e123      	b.n	8001c40 <parse_string+0x2c0>
	{
		if (*ptr!='\\') *ptr2++=*ptr++;
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b5c      	cmp	r3, #92	@ 0x5c
 80019fe:	d008      	beq.n	8001a12 <parse_string+0x92>
 8001a00:	69fa      	ldr	r2, [r7, #28]
 8001a02:	1c53      	adds	r3, r2, #1
 8001a04:	61fb      	str	r3, [r7, #28]
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	1c59      	adds	r1, r3, #1
 8001a0a:	61b9      	str	r1, [r7, #24]
 8001a0c:	7812      	ldrb	r2, [r2, #0]
 8001a0e:	701a      	strb	r2, [r3, #0]
 8001a10:	e116      	b.n	8001c40 <parse_string+0x2c0>
		else
		{
			ptr++;
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3301      	adds	r3, #1
 8001a16:	61fb      	str	r3, [r7, #28]
			switch (*ptr)
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	3b62      	subs	r3, #98	@ 0x62
 8001a1e:	2b13      	cmp	r3, #19
 8001a20:	f200 8104 	bhi.w	8001c2c <parse_string+0x2ac>
 8001a24:	a201      	add	r2, pc, #4	@ (adr r2, 8001a2c <parse_string+0xac>)
 8001a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a2a:	bf00      	nop
 8001a2c:	08001a7d 	.word	0x08001a7d
 8001a30:	08001c2d 	.word	0x08001c2d
 8001a34:	08001c2d 	.word	0x08001c2d
 8001a38:	08001c2d 	.word	0x08001c2d
 8001a3c:	08001a89 	.word	0x08001a89
 8001a40:	08001c2d 	.word	0x08001c2d
 8001a44:	08001c2d 	.word	0x08001c2d
 8001a48:	08001c2d 	.word	0x08001c2d
 8001a4c:	08001c2d 	.word	0x08001c2d
 8001a50:	08001c2d 	.word	0x08001c2d
 8001a54:	08001c2d 	.word	0x08001c2d
 8001a58:	08001c2d 	.word	0x08001c2d
 8001a5c:	08001a95 	.word	0x08001a95
 8001a60:	08001c2d 	.word	0x08001c2d
 8001a64:	08001c2d 	.word	0x08001c2d
 8001a68:	08001c2d 	.word	0x08001c2d
 8001a6c:	08001aa1 	.word	0x08001aa1
 8001a70:	08001c2d 	.word	0x08001c2d
 8001a74:	08001aad 	.word	0x08001aad
 8001a78:	08001ab9 	.word	0x08001ab9
			{
				case 'b': *ptr2++='\b';	break;
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	61ba      	str	r2, [r7, #24]
 8001a82:	2208      	movs	r2, #8
 8001a84:	701a      	strb	r2, [r3, #0]
 8001a86:	e0d8      	b.n	8001c3a <parse_string+0x2ba>
				case 'f': *ptr2++='\f';	break;
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	61ba      	str	r2, [r7, #24]
 8001a8e:	220c      	movs	r2, #12
 8001a90:	701a      	strb	r2, [r3, #0]
 8001a92:	e0d2      	b.n	8001c3a <parse_string+0x2ba>
				case 'n': *ptr2++='\n';	break;
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	61ba      	str	r2, [r7, #24]
 8001a9a:	220a      	movs	r2, #10
 8001a9c:	701a      	strb	r2, [r3, #0]
 8001a9e:	e0cc      	b.n	8001c3a <parse_string+0x2ba>
				case 'r': *ptr2++='\r';	break;
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	61ba      	str	r2, [r7, #24]
 8001aa6:	220d      	movs	r2, #13
 8001aa8:	701a      	strb	r2, [r3, #0]
 8001aaa:	e0c6      	b.n	8001c3a <parse_string+0x2ba>
				case 't': *ptr2++='\t';	break;
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	61ba      	str	r2, [r7, #24]
 8001ab2:	2209      	movs	r2, #9
 8001ab4:	701a      	strb	r2, [r3, #0]
 8001ab6:	e0c0      	b.n	8001c3a <parse_string+0x2ba>
				case 'u':	 /* transcode utf16 to utf8. */
					uc=parse_hex4(ptr+1);ptr+=4;	/* get the unicode char. */
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	3301      	adds	r3, #1
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fe77 	bl	80017b0 <parse_hex4>
 8001ac2:	6138      	str	r0, [r7, #16]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	3304      	adds	r3, #4
 8001ac8:	61fb      	str	r3, [r7, #28]

					if ((uc>=0xDC00 && uc<=0xDFFF) || uc==0)	break;	/* check for invalid.	*/
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8001ad0:	d304      	bcc.n	8001adc <parse_string+0x15c>
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8001ad8:	f0c0 80af 	bcc.w	8001c3a <parse_string+0x2ba>
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 80ab 	beq.w	8001c3a <parse_string+0x2ba>

					if (uc>=0xD800 && uc<=0xDBFF)	/* UTF16 surrogate pairs.	*/
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 8001aea:	d32d      	bcc.n	8001b48 <parse_string+0x1c8>
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8001af2:	d229      	bcs.n	8001b48 <parse_string+0x1c8>
					{
						if (ptr[1]!='\\' || ptr[2]!='u')	break;	/* missing second-half of surrogate.	*/
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	3301      	adds	r3, #1
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b5c      	cmp	r3, #92	@ 0x5c
 8001afc:	f040 809d 	bne.w	8001c3a <parse_string+0x2ba>
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	3302      	adds	r3, #2
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b75      	cmp	r3, #117	@ 0x75
 8001b08:	f040 8097 	bne.w	8001c3a <parse_string+0x2ba>
						uc2=parse_hex4(ptr+3);ptr+=6;
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	3303      	adds	r3, #3
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fe4d 	bl	80017b0 <parse_hex4>
 8001b16:	60b8      	str	r0, [r7, #8]
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	3306      	adds	r3, #6
 8001b1c:	61fb      	str	r3, [r7, #28]
						if (uc2<0xDC00 || uc2>0xDFFF)		break;	/* invalid second-half of surrogate.	*/
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8001b24:	f0c0 8089 	bcc.w	8001c3a <parse_string+0x2ba>
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8001b2e:	f080 8084 	bcs.w	8001c3a <parse_string+0x2ba>
						uc=0x10000 + (((uc&0x3FF)<<10) | (uc2&0x3FF));
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	029a      	lsls	r2, r3, #10
 8001b36:	4b3b      	ldr	r3, [pc, #236]	@ (8001c24 <parse_string+0x2a4>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001b40:	4313      	orrs	r3, r2
 8001b42:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001b46:	613b      	str	r3, [r7, #16]
					}

					len=4;if (uc<0x80) len=1;else if (uc<0x800) len=2;else if (uc<0x10000) len=3; ptr2+=len;
 8001b48:	2304      	movs	r3, #4
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b50:	d802      	bhi.n	8001b58 <parse_string+0x1d8>
 8001b52:	2301      	movs	r3, #1
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	e00c      	b.n	8001b72 <parse_string+0x1f2>
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b5e:	d202      	bcs.n	8001b66 <parse_string+0x1e6>
 8001b60:	2302      	movs	r3, #2
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	e005      	b.n	8001b72 <parse_string+0x1f2>
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b6c:	d201      	bcs.n	8001b72 <parse_string+0x1f2>
 8001b6e:	2303      	movs	r3, #3
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4413      	add	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	d847      	bhi.n	8001c12 <parse_string+0x292>
 8001b82:	a201      	add	r2, pc, #4	@ (adr r2, 8001b88 <parse_string+0x208>)
 8001b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b88:	08001bf9 	.word	0x08001bf9
 8001b8c:	08001bd9 	.word	0x08001bd9
 8001b90:	08001bb9 	.word	0x08001bb9
 8001b94:	08001b99 	.word	0x08001b99
					
					switch (len) {
						case 4: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	3a01      	subs	r2, #1
 8001ba6:	61ba      	str	r2, [r7, #24]
 8001ba8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	701a      	strb	r2, [r3, #0]
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	099b      	lsrs	r3, r3, #6
 8001bb6:	613b      	str	r3, [r7, #16]
						case 3: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	3a01      	subs	r2, #1
 8001bc6:	61ba      	str	r2, [r7, #24]
 8001bc8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	701a      	strb	r2, [r3, #0]
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	099b      	lsrs	r3, r3, #6
 8001bd6:	613b      	str	r3, [r7, #16]
						case 2: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	3a01      	subs	r2, #1
 8001be6:	61ba      	str	r2, [r7, #24]
 8001be8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	701a      	strb	r2, [r3, #0]
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	099b      	lsrs	r3, r3, #6
 8001bf6:	613b      	str	r3, [r7, #16]
						case 1: *--ptr2 =(uc | firstByteMark[len]);
 8001bf8:	4a0b      	ldr	r2, [pc, #44]	@ (8001c28 <parse_string+0x2a8>)
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	781a      	ldrb	r2, [r3, #0]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	69b9      	ldr	r1, [r7, #24]
 8001c06:	3901      	subs	r1, #1
 8001c08:	61b9      	str	r1, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	701a      	strb	r2, [r3, #0]
					}
					ptr2+=len;
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4413      	add	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
					break;
 8001c1a:	e00e      	b.n	8001c3a <parse_string+0x2ba>
 8001c1c:	2000013c 	.word	0x2000013c
 8001c20:	20000000 	.word	0x20000000
 8001c24:	000ffc00 	.word	0x000ffc00
 8001c28:	08010abc 	.word	0x08010abc
				default:  *ptr2++=*ptr; break;
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	61ba      	str	r2, [r7, #24]
 8001c32:	69fa      	ldr	r2, [r7, #28]
 8001c34:	7812      	ldrb	r2, [r2, #0]
 8001c36:	701a      	strb	r2, [r3, #0]
 8001c38:	bf00      	nop
			}
			ptr++;
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	61fb      	str	r3, [r7, #28]
	while (*ptr!='\"' && *ptr)
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b22      	cmp	r3, #34	@ 0x22
 8001c46:	d004      	beq.n	8001c52 <parse_string+0x2d2>
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f47f aed3 	bne.w	80019f8 <parse_string+0x78>
		}
	}
	*ptr2=0;
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	2200      	movs	r2, #0
 8001c56:	701a      	strb	r2, [r3, #0]
	if (*ptr=='\"') ptr++;
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b22      	cmp	r3, #34	@ 0x22
 8001c5e:	d102      	bne.n	8001c66 <parse_string+0x2e6>
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	3301      	adds	r3, #1
 8001c64:	61fb      	str	r3, [r7, #28]
	item->valuestring=out;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
	item->type=cJSON_String;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2204      	movs	r2, #4
 8001c70:	60da      	str	r2, [r3, #12]
	return ptr;
 8001c72:	69fb      	ldr	r3, [r7, #28]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3720      	adds	r7, #32
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static char *print_string_ptr(const char *str,printbuffer *p)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
	const char *ptr;
    char *ptr2, *out;
    int len = 0, flag = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
    unsigned char token;
	
	for (ptr=str;*ptr;ptr++) 
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	61fb      	str	r3, [r7, #28]
 8001c92:	e018      	b.n	8001cc6 <print_string_ptr+0x4a>
        flag|=((*ptr>0 && *ptr<32)||(*ptr=='\"')||(*ptr=='\\'))?1:0;
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <print_string_ptr+0x28>
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b1f      	cmp	r3, #31
 8001ca2:	d907      	bls.n	8001cb4 <print_string_ptr+0x38>
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b22      	cmp	r3, #34	@ 0x22
 8001caa:	d003      	beq.n	8001cb4 <print_string_ptr+0x38>
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b5c      	cmp	r3, #92	@ 0x5c
 8001cb2:	d101      	bne.n	8001cb8 <print_string_ptr+0x3c>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <print_string_ptr+0x3e>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	60fb      	str	r3, [r7, #12]
	for (ptr=str;*ptr;ptr++) 
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	61fb      	str	r3, [r7, #28]
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1e2      	bne.n	8001c94 <print_string_ptr+0x18>
    
	if (!flag)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d132      	bne.n	8001d3a <print_string_ptr+0xbe>
	{
		len = ptr - str;
 8001cd4:	69fa      	ldr	r2, [r7, #28]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	613b      	str	r3, [r7, #16]
		if (p) 
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d007      	beq.n	8001cf2 <print_string_ptr+0x76>
            out = ensure(p, len + 3);
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	3303      	adds	r3, #3
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	6838      	ldr	r0, [r7, #0]
 8001cea:	f7ff fbd7 	bl	800149c <ensure>
 8001cee:	6178      	str	r0, [r7, #20]
 8001cf0:	e006      	b.n	8001d00 <print_string_ptr+0x84>
		else		
            out = (char *)cJSON_malloc(len + 3);
 8001cf2:	4b98      	ldr	r3, [pc, #608]	@ (8001f54 <print_string_ptr+0x2d8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	3203      	adds	r2, #3
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	4798      	blx	r3
 8001cfe:	6178      	str	r0, [r7, #20]
        
		if (!out) 
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <print_string_ptr+0x8e>
            return 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	e120      	b.n	8001f4c <print_string_ptr+0x2d0>
        
		ptr2=out;*ptr2++='\"';
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	61bb      	str	r3, [r7, #24]
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	61ba      	str	r2, [r7, #24]
 8001d14:	2222      	movs	r2, #34	@ 0x22
 8001d16:	701a      	strb	r2, [r3, #0]
		strcpy(ptr2,str);
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	69b8      	ldr	r0, [r7, #24]
 8001d1c:	f00c f807 	bl	800dd2e <strcpy>
		ptr2[len]='\"';
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4413      	add	r3, r2
 8001d26:	2222      	movs	r2, #34	@ 0x22
 8001d28:	701a      	strb	r2, [r3, #0]
		ptr2[len+1]=0;
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4413      	add	r3, r2
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
		return out;
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	e108      	b.n	8001f4c <print_string_ptr+0x2d0>
	}
	
	if (!str)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d11a      	bne.n	8001d76 <print_string_ptr+0xfa>
	{
		if (p)	out=ensure(p,3);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d005      	beq.n	8001d52 <print_string_ptr+0xd6>
 8001d46:	2103      	movs	r1, #3
 8001d48:	6838      	ldr	r0, [r7, #0]
 8001d4a:	f7ff fba7 	bl	800149c <ensure>
 8001d4e:	6178      	str	r0, [r7, #20]
 8001d50:	e004      	b.n	8001d5c <print_string_ptr+0xe0>
		else	out=(char*)cJSON_malloc(3);
 8001d52:	4b80      	ldr	r3, [pc, #512]	@ (8001f54 <print_string_ptr+0x2d8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2003      	movs	r0, #3
 8001d58:	4798      	blx	r3
 8001d5a:	6178      	str	r0, [r7, #20]
		if (!out) return 0;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <print_string_ptr+0xea>
 8001d62:	2300      	movs	r3, #0
 8001d64:	e0f2      	b.n	8001f4c <print_string_ptr+0x2d0>
		strcpy(out,"\"\"");
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	4a7b      	ldr	r2, [pc, #492]	@ (8001f58 <print_string_ptr+0x2dc>)
 8001d6a:	8811      	ldrh	r1, [r2, #0]
 8001d6c:	7892      	ldrb	r2, [r2, #2]
 8001d6e:	8019      	strh	r1, [r3, #0]
 8001d70:	709a      	strb	r2, [r3, #2]
		return out;
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	e0ea      	b.n	8001f4c <print_string_ptr+0x2d0>
	}
	ptr=str;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	61fb      	str	r3, [r7, #28]

    while ((token = *ptr) != 0 && ++len) 
 8001d7a:	e014      	b.n	8001da6 <print_string_ptr+0x12a>
    {
        if (strchr("\"\\\b\f\n\r\t",token)) 
 8001d7c:	7afb      	ldrb	r3, [r7, #11]
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4876      	ldr	r0, [pc, #472]	@ (8001f5c <print_string_ptr+0x2e0>)
 8001d82:	f00b fb1b 	bl	800d3bc <strchr>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <print_string_ptr+0x118>
            len++; 
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	e005      	b.n	8001da0 <print_string_ptr+0x124>
        else if (token < 32) 
 8001d94:	7afb      	ldrb	r3, [r7, #11]
 8001d96:	2b1f      	cmp	r3, #31
 8001d98:	d802      	bhi.n	8001da0 <print_string_ptr+0x124>
            len += 5;
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	3305      	adds	r3, #5
 8001d9e:	613b      	str	r3, [r7, #16]
        ptr++;
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	3301      	adds	r3, #1
 8001da4:	61fb      	str	r3, [r7, #28]
    while ((token = *ptr) != 0 && ++len) 
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	72fb      	strb	r3, [r7, #11]
 8001dac:	7afb      	ldrb	r3, [r7, #11]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d005      	beq.n	8001dbe <print_string_ptr+0x142>
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	3301      	adds	r3, #1
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1de      	bne.n	8001d7c <print_string_ptr+0x100>
    }
	
	if (p)	out=ensure(p,len+3);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d007      	beq.n	8001dd4 <print_string_ptr+0x158>
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	3303      	adds	r3, #3
 8001dc8:	4619      	mov	r1, r3
 8001dca:	6838      	ldr	r0, [r7, #0]
 8001dcc:	f7ff fb66 	bl	800149c <ensure>
 8001dd0:	6178      	str	r0, [r7, #20]
 8001dd2:	e006      	b.n	8001de2 <print_string_ptr+0x166>
	else	out=(char*)cJSON_malloc(len+3);
 8001dd4:	4b5f      	ldr	r3, [pc, #380]	@ (8001f54 <print_string_ptr+0x2d8>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	3203      	adds	r2, #3
 8001ddc:	4610      	mov	r0, r2
 8001dde:	4798      	blx	r3
 8001de0:	6178      	str	r0, [r7, #20]
	if (!out) return 0;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <print_string_ptr+0x170>
 8001de8:	2300      	movs	r3, #0
 8001dea:	e0af      	b.n	8001f4c <print_string_ptr+0x2d0>

	ptr2=out;ptr=str;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	61bb      	str	r3, [r7, #24]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	61fb      	str	r3, [r7, #28]
	*ptr2++='\"';
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	1c5a      	adds	r2, r3, #1
 8001df8:	61ba      	str	r2, [r7, #24]
 8001dfa:	2222      	movs	r2, #34	@ 0x22
 8001dfc:	701a      	strb	r2, [r3, #0]
	while (*ptr)
 8001dfe:	e095      	b.n	8001f2c <print_string_ptr+0x2b0>
	{
		if ((unsigned char)*ptr>31 && *ptr!='\"' && *ptr!='\\') *ptr2++=*ptr++;
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b1f      	cmp	r3, #31
 8001e06:	d910      	bls.n	8001e2a <print_string_ptr+0x1ae>
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b22      	cmp	r3, #34	@ 0x22
 8001e0e:	d00c      	beq.n	8001e2a <print_string_ptr+0x1ae>
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b5c      	cmp	r3, #92	@ 0x5c
 8001e16:	d008      	beq.n	8001e2a <print_string_ptr+0x1ae>
 8001e18:	69fa      	ldr	r2, [r7, #28]
 8001e1a:	1c53      	adds	r3, r2, #1
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	1c59      	adds	r1, r3, #1
 8001e22:	61b9      	str	r1, [r7, #24]
 8001e24:	7812      	ldrb	r2, [r2, #0]
 8001e26:	701a      	strb	r2, [r3, #0]
 8001e28:	e080      	b.n	8001f2c <print_string_ptr+0x2b0>
		else
		{
			*ptr2++='\\';
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	61ba      	str	r2, [r7, #24]
 8001e30:	225c      	movs	r2, #92	@ 0x5c
 8001e32:	701a      	strb	r2, [r3, #0]
			switch (token=*ptr++)
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	61fa      	str	r2, [r7, #28]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	72fb      	strb	r3, [r7, #11]
 8001e3e:	7afb      	ldrb	r3, [r7, #11]
 8001e40:	2b22      	cmp	r3, #34	@ 0x22
 8001e42:	dc3d      	bgt.n	8001ec0 <print_string_ptr+0x244>
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	db67      	blt.n	8001f18 <print_string_ptr+0x29c>
 8001e48:	3b08      	subs	r3, #8
 8001e4a:	2b1a      	cmp	r3, #26
 8001e4c:	d864      	bhi.n	8001f18 <print_string_ptr+0x29c>
 8001e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e54 <print_string_ptr+0x1d8>)
 8001e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e54:	08001edd 	.word	0x08001edd
 8001e58:	08001f0d 	.word	0x08001f0d
 8001e5c:	08001ef5 	.word	0x08001ef5
 8001e60:	08001f19 	.word	0x08001f19
 8001e64:	08001ee9 	.word	0x08001ee9
 8001e68:	08001f01 	.word	0x08001f01
 8001e6c:	08001f19 	.word	0x08001f19
 8001e70:	08001f19 	.word	0x08001f19
 8001e74:	08001f19 	.word	0x08001f19
 8001e78:	08001f19 	.word	0x08001f19
 8001e7c:	08001f19 	.word	0x08001f19
 8001e80:	08001f19 	.word	0x08001f19
 8001e84:	08001f19 	.word	0x08001f19
 8001e88:	08001f19 	.word	0x08001f19
 8001e8c:	08001f19 	.word	0x08001f19
 8001e90:	08001f19 	.word	0x08001f19
 8001e94:	08001f19 	.word	0x08001f19
 8001e98:	08001f19 	.word	0x08001f19
 8001e9c:	08001f19 	.word	0x08001f19
 8001ea0:	08001f19 	.word	0x08001f19
 8001ea4:	08001f19 	.word	0x08001f19
 8001ea8:	08001f19 	.word	0x08001f19
 8001eac:	08001f19 	.word	0x08001f19
 8001eb0:	08001f19 	.word	0x08001f19
 8001eb4:	08001f19 	.word	0x08001f19
 8001eb8:	08001f19 	.word	0x08001f19
 8001ebc:	08001ed1 	.word	0x08001ed1
 8001ec0:	2b5c      	cmp	r3, #92	@ 0x5c
 8001ec2:	d129      	bne.n	8001f18 <print_string_ptr+0x29c>
			{
				case '\\':	*ptr2++='\\';	break;
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	61ba      	str	r2, [r7, #24]
 8001eca:	225c      	movs	r2, #92	@ 0x5c
 8001ecc:	701a      	strb	r2, [r3, #0]
 8001ece:	e02d      	b.n	8001f2c <print_string_ptr+0x2b0>
				case '\"':	*ptr2++='\"';	break;
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	61ba      	str	r2, [r7, #24]
 8001ed6:	2222      	movs	r2, #34	@ 0x22
 8001ed8:	701a      	strb	r2, [r3, #0]
 8001eda:	e027      	b.n	8001f2c <print_string_ptr+0x2b0>
				case '\b':	*ptr2++='b';	break;
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	61ba      	str	r2, [r7, #24]
 8001ee2:	2262      	movs	r2, #98	@ 0x62
 8001ee4:	701a      	strb	r2, [r3, #0]
 8001ee6:	e021      	b.n	8001f2c <print_string_ptr+0x2b0>
				case '\f':	*ptr2++='f';	break;
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	61ba      	str	r2, [r7, #24]
 8001eee:	2266      	movs	r2, #102	@ 0x66
 8001ef0:	701a      	strb	r2, [r3, #0]
 8001ef2:	e01b      	b.n	8001f2c <print_string_ptr+0x2b0>
				case '\n':	*ptr2++='n';	break;
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	61ba      	str	r2, [r7, #24]
 8001efa:	226e      	movs	r2, #110	@ 0x6e
 8001efc:	701a      	strb	r2, [r3, #0]
 8001efe:	e015      	b.n	8001f2c <print_string_ptr+0x2b0>
				case '\r':	*ptr2++='r';	break;
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	1c5a      	adds	r2, r3, #1
 8001f04:	61ba      	str	r2, [r7, #24]
 8001f06:	2272      	movs	r2, #114	@ 0x72
 8001f08:	701a      	strb	r2, [r3, #0]
 8001f0a:	e00f      	b.n	8001f2c <print_string_ptr+0x2b0>
				case '\t':	*ptr2++='t';	break;
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	61ba      	str	r2, [r7, #24]
 8001f12:	2274      	movs	r2, #116	@ 0x74
 8001f14:	701a      	strb	r2, [r3, #0]
 8001f16:	e009      	b.n	8001f2c <print_string_ptr+0x2b0>
				default: sprintf(ptr2,"u%04x",token);ptr2+=5;	break;	/* escape and print */
 8001f18:	7afb      	ldrb	r3, [r7, #11]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4910      	ldr	r1, [pc, #64]	@ (8001f60 <print_string_ptr+0x2e4>)
 8001f1e:	69b8      	ldr	r0, [r7, #24]
 8001f20:	f00b f874 	bl	800d00c <siprintf>
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	3305      	adds	r3, #5
 8001f28:	61bb      	str	r3, [r7, #24]
 8001f2a:	bf00      	nop
	while (*ptr)
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f47f af65 	bne.w	8001e00 <print_string_ptr+0x184>
			}
		}
	}
	*ptr2++='\"';*ptr2++=0;
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	1c5a      	adds	r2, r3, #1
 8001f3a:	61ba      	str	r2, [r7, #24]
 8001f3c:	2222      	movs	r2, #34	@ 0x22
 8001f3e:	701a      	strb	r2, [r3, #0]
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	61ba      	str	r2, [r7, #24]
 8001f46:	2200      	movs	r2, #0
 8001f48:	701a      	strb	r2, [r3, #0]
	return out;
 8001f4a:	697b      	ldr	r3, [r7, #20]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3720      	adds	r7, #32
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000000 	.word	0x20000000
 8001f58:	08010688 	.word	0x08010688
 8001f5c:	0801068c 	.word	0x0801068c
 8001f60:	08010694 	.word	0x08010694

08001f64 <print_string>:
/* Invote print_string_ptr (which is useful) on an item. */
static char *print_string(cJSON *item,printbuffer *p)	{return print_string_ptr(item->valuestring,p);}
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	6839      	ldr	r1, [r7, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fe81 	bl	8001c7c <print_string_ptr>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <skip>:
static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p);
static const char *parse_object(cJSON *item,const char *value);
static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p);

/* Utility to jump whitespace and cr/lf */
static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	e002      	b.n	8001f94 <skip+0x10>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3301      	adds	r3, #1
 8001f92:	607b      	str	r3, [r7, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d007      	beq.n	8001faa <skip+0x26>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <skip+0x26>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b20      	cmp	r3, #32
 8001fa8:	d9f1      	bls.n	8001f8e <skip+0xa>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <cJSON_ParseWithOpts>:

/* Parse an object - create a new root, and populate. */
cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
	const char *end=0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
	cJSON *c=cJSON_New_Item();
 8001fc8:	f7ff f8c6 	bl	8001158 <cJSON_New_Item>
 8001fcc:	6138      	str	r0, [r7, #16]
	ep=0;
 8001fce:	4b1b      	ldr	r3, [pc, #108]	@ (800203c <cJSON_ParseWithOpts+0x84>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
	if (!c) return 0;       /* memory fail */
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <cJSON_ParseWithOpts+0x26>
 8001fda:	2300      	movs	r3, #0
 8001fdc:	e02a      	b.n	8002034 <cJSON_ParseWithOpts+0x7c>

	end=parse_value(c,skip(value));
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f7ff ffd0 	bl	8001f84 <skip>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	6938      	ldr	r0, [r7, #16]
 8001fea:	f000 f847 	bl	800207c <parse_value>
 8001fee:	6178      	str	r0, [r7, #20]
	if (!end)	{cJSON_Delete(c);return 0;}	/* parse failure. ep is set. */
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d104      	bne.n	8002000 <cJSON_ParseWithOpts+0x48>
 8001ff6:	6938      	ldr	r0, [r7, #16]
 8001ff8:	f7ff f8c6 	bl	8001188 <cJSON_Delete>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	e019      	b.n	8002034 <cJSON_ParseWithOpts+0x7c>

	/* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
	if (require_null_terminated) {end=skip(end);if (*end) {cJSON_Delete(c);ep=end;return 0;}}
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00f      	beq.n	8002026 <cJSON_ParseWithOpts+0x6e>
 8002006:	6978      	ldr	r0, [r7, #20]
 8002008:	f7ff ffbc 	bl	8001f84 <skip>
 800200c:	6178      	str	r0, [r7, #20]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d007      	beq.n	8002026 <cJSON_ParseWithOpts+0x6e>
 8002016:	6938      	ldr	r0, [r7, #16]
 8002018:	f7ff f8b6 	bl	8001188 <cJSON_Delete>
 800201c:	4a07      	ldr	r2, [pc, #28]	@ (800203c <cJSON_ParseWithOpts+0x84>)
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	2300      	movs	r3, #0
 8002024:	e006      	b.n	8002034 <cJSON_ParseWithOpts+0x7c>
	if (return_parse_end) *return_parse_end=end;
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d002      	beq.n	8002032 <cJSON_ParseWithOpts+0x7a>
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	601a      	str	r2, [r3, #0]
	return c;
 8002032:	693b      	ldr	r3, [r7, #16]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	2000013c 	.word	0x2000013c

08002040 <cJSON_Parse>:
/* Default options for cJSON_Parse */
cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	2100      	movs	r1, #0
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff ffb3 	bl	8001fb8 <cJSON_ParseWithOpts>
 8002052:	4603      	mov	r3, r0
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
char *cJSON_Print(cJSON *item)				{return print_value(item,0,1, 0);}
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	2300      	movs	r3, #0
 8002066:	2201      	movs	r2, #1
 8002068:	2100      	movs	r1, #0
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f87e 	bl	800216c <print_value>
 8002070:	4603      	mov	r3, r0
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <parse_value>:
}


/* Parser core - when encountering text, process appropriately. */
static const char *parse_value(cJSON *item,const char *value)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
	if (!value)						return 0;	/* Fail on null. */
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <parse_value+0x14>
 800208c:	2300      	movs	r3, #0
 800208e:	e060      	b.n	8002152 <parse_value+0xd6>
	if (!strncmp(value,"null",4))	{ item->type=cJSON_NULL;  return value+4; }
 8002090:	2204      	movs	r2, #4
 8002092:	4932      	ldr	r1, [pc, #200]	@ (800215c <parse_value+0xe0>)
 8002094:	6838      	ldr	r0, [r7, #0]
 8002096:	f00b f99e 	bl	800d3d6 <strncmp>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d105      	bne.n	80020ac <parse_value+0x30>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2202      	movs	r2, #2
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	3304      	adds	r3, #4
 80020aa:	e052      	b.n	8002152 <parse_value+0xd6>
	if (!strncmp(value,"false",5))	{ item->type=cJSON_False; return value+5; }
 80020ac:	2205      	movs	r2, #5
 80020ae:	492c      	ldr	r1, [pc, #176]	@ (8002160 <parse_value+0xe4>)
 80020b0:	6838      	ldr	r0, [r7, #0]
 80020b2:	f00b f990 	bl	800d3d6 <strncmp>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d105      	bne.n	80020c8 <parse_value+0x4c>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	3305      	adds	r3, #5
 80020c6:	e044      	b.n	8002152 <parse_value+0xd6>
	if (!strncmp(value,"true",4))	{ item->type=cJSON_True; item->valueint=1;	return value+4; }
 80020c8:	2204      	movs	r2, #4
 80020ca:	4926      	ldr	r1, [pc, #152]	@ (8002164 <parse_value+0xe8>)
 80020cc:	6838      	ldr	r0, [r7, #0]
 80020ce:	f00b f982 	bl	800d3d6 <strncmp>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d108      	bne.n	80020ea <parse_value+0x6e>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	615a      	str	r2, [r3, #20]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	3304      	adds	r3, #4
 80020e8:	e033      	b.n	8002152 <parse_value+0xd6>
	if (*value=='\"')				{ return parse_string(item,value); }
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b22      	cmp	r3, #34	@ 0x22
 80020f0:	d105      	bne.n	80020fe <parse_value+0x82>
 80020f2:	6839      	ldr	r1, [r7, #0]
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff fc43 	bl	8001980 <parse_string>
 80020fa:	4603      	mov	r3, r0
 80020fc:	e029      	b.n	8002152 <parse_value+0xd6>
	if (*value=='-' || (*value>='0' && *value<='9'))	{ return parse_number(item,value); }
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b2d      	cmp	r3, #45	@ 0x2d
 8002104:	d007      	beq.n	8002116 <parse_value+0x9a>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b2f      	cmp	r3, #47	@ 0x2f
 800210c:	d909      	bls.n	8002122 <parse_value+0xa6>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b39      	cmp	r3, #57	@ 0x39
 8002114:	d805      	bhi.n	8002122 <parse_value+0xa6>
 8002116:	6839      	ldr	r1, [r7, #0]
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff f87d 	bl	8001218 <parse_number>
 800211e:	4603      	mov	r3, r0
 8002120:	e017      	b.n	8002152 <parse_value+0xd6>
	if (*value=='[')				{ return parse_array(item,value); }
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b5b      	cmp	r3, #91	@ 0x5b
 8002128:	d105      	bne.n	8002136 <parse_value+0xba>
 800212a:	6839      	ldr	r1, [r7, #0]
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f8e1 	bl	80022f4 <parse_array>
 8002132:	4603      	mov	r3, r0
 8002134:	e00d      	b.n	8002152 <parse_value+0xd6>
	if (*value=='{')				{ return parse_object(item,value); }
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b7b      	cmp	r3, #123	@ 0x7b
 800213c:	d105      	bne.n	800214a <parse_value+0xce>
 800213e:	6839      	ldr	r1, [r7, #0]
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 fadb 	bl	80026fc <parse_object>
 8002146:	4603      	mov	r3, r0
 8002148:	e003      	b.n	8002152 <parse_value+0xd6>

	ep=value;return 0;	/* failure. */
 800214a:	4a07      	ldr	r2, [pc, #28]	@ (8002168 <parse_value+0xec>)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	0801069c 	.word	0x0801069c
 8002160:	080106a4 	.word	0x080106a4
 8002164:	080106ac 	.word	0x080106ac
 8002168:	2000013c 	.word	0x2000013c

0800216c <print_value>:

/* Render a value to text. */
static char *print_value(cJSON *item,int depth,int fmt,printbuffer *p)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
 8002178:	603b      	str	r3, [r7, #0]
	char *out=0;
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
	if (!item) return 0;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <print_value+0x1c>
 8002184:	2300      	movs	r3, #0
 8002186:	e0aa      	b.n	80022de <print_value+0x172>
	if (p)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d060      	beq.n	8002250 <print_value+0xe4>
	{
		switch ((item->type)&255)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b06      	cmp	r3, #6
 8002196:	f200 80a1 	bhi.w	80022dc <print_value+0x170>
 800219a:	a201      	add	r2, pc, #4	@ (adr r2, 80021a0 <print_value+0x34>)
 800219c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a0:	080021dd 	.word	0x080021dd
 80021a4:	080021fb 	.word	0x080021fb
 80021a8:	080021bd 	.word	0x080021bd
 80021ac:	08002219 	.word	0x08002219
 80021b0:	08002225 	.word	0x08002225
 80021b4:	08002231 	.word	0x08002231
 80021b8:	08002241 	.word	0x08002241
		{
			case cJSON_NULL:	{out=ensure(p,5);	if (out) strcpy(out,"null");	break;}
 80021bc:	2105      	movs	r1, #5
 80021be:	6838      	ldr	r0, [r7, #0]
 80021c0:	f7ff f96c 	bl	800149c <ensure>
 80021c4:	6178      	str	r0, [r7, #20]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 8082 	beq.w	80022d2 <print_value+0x166>
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	4a45      	ldr	r2, [pc, #276]	@ (80022e8 <print_value+0x17c>)
 80021d2:	6810      	ldr	r0, [r2, #0]
 80021d4:	6018      	str	r0, [r3, #0]
 80021d6:	7912      	ldrb	r2, [r2, #4]
 80021d8:	711a      	strb	r2, [r3, #4]
 80021da:	e07a      	b.n	80022d2 <print_value+0x166>
			case cJSON_False:	{out=ensure(p,6);	if (out) strcpy(out,"false");	break;}
 80021dc:	2106      	movs	r1, #6
 80021de:	6838      	ldr	r0, [r7, #0]
 80021e0:	f7ff f95c 	bl	800149c <ensure>
 80021e4:	6178      	str	r0, [r7, #20]
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d074      	beq.n	80022d6 <print_value+0x16a>
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	4a3f      	ldr	r2, [pc, #252]	@ (80022ec <print_value+0x180>)
 80021f0:	6810      	ldr	r0, [r2, #0]
 80021f2:	6018      	str	r0, [r3, #0]
 80021f4:	8892      	ldrh	r2, [r2, #4]
 80021f6:	809a      	strh	r2, [r3, #4]
 80021f8:	e06d      	b.n	80022d6 <print_value+0x16a>
			case cJSON_True:	{out=ensure(p,5);	if (out) strcpy(out,"true");	break;}
 80021fa:	2105      	movs	r1, #5
 80021fc:	6838      	ldr	r0, [r7, #0]
 80021fe:	f7ff f94d 	bl	800149c <ensure>
 8002202:	6178      	str	r0, [r7, #20]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d067      	beq.n	80022da <print_value+0x16e>
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	4a38      	ldr	r2, [pc, #224]	@ (80022f0 <print_value+0x184>)
 800220e:	6810      	ldr	r0, [r2, #0]
 8002210:	6018      	str	r0, [r3, #0]
 8002212:	7912      	ldrb	r2, [r2, #4]
 8002214:	711a      	strb	r2, [r3, #4]
 8002216:	e060      	b.n	80022da <print_value+0x16e>
			case cJSON_Number:	out=print_number(item,p);break;
 8002218:	6839      	ldr	r1, [r7, #0]
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f7ff f9bc 	bl	8001598 <print_number>
 8002220:	6178      	str	r0, [r7, #20]
 8002222:	e05b      	b.n	80022dc <print_value+0x170>
			case cJSON_String:	out=print_string(item,p);break;
 8002224:	6839      	ldr	r1, [r7, #0]
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f7ff fe9c 	bl	8001f64 <print_string>
 800222c:	6178      	str	r0, [r7, #20]
 800222e:	e055      	b.n	80022dc <print_value+0x170>
			case cJSON_Array:	out=print_array(item,depth,fmt,p);break;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68b9      	ldr	r1, [r7, #8]
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 f8d2 	bl	80023e0 <print_array>
 800223c:	6178      	str	r0, [r7, #20]
 800223e:	e04d      	b.n	80022dc <print_value+0x170>
			case cJSON_Object:	out=print_object(item,depth,fmt,p);break;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	68b9      	ldr	r1, [r7, #8]
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 fb16 	bl	8002878 <print_object>
 800224c:	6178      	str	r0, [r7, #20]
 800224e:	e045      	b.n	80022dc <print_value+0x170>
		}
	}
	else
	{
		switch ((item->type)&255)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b06      	cmp	r3, #6
 8002258:	d840      	bhi.n	80022dc <print_value+0x170>
 800225a:	a201      	add	r2, pc, #4	@ (adr r2, 8002260 <print_value+0xf4>)
 800225c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002260:	08002287 	.word	0x08002287
 8002264:	08002291 	.word	0x08002291
 8002268:	0800227d 	.word	0x0800227d
 800226c:	0800229b 	.word	0x0800229b
 8002270:	080022a7 	.word	0x080022a7
 8002274:	080022b3 	.word	0x080022b3
 8002278:	080022c3 	.word	0x080022c3
		{
			case cJSON_NULL:	out=cJSON_strdup("null");	break;
 800227c:	481a      	ldr	r0, [pc, #104]	@ (80022e8 <print_value+0x17c>)
 800227e:	f7fe ff4b 	bl	8001118 <cJSON_strdup>
 8002282:	6178      	str	r0, [r7, #20]
 8002284:	e02a      	b.n	80022dc <print_value+0x170>
			case cJSON_False:	out=cJSON_strdup("false");break;
 8002286:	4819      	ldr	r0, [pc, #100]	@ (80022ec <print_value+0x180>)
 8002288:	f7fe ff46 	bl	8001118 <cJSON_strdup>
 800228c:	6178      	str	r0, [r7, #20]
 800228e:	e025      	b.n	80022dc <print_value+0x170>
			case cJSON_True:	out=cJSON_strdup("true"); break;
 8002290:	4817      	ldr	r0, [pc, #92]	@ (80022f0 <print_value+0x184>)
 8002292:	f7fe ff41 	bl	8001118 <cJSON_strdup>
 8002296:	6178      	str	r0, [r7, #20]
 8002298:	e020      	b.n	80022dc <print_value+0x170>
			case cJSON_Number:	out=print_number(item,0);break;
 800229a:	2100      	movs	r1, #0
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f7ff f97b 	bl	8001598 <print_number>
 80022a2:	6178      	str	r0, [r7, #20]
 80022a4:	e01a      	b.n	80022dc <print_value+0x170>
			case cJSON_String:	out=print_string(item,0);break;
 80022a6:	2100      	movs	r1, #0
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f7ff fe5b 	bl	8001f64 <print_string>
 80022ae:	6178      	str	r0, [r7, #20]
 80022b0:	e014      	b.n	80022dc <print_value+0x170>
			case cJSON_Array:	out=print_array(item,depth,fmt,0);break;
 80022b2:	2300      	movs	r3, #0
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	68b9      	ldr	r1, [r7, #8]
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 f891 	bl	80023e0 <print_array>
 80022be:	6178      	str	r0, [r7, #20]
 80022c0:	e00c      	b.n	80022dc <print_value+0x170>
			case cJSON_Object:	out=print_object(item,depth,fmt,0);break;
 80022c2:	2300      	movs	r3, #0
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	68b9      	ldr	r1, [r7, #8]
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f000 fad5 	bl	8002878 <print_object>
 80022ce:	6178      	str	r0, [r7, #20]
 80022d0:	e004      	b.n	80022dc <print_value+0x170>
			case cJSON_NULL:	{out=ensure(p,5);	if (out) strcpy(out,"null");	break;}
 80022d2:	bf00      	nop
 80022d4:	e002      	b.n	80022dc <print_value+0x170>
			case cJSON_False:	{out=ensure(p,6);	if (out) strcpy(out,"false");	break;}
 80022d6:	bf00      	nop
 80022d8:	e000      	b.n	80022dc <print_value+0x170>
			case cJSON_True:	{out=ensure(p,5);	if (out) strcpy(out,"true");	break;}
 80022da:	bf00      	nop
		}
	}
	return out;
 80022dc:	697b      	ldr	r3, [r7, #20]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	0801069c 	.word	0x0801069c
 80022ec:	080106a4 	.word	0x080106a4
 80022f0:	080106ac 	.word	0x080106ac

080022f4 <parse_array>:

/* Build an array from input text. */
static const char *parse_array(cJSON *item,const char *value)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
	cJSON *child;
	if (*value!='[')	{ep=value;return 0;}	/* not an array! */
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b5b      	cmp	r3, #91	@ 0x5b
 8002304:	d004      	beq.n	8002310 <parse_array+0x1c>
 8002306:	4a35      	ldr	r2, [pc, #212]	@ (80023dc <parse_array+0xe8>)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	2300      	movs	r3, #0
 800230e:	e060      	b.n	80023d2 <parse_array+0xde>

	item->type=cJSON_Array;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2205      	movs	r2, #5
 8002314:	60da      	str	r2, [r3, #12]
	value=skip(value+1);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	3301      	adds	r3, #1
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fe32 	bl	8001f84 <skip>
 8002320:	6038      	str	r0, [r7, #0]
	if (*value==']') return value+1;	/* empty array. */
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b5d      	cmp	r3, #93	@ 0x5d
 8002328:	d102      	bne.n	8002330 <parse_array+0x3c>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	3301      	adds	r3, #1
 800232e:	e050      	b.n	80023d2 <parse_array+0xde>

	item->child=child=cJSON_New_Item();
 8002330:	f7fe ff12 	bl	8001158 <cJSON_New_Item>
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	609a      	str	r2, [r3, #8]
	if (!item->child) return 0;		 /* memory fail */
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <parse_array+0x54>
 8002344:	2300      	movs	r3, #0
 8002346:	e044      	b.n	80023d2 <parse_array+0xde>
	value=skip(parse_value(child,skip(value)));	/* skip any spacing, get the value. */
 8002348:	6838      	ldr	r0, [r7, #0]
 800234a:	f7ff fe1b 	bl	8001f84 <skip>
 800234e:	4603      	mov	r3, r0
 8002350:	4619      	mov	r1, r3
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f7ff fe92 	bl	800207c <parse_value>
 8002358:	4603      	mov	r3, r0
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff fe12 	bl	8001f84 <skip>
 8002360:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d125      	bne.n	80023b4 <parse_array+0xc0>
 8002368:	2300      	movs	r3, #0
 800236a:	e032      	b.n	80023d2 <parse_array+0xde>

	while (*value==',')
	{
		cJSON *new_item;
        
        new_item = cJSON_New_Item();
 800236c:	f7fe fef4 	bl	8001158 <cJSON_New_Item>
 8002370:	60b8      	str	r0, [r7, #8]
		if (!new_item) 
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <parse_array+0x88>
            return NULL; 	/* memory fail */
 8002378:	2300      	movs	r3, #0
 800237a:	e02a      	b.n	80023d2 <parse_array+0xde>
        
		child->next=new_item;new_item->prev=child;child=new_item;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	60fb      	str	r3, [r7, #12]
		value=skip(parse_value(child,skip(value+1)));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	3301      	adds	r3, #1
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fdf7 	bl	8001f84 <skip>
 8002396:	4603      	mov	r3, r0
 8002398:	4619      	mov	r1, r3
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f7ff fe6e 	bl	800207c <parse_value>
 80023a0:	4603      	mov	r3, r0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff fdee 	bl	8001f84 <skip>
 80023a8:	6038      	str	r0, [r7, #0]
		if (!value) return NULL;	/* memory fail */
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <parse_array+0xc0>
 80023b0:	2300      	movs	r3, #0
 80023b2:	e00e      	b.n	80023d2 <parse_array+0xde>
	while (*value==',')
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b2c      	cmp	r3, #44	@ 0x2c
 80023ba:	d0d7      	beq.n	800236c <parse_array+0x78>
	}

	if (*value==']') return value+1;	/* end of array */
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b5d      	cmp	r3, #93	@ 0x5d
 80023c2:	d102      	bne.n	80023ca <parse_array+0xd6>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	3301      	adds	r3, #1
 80023c8:	e003      	b.n	80023d2 <parse_array+0xde>
	ep=value;return 0;	/* malformed. */
 80023ca:	4a04      	ldr	r2, [pc, #16]	@ (80023dc <parse_array+0xe8>)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	2000013c 	.word	0x2000013c

080023e0 <print_array>:

/* Render an array to text */
static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08e      	sub	sp, #56	@ 0x38
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
 80023ec:	603b      	str	r3, [r7, #0]
	char **entries;
	char *out=0,*ptr,*ret;int len=5;
 80023ee:	2300      	movs	r3, #0
 80023f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80023f2:	2305      	movs	r3, #5
 80023f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	cJSON *child=item->child;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	int numentries=0,i=0,fail=0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002400:	2300      	movs	r3, #0
 8002402:	623b      	str	r3, [r7, #32]
 8002404:	2300      	movs	r3, #0
 8002406:	61fb      	str	r3, [r7, #28]
	size_t tmplen=0;
 8002408:	2300      	movs	r3, #0
 800240a:	61bb      	str	r3, [r7, #24]
	
	/* How many entries in the array? */
	while (child) numentries++,child=child->next;
 800240c:	e005      	b.n	800241a <print_array+0x3a>
 800240e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002410:	3301      	adds	r3, #1
 8002412:	627b      	str	r3, [r7, #36]	@ 0x24
 8002414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	62bb      	str	r3, [r7, #40]	@ 0x28
 800241a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f6      	bne.n	800240e <print_array+0x2e>
	/* Explicitly handle numentries==0 */
	if (!numentries)
 8002420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002422:	2b00      	cmp	r3, #0
 8002424:	d118      	bne.n	8002458 <print_array+0x78>
	{
		if (p)	out=ensure(p,3);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <print_array+0x58>
 800242c:	2103      	movs	r1, #3
 800242e:	6838      	ldr	r0, [r7, #0]
 8002430:	f7ff f834 	bl	800149c <ensure>
 8002434:	6378      	str	r0, [r7, #52]	@ 0x34
 8002436:	e004      	b.n	8002442 <print_array+0x62>
		else	out=(char*)cJSON_malloc(3);
 8002438:	4b84      	ldr	r3, [pc, #528]	@ (800264c <print_array+0x26c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2003      	movs	r0, #3
 800243e:	4798      	blx	r3
 8002440:	6378      	str	r0, [r7, #52]	@ 0x34
		if (out) strcpy(out,"[]");
 8002442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <print_array+0x74>
 8002448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800244a:	4a81      	ldr	r2, [pc, #516]	@ (8002650 <print_array+0x270>)
 800244c:	8811      	ldrh	r1, [r2, #0]
 800244e:	7892      	ldrb	r2, [r2, #2]
 8002450:	8019      	strh	r1, [r3, #0]
 8002452:	709a      	strb	r2, [r3, #2]
		return out;
 8002454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002456:	e14a      	b.n	80026ee <print_array+0x30e>
	}

	if (p)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d073      	beq.n	8002546 <print_array+0x166>
	{
		/* Compose the output array. */
		i=p->offset;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	623b      	str	r3, [r7, #32]
		ptr=ensure(p,1);if (!ptr) return 0;	*ptr='[';	p->offset++;
 8002464:	2101      	movs	r1, #1
 8002466:	6838      	ldr	r0, [r7, #0]
 8002468:	f7ff f818 	bl	800149c <ensure>
 800246c:	6338      	str	r0, [r7, #48]	@ 0x30
 800246e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <print_array+0x98>
 8002474:	2300      	movs	r3, #0
 8002476:	e13a      	b.n	80026ee <print_array+0x30e>
 8002478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247a:	225b      	movs	r2, #91	@ 0x5b
 800247c:	701a      	strb	r2, [r3, #0]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	1c5a      	adds	r2, r3, #1
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	609a      	str	r2, [r3, #8]
		child=item->child;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	62bb      	str	r3, [r7, #40]	@ 0x28
		while (child && !fail)
 800248e:	e03c      	b.n	800250a <print_array+0x12a>
		{
			print_value(child,depth+1,fmt,p);
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	1c59      	adds	r1, r3, #1
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800249a:	f7ff fe67 	bl	800216c <print_value>
			p->offset=update(p);
 800249e:	6838      	ldr	r0, [r7, #0]
 80024a0:	f7ff f85a 	bl	8001558 <update>
 80024a4:	4602      	mov	r2, r0
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	609a      	str	r2, [r3, #8]
			if (child->next) {len=fmt?2:1;ptr=ensure(p,len+1);if (!ptr) return 0;*ptr++=',';if(fmt)*ptr++=' ';*ptr=0;p->offset+=len;}
 80024aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d028      	beq.n	8002504 <print_array+0x124>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <print_array+0xdc>
 80024b8:	2302      	movs	r3, #2
 80024ba:	e000      	b.n	80024be <print_array+0xde>
 80024bc:	2301      	movs	r3, #1
 80024be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024c2:	3301      	adds	r3, #1
 80024c4:	4619      	mov	r1, r3
 80024c6:	6838      	ldr	r0, [r7, #0]
 80024c8:	f7fe ffe8 	bl	800149c <ensure>
 80024cc:	6338      	str	r0, [r7, #48]	@ 0x30
 80024ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <print_array+0xf8>
 80024d4:	2300      	movs	r3, #0
 80024d6:	e10a      	b.n	80026ee <print_array+0x30e>
 80024d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024da:	1c5a      	adds	r2, r3, #1
 80024dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80024de:	222c      	movs	r2, #44	@ 0x2c
 80024e0:	701a      	strb	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d004      	beq.n	80024f2 <print_array+0x112>
 80024e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	633a      	str	r2, [r7, #48]	@ 0x30
 80024ee:	2220      	movs	r2, #32
 80024f0:	701a      	strb	r2, [r3, #0]
 80024f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024fe:	441a      	add	r2, r3
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	609a      	str	r2, [r3, #8]
			child=child->next;
 8002504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	62bb      	str	r3, [r7, #40]	@ 0x28
		while (child && !fail)
 800250a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800250c:	2b00      	cmp	r3, #0
 800250e:	d002      	beq.n	8002516 <print_array+0x136>
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0bc      	beq.n	8002490 <print_array+0xb0>
		}
		ptr=ensure(p,2);if (!ptr) return 0;	*ptr++=']';*ptr=0;
 8002516:	2102      	movs	r1, #2
 8002518:	6838      	ldr	r0, [r7, #0]
 800251a:	f7fe ffbf 	bl	800149c <ensure>
 800251e:	6338      	str	r0, [r7, #48]	@ 0x30
 8002520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <print_array+0x14a>
 8002526:	2300      	movs	r3, #0
 8002528:	e0e1      	b.n	80026ee <print_array+0x30e>
 800252a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002530:	225d      	movs	r2, #93	@ 0x5d
 8002532:	701a      	strb	r2, [r3, #0]
 8002534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002536:	2200      	movs	r2, #0
 8002538:	701a      	strb	r2, [r3, #0]
		out=(p->buffer)+i;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	4413      	add	r3, r2
 8002542:	637b      	str	r3, [r7, #52]	@ 0x34
 8002544:	e0d2      	b.n	80026ec <print_array+0x30c>
	}
	else
	{
		/* Allocate an array to hold the values for each */
		entries=(char**)cJSON_malloc(numentries*sizeof(char*));
 8002546:	4b41      	ldr	r3, [pc, #260]	@ (800264c <print_array+0x26c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800254c:	0092      	lsls	r2, r2, #2
 800254e:	4610      	mov	r0, r2
 8002550:	4798      	blx	r3
 8002552:	6178      	str	r0, [r7, #20]
		if (!entries) return 0;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <print_array+0x17e>
 800255a:	2300      	movs	r3, #0
 800255c:	e0c7      	b.n	80026ee <print_array+0x30e>
		memset(entries,0,numentries*sizeof(char*));
 800255e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	461a      	mov	r2, r3
 8002564:	2100      	movs	r1, #0
 8002566:	6978      	ldr	r0, [r7, #20]
 8002568:	f00a ff47 	bl	800d3fa <memset>
		/* Retrieve all the results: */
		child=item->child;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	62bb      	str	r3, [r7, #40]	@ 0x28
		while (child && !fail)
 8002572:	e027      	b.n	80025c4 <print_array+0x1e4>
		{
			ret=print_value(child,depth+1,fmt,0);
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	1c59      	adds	r1, r3, #1
 8002578:	2300      	movs	r3, #0
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800257e:	f7ff fdf5 	bl	800216c <print_value>
 8002582:	6138      	str	r0, [r7, #16]
			entries[i++]=ret;
 8002584:	6a3b      	ldr	r3, [r7, #32]
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	623a      	str	r2, [r7, #32]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	4413      	add	r3, r2
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	601a      	str	r2, [r3, #0]
			if (ret) len+=strlen(ret)+2+(fmt?1:0); else fail=1;
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00f      	beq.n	80025ba <print_array+0x1da>
 800259a:	6938      	ldr	r0, [r7, #16]
 800259c:	f7fd fe18 	bl	80001d0 <strlen>
 80025a0:	4602      	mov	r2, r0
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <print_array+0x1cc>
 80025a8:	2301      	movs	r3, #1
 80025aa:	e000      	b.n	80025ae <print_array+0x1ce>
 80025ac:	2300      	movs	r3, #0
 80025ae:	441a      	add	r2, r3
 80025b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025b2:	4413      	add	r3, r2
 80025b4:	3302      	adds	r3, #2
 80025b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025b8:	e001      	b.n	80025be <print_array+0x1de>
 80025ba:	2301      	movs	r3, #1
 80025bc:	61fb      	str	r3, [r7, #28]
			child=child->next;
 80025be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	62bb      	str	r3, [r7, #40]	@ 0x28
		while (child && !fail)
 80025c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <print_array+0x1f0>
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0d1      	beq.n	8002574 <print_array+0x194>
		}
		
		/* If we didn't fail, try to malloc the output string */
		if (!fail)	out=(char*)cJSON_malloc(len);
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d105      	bne.n	80025e2 <print_array+0x202>
 80025d6:	4b1d      	ldr	r3, [pc, #116]	@ (800264c <print_array+0x26c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025dc:	4610      	mov	r0, r2
 80025de:	4798      	blx	r3
 80025e0:	6378      	str	r0, [r7, #52]	@ 0x34
		/* If that fails, we fail. */
		if (!out) fail=1;
 80025e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <print_array+0x20c>
 80025e8:	2301      	movs	r3, #1
 80025ea:	61fb      	str	r3, [r7, #28]

		/* Handle failure. */
		if (fail)
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d01f      	beq.n	8002632 <print_array+0x252>
		{
			for (i=0;i<numentries;i++) if (entries[i]) cJSON_free(entries[i]);
 80025f2:	2300      	movs	r3, #0
 80025f4:	623b      	str	r3, [r7, #32]
 80025f6:	e012      	b.n	800261e <print_array+0x23e>
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	4413      	add	r3, r2
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d008      	beq.n	8002618 <print_array+0x238>
 8002606:	4b13      	ldr	r3, [pc, #76]	@ (8002654 <print_array+0x274>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6a3a      	ldr	r2, [r7, #32]
 800260c:	0092      	lsls	r2, r2, #2
 800260e:	6979      	ldr	r1, [r7, #20]
 8002610:	440a      	add	r2, r1
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	4610      	mov	r0, r2
 8002616:	4798      	blx	r3
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	3301      	adds	r3, #1
 800261c:	623b      	str	r3, [r7, #32]
 800261e:	6a3a      	ldr	r2, [r7, #32]
 8002620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002622:	429a      	cmp	r2, r3
 8002624:	dbe8      	blt.n	80025f8 <print_array+0x218>
			cJSON_free(entries);
 8002626:	4b0b      	ldr	r3, [pc, #44]	@ (8002654 <print_array+0x274>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6978      	ldr	r0, [r7, #20]
 800262c:	4798      	blx	r3
			return 0;
 800262e:	2300      	movs	r3, #0
 8002630:	e05d      	b.n	80026ee <print_array+0x30e>
		}
		
		/* Compose the output array. */
		*out='[';
 8002632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002634:	225b      	movs	r2, #91	@ 0x5b
 8002636:	701a      	strb	r2, [r3, #0]
		ptr=out+1;*ptr=0;
 8002638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800263a:	3301      	adds	r3, #1
 800263c:	633b      	str	r3, [r7, #48]	@ 0x30
 800263e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]
		for (i=0;i<numentries;i++)
 8002644:	2300      	movs	r3, #0
 8002646:	623b      	str	r3, [r7, #32]
 8002648:	e03e      	b.n	80026c8 <print_array+0x2e8>
 800264a:	bf00      	nop
 800264c:	20000000 	.word	0x20000000
 8002650:	080106b4 	.word	0x080106b4
 8002654:	20000004 	.word	0x20000004
		{
			tmplen=strlen(entries[i]);memcpy(ptr,entries[i],tmplen);ptr+=tmplen;
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	4413      	add	r3, r2
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7fd fdb4 	bl	80001d0 <strlen>
 8002668:	61b8      	str	r0, [r7, #24]
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4413      	add	r3, r2
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4619      	mov	r1, r3
 8002678:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800267a:	f00b fb4a 	bl	800dd12 <memcpy>
 800267e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	4413      	add	r3, r2
 8002684:	633b      	str	r3, [r7, #48]	@ 0x30
			if (i!=numentries-1) {*ptr++=',';if(fmt)*ptr++=' ';*ptr=0;}
 8002686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002688:	3b01      	subs	r3, #1
 800268a:	6a3a      	ldr	r2, [r7, #32]
 800268c:	429a      	cmp	r2, r3
 800268e:	d00f      	beq.n	80026b0 <print_array+0x2d0>
 8002690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	633a      	str	r2, [r7, #48]	@ 0x30
 8002696:	222c      	movs	r2, #44	@ 0x2c
 8002698:	701a      	strb	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d004      	beq.n	80026aa <print_array+0x2ca>
 80026a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026a2:	1c5a      	adds	r2, r3, #1
 80026a4:	633a      	str	r2, [r7, #48]	@ 0x30
 80026a6:	2220      	movs	r2, #32
 80026a8:	701a      	strb	r2, [r3, #0]
 80026aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]
			cJSON_free(entries[i]);
 80026b0:	4b11      	ldr	r3, [pc, #68]	@ (80026f8 <print_array+0x318>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6a3a      	ldr	r2, [r7, #32]
 80026b6:	0092      	lsls	r2, r2, #2
 80026b8:	6979      	ldr	r1, [r7, #20]
 80026ba:	440a      	add	r2, r1
 80026bc:	6812      	ldr	r2, [r2, #0]
 80026be:	4610      	mov	r0, r2
 80026c0:	4798      	blx	r3
		for (i=0;i<numentries;i++)
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	3301      	adds	r3, #1
 80026c6:	623b      	str	r3, [r7, #32]
 80026c8:	6a3a      	ldr	r2, [r7, #32]
 80026ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026cc:	429a      	cmp	r2, r3
 80026ce:	dbc3      	blt.n	8002658 <print_array+0x278>
		}
		cJSON_free(entries);
 80026d0:	4b09      	ldr	r3, [pc, #36]	@ (80026f8 <print_array+0x318>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6978      	ldr	r0, [r7, #20]
 80026d6:	4798      	blx	r3
		*ptr++=']';*ptr++=0;
 80026d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80026de:	225d      	movs	r2, #93	@ 0x5d
 80026e0:	701a      	strb	r2, [r3, #0]
 80026e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
	}
	return out;	
 80026ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3738      	adds	r7, #56	@ 0x38
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000004 	.word	0x20000004

080026fc <parse_object>:

/* Build an object from the text. */
static const char *parse_object(cJSON *item,const char *value)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
	cJSON *child;
	if (*value!='{')	{ep=value;return 0;}	/* not an object! */
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b7b      	cmp	r3, #123	@ 0x7b
 800270c:	d004      	beq.n	8002718 <parse_object+0x1c>
 800270e:	4a59      	ldr	r2, [pc, #356]	@ (8002874 <parse_object+0x178>)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	2300      	movs	r3, #0
 8002716:	e0a8      	b.n	800286a <parse_object+0x16e>
	
	item->type=cJSON_Object;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2206      	movs	r2, #6
 800271c:	60da      	str	r2, [r3, #12]
	value=skip(value+1);
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	3301      	adds	r3, #1
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff fc2e 	bl	8001f84 <skip>
 8002728:	6038      	str	r0, [r7, #0]
	if (*value=='}') return value+1;	/* empty array. */
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b7d      	cmp	r3, #125	@ 0x7d
 8002730:	d102      	bne.n	8002738 <parse_object+0x3c>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	3301      	adds	r3, #1
 8002736:	e098      	b.n	800286a <parse_object+0x16e>
	
	item->child=child=cJSON_New_Item();
 8002738:	f7fe fd0e 	bl	8001158 <cJSON_New_Item>
 800273c:	60f8      	str	r0, [r7, #12]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	609a      	str	r2, [r3, #8]
	if (!item->child) return 0;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <parse_object+0x54>
 800274c:	2300      	movs	r3, #0
 800274e:	e08c      	b.n	800286a <parse_object+0x16e>
	value=skip(parse_string(child,skip(value)));
 8002750:	6838      	ldr	r0, [r7, #0]
 8002752:	f7ff fc17 	bl	8001f84 <skip>
 8002756:	4603      	mov	r3, r0
 8002758:	4619      	mov	r1, r3
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f7ff f910 	bl	8001980 <parse_string>
 8002760:	4603      	mov	r3, r0
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fc0e 	bl	8001f84 <skip>
 8002768:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <parse_object+0x78>
 8002770:	2300      	movs	r3, #0
 8002772:	e07a      	b.n	800286a <parse_object+0x16e>
	child->string=child->valuestring;child->valuestring=0;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	691a      	ldr	r2, [r3, #16]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	621a      	str	r2, [r3, #32]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	611a      	str	r2, [r3, #16]
	if (*value!=':') {ep=value;return 0;}	/* fail! */
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b3a      	cmp	r3, #58	@ 0x3a
 8002788:	d004      	beq.n	8002794 <parse_object+0x98>
 800278a:	4a3a      	ldr	r2, [pc, #232]	@ (8002874 <parse_object+0x178>)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	2300      	movs	r3, #0
 8002792:	e06a      	b.n	800286a <parse_object+0x16e>
	value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	3301      	adds	r3, #1
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fbf3 	bl	8001f84 <skip>
 800279e:	4603      	mov	r3, r0
 80027a0:	4619      	mov	r1, r3
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f7ff fc6a 	bl	800207c <parse_value>
 80027a8:	4603      	mov	r3, r0
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fbea 	bl	8001f84 <skip>
 80027b0:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d149      	bne.n	800284c <parse_object+0x150>
 80027b8:	2300      	movs	r3, #0
 80027ba:	e056      	b.n	800286a <parse_object+0x16e>
	
	while (*value==',')
	{
		cJSON *new_item = cJSON_New_Item();
 80027bc:	f7fe fccc 	bl	8001158 <cJSON_New_Item>
 80027c0:	60b8      	str	r0, [r7, #8]
        
		if (!new_item)	
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <parse_object+0xd0>
            return 0; /* memory fail */
 80027c8:	2300      	movs	r3, #0
 80027ca:	e04e      	b.n	800286a <parse_object+0x16e>
        
		child->next=new_item;new_item->prev=child;child=new_item;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	605a      	str	r2, [r3, #4]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	60fb      	str	r3, [r7, #12]
		value = skip(parse_string(child,skip(value+1)));
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	3301      	adds	r3, #1
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fbcf 	bl	8001f84 <skip>
 80027e6:	4603      	mov	r3, r0
 80027e8:	4619      	mov	r1, r3
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f7ff f8c8 	bl	8001980 <parse_string>
 80027f0:	4603      	mov	r3, r0
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff fbc6 	bl	8001f84 <skip>
 80027f8:	6038      	str	r0, [r7, #0]
		if (!value) return 0;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <parse_object+0x108>
 8002800:	2300      	movs	r3, #0
 8002802:	e032      	b.n	800286a <parse_object+0x16e>
		child->string=child->valuestring;child->valuestring=0;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	621a      	str	r2, [r3, #32]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	611a      	str	r2, [r3, #16]
		if (*value!=':') {ep=value;return 0;}	/* fail! */
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b3a      	cmp	r3, #58	@ 0x3a
 8002818:	d004      	beq.n	8002824 <parse_object+0x128>
 800281a:	4a16      	ldr	r2, [pc, #88]	@ (8002874 <parse_object+0x178>)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	2300      	movs	r3, #0
 8002822:	e022      	b.n	800286a <parse_object+0x16e>
		value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	3301      	adds	r3, #1
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fbab 	bl	8001f84 <skip>
 800282e:	4603      	mov	r3, r0
 8002830:	4619      	mov	r1, r3
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f7ff fc22 	bl	800207c <parse_value>
 8002838:	4603      	mov	r3, r0
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff fba2 	bl	8001f84 <skip>
 8002840:	6038      	str	r0, [r7, #0]
		if (!value) return 0;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <parse_object+0x150>
 8002848:	2300      	movs	r3, #0
 800284a:	e00e      	b.n	800286a <parse_object+0x16e>
	while (*value==',')
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b2c      	cmp	r3, #44	@ 0x2c
 8002852:	d0b3      	beq.n	80027bc <parse_object+0xc0>
	}
	
	if (*value=='}') return value+1;	/* end of array */
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b7d      	cmp	r3, #125	@ 0x7d
 800285a:	d102      	bne.n	8002862 <parse_object+0x166>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	3301      	adds	r3, #1
 8002860:	e003      	b.n	800286a <parse_object+0x16e>
	ep=value;return 0;	/* malformed. */
 8002862:	4a04      	ldr	r2, [pc, #16]	@ (8002874 <parse_object+0x178>)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	2000013c 	.word	0x2000013c

08002878 <print_object>:

/* Render an object to text. */
static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p)
{
 8002878:	b590      	push	{r4, r7, lr}
 800287a:	b093      	sub	sp, #76	@ 0x4c
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
 8002884:	603b      	str	r3, [r7, #0]
	char **entries=0,**names=0;
 8002886:	2300      	movs	r3, #0
 8002888:	627b      	str	r3, [r7, #36]	@ 0x24
 800288a:	2300      	movs	r3, #0
 800288c:	623b      	str	r3, [r7, #32]
	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;
 800288e:	2300      	movs	r3, #0
 8002890:	647b      	str	r3, [r7, #68]	@ 0x44
 8002892:	2307      	movs	r3, #7
 8002894:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002896:	2300      	movs	r3, #0
 8002898:	63bb      	str	r3, [r7, #56]	@ 0x38
	cJSON *child=item->child;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	633b      	str	r3, [r7, #48]	@ 0x30
	int numentries=0,fail=0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028a4:	2300      	movs	r3, #0
 80028a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	size_t tmplen=0;
 80028a8:	2300      	movs	r3, #0
 80028aa:	61fb      	str	r3, [r7, #28]
	/* Count the number of entries. */
	while (child) numentries++,child=child->next;
 80028ac:	e005      	b.n	80028ba <print_object+0x42>
 80028ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028b0:	3301      	adds	r3, #1
 80028b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80028ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f6      	bne.n	80028ae <print_object+0x36>
	/* Explicitly handle empty object case */
	if (!numentries)
 80028c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d14b      	bne.n	800295e <print_object+0xe6>
	{
		if (p) out=ensure(p,fmt?depth+4:3);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00c      	beq.n	80028e6 <print_object+0x6e>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d002      	beq.n	80028d8 <print_object+0x60>
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	3304      	adds	r3, #4
 80028d6:	e000      	b.n	80028da <print_object+0x62>
 80028d8:	2303      	movs	r3, #3
 80028da:	4619      	mov	r1, r3
 80028dc:	6838      	ldr	r0, [r7, #0]
 80028de:	f7fe fddd 	bl	800149c <ensure>
 80028e2:	6478      	str	r0, [r7, #68]	@ 0x44
 80028e4:	e00b      	b.n	80028fe <print_object+0x86>
		else	out=(char*)cJSON_malloc(fmt?depth+4:3);
 80028e6:	4b92      	ldr	r3, [pc, #584]	@ (8002b30 <print_object+0x2b8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	2a00      	cmp	r2, #0
 80028ee:	d002      	beq.n	80028f6 <print_object+0x7e>
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	3204      	adds	r2, #4
 80028f4:	e000      	b.n	80028f8 <print_object+0x80>
 80028f6:	2203      	movs	r2, #3
 80028f8:	4610      	mov	r0, r2
 80028fa:	4798      	blx	r3
 80028fc:	6478      	str	r0, [r7, #68]	@ 0x44
		if (!out)	return 0;
 80028fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <print_object+0x90>
 8002904:	2300      	movs	r3, #0
 8002906:	e2a4      	b.n	8002e52 <print_object+0x5da>
		ptr=out;*ptr++='{';
 8002908:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800290a:	643b      	str	r3, [r7, #64]	@ 0x40
 800290c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	643a      	str	r2, [r7, #64]	@ 0x40
 8002912:	227b      	movs	r2, #123	@ 0x7b
 8002914:	701a      	strb	r2, [r3, #0]
		if (fmt) {*ptr++='\n';for (i=0;i<depth-1;i++) *ptr++='\t';}
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d014      	beq.n	8002946 <print_object+0xce>
 800291c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800291e:	1c5a      	adds	r2, r3, #1
 8002920:	643a      	str	r2, [r7, #64]	@ 0x40
 8002922:	220a      	movs	r2, #10
 8002924:	701a      	strb	r2, [r3, #0]
 8002926:	2300      	movs	r3, #0
 8002928:	63bb      	str	r3, [r7, #56]	@ 0x38
 800292a:	e007      	b.n	800293c <print_object+0xc4>
 800292c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	643a      	str	r2, [r7, #64]	@ 0x40
 8002932:	2209      	movs	r2, #9
 8002934:	701a      	strb	r2, [r3, #0]
 8002936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002938:	3301      	adds	r3, #1
 800293a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	3b01      	subs	r3, #1
 8002940:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002942:	429a      	cmp	r2, r3
 8002944:	dbf2      	blt.n	800292c <print_object+0xb4>
		*ptr++='}';*ptr++=0;
 8002946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	643a      	str	r2, [r7, #64]	@ 0x40
 800294c:	227d      	movs	r2, #125	@ 0x7d
 800294e:	701a      	strb	r2, [r3, #0]
 8002950:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002952:	1c5a      	adds	r2, r3, #1
 8002954:	643a      	str	r2, [r7, #64]	@ 0x40
 8002956:	2200      	movs	r2, #0
 8002958:	701a      	strb	r2, [r3, #0]
		return out;
 800295a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800295c:	e279      	b.n	8002e52 <print_object+0x5da>
	}
	if (p)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 8102 	beq.w	8002b6a <print_object+0x2f2>
	{
		/* Compose the output: */
		i=p->offset;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	63bb      	str	r3, [r7, #56]	@ 0x38
		len=fmt?2:1;	ptr=ensure(p,len+1);	if (!ptr) return 0;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <print_object+0xfe>
 8002972:	2302      	movs	r3, #2
 8002974:	e000      	b.n	8002978 <print_object+0x100>
 8002976:	2301      	movs	r3, #1
 8002978:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800297a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800297c:	3301      	adds	r3, #1
 800297e:	4619      	mov	r1, r3
 8002980:	6838      	ldr	r0, [r7, #0]
 8002982:	f7fe fd8b 	bl	800149c <ensure>
 8002986:	6438      	str	r0, [r7, #64]	@ 0x40
 8002988:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <print_object+0x11a>
 800298e:	2300      	movs	r3, #0
 8002990:	e25f      	b.n	8002e52 <print_object+0x5da>
		*ptr++='{';	if (fmt) *ptr++='\n';	*ptr=0;	p->offset+=len;
 8002992:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	643a      	str	r2, [r7, #64]	@ 0x40
 8002998:	227b      	movs	r2, #123	@ 0x7b
 800299a:	701a      	strb	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d004      	beq.n	80029ac <print_object+0x134>
 80029a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	643a      	str	r2, [r7, #64]	@ 0x40
 80029a8:	220a      	movs	r2, #10
 80029aa:	701a      	strb	r2, [r3, #0]
 80029ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029b8:	441a      	add	r2, r3
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	609a      	str	r2, [r3, #8]
		child=item->child;depth++;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	3301      	adds	r3, #1
 80029c8:	60bb      	str	r3, [r7, #8]
		while (child)
 80029ca:	e096      	b.n	8002afa <print_object+0x282>
		{
			if (fmt)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d01e      	beq.n	8002a10 <print_object+0x198>
			{
				ptr=ensure(p,depth);	if (!ptr) return 0;
 80029d2:	68b9      	ldr	r1, [r7, #8]
 80029d4:	6838      	ldr	r0, [r7, #0]
 80029d6:	f7fe fd61 	bl	800149c <ensure>
 80029da:	6438      	str	r0, [r7, #64]	@ 0x40
 80029dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <print_object+0x16e>
 80029e2:	2300      	movs	r3, #0
 80029e4:	e235      	b.n	8002e52 <print_object+0x5da>
				for (j=0;j<depth;j++) *ptr++='\t';
 80029e6:	2300      	movs	r3, #0
 80029e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80029ea:	e007      	b.n	80029fc <print_object+0x184>
 80029ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	643a      	str	r2, [r7, #64]	@ 0x40
 80029f2:	2209      	movs	r2, #9
 80029f4:	701a      	strb	r2, [r3, #0]
 80029f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029f8:	3301      	adds	r3, #1
 80029fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80029fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	dbf3      	blt.n	80029ec <print_object+0x174>
				p->offset+=depth;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	441a      	add	r2, r3
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	609a      	str	r2, [r3, #8]
			}
			print_string_ptr(child->string,p);
 8002a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	6839      	ldr	r1, [r7, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff f930 	bl	8001c7c <print_string_ptr>
			p->offset=update(p);
 8002a1c:	6838      	ldr	r0, [r7, #0]
 8002a1e:	f7fe fd9b 	bl	8001558 <update>
 8002a22:	4602      	mov	r2, r0
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	609a      	str	r2, [r3, #8]
			
			len=fmt?2:1;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <print_object+0x1ba>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e000      	b.n	8002a34 <print_object+0x1bc>
 8002a32:	2301      	movs	r3, #1
 8002a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
			ptr=ensure(p,len);	if (!ptr) return 0;
 8002a36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002a38:	6838      	ldr	r0, [r7, #0]
 8002a3a:	f7fe fd2f 	bl	800149c <ensure>
 8002a3e:	6438      	str	r0, [r7, #64]	@ 0x40
 8002a40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <print_object+0x1d2>
 8002a46:	2300      	movs	r3, #0
 8002a48:	e203      	b.n	8002e52 <print_object+0x5da>
			*ptr++=':';if (fmt) *ptr++='\t';
 8002a4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002a50:	223a      	movs	r2, #58	@ 0x3a
 8002a52:	701a      	strb	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d004      	beq.n	8002a64 <print_object+0x1ec>
 8002a5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002a60:	2209      	movs	r2, #9
 8002a62:	701a      	strb	r2, [r3, #0]
			p->offset+=len;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a6a:	441a      	add	r2, r3
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	609a      	str	r2, [r3, #8]
			
			print_value(child,depth,fmt,p);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a78:	f7ff fb78 	bl	800216c <print_value>
			p->offset=update(p);
 8002a7c:	6838      	ldr	r0, [r7, #0]
 8002a7e:	f7fe fd6b 	bl	8001558 <update>
 8002a82:	4602      	mov	r2, r0
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	609a      	str	r2, [r3, #8]

			len=(fmt?1:0)+(child->next?1:0);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	bf14      	ite	ne
 8002a8e:	2301      	movne	r3, #1
 8002a90:	2300      	moveq	r3, #0
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	461a      	mov	r2, r3
 8002a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	bf14      	ite	ne
 8002a9e:	2301      	movne	r3, #1
 8002aa0:	2300      	moveq	r3, #0
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			ptr=ensure(p,len+1); if (!ptr) return 0;
 8002aa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002aaa:	3301      	adds	r3, #1
 8002aac:	4619      	mov	r1, r3
 8002aae:	6838      	ldr	r0, [r7, #0]
 8002ab0:	f7fe fcf4 	bl	800149c <ensure>
 8002ab4:	6438      	str	r0, [r7, #64]	@ 0x40
 8002ab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <print_object+0x248>
 8002abc:	2300      	movs	r3, #0
 8002abe:	e1c8      	b.n	8002e52 <print_object+0x5da>
			if (child->next) *ptr++=',';
 8002ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d004      	beq.n	8002ad2 <print_object+0x25a>
 8002ac8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	643a      	str	r2, [r7, #64]	@ 0x40
 8002ace:	222c      	movs	r2, #44	@ 0x2c
 8002ad0:	701a      	strb	r2, [r3, #0]
			if (fmt) *ptr++='\n';
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d004      	beq.n	8002ae2 <print_object+0x26a>
 8002ad8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	643a      	str	r2, [r7, #64]	@ 0x40
 8002ade:	220a      	movs	r2, #10
 8002ae0:	701a      	strb	r2, [r3, #0]
			*ptr=0;
 8002ae2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	701a      	strb	r2, [r3, #0]
			p->offset+=len;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002aee:	441a      	add	r2, r3
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	609a      	str	r2, [r3, #8]
			child=child->next;
 8002af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	633b      	str	r3, [r7, #48]	@ 0x30
		while (child)
 8002afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f47f af65 	bne.w	80029cc <print_object+0x154>
		}
		ptr=ensure(p,fmt?(depth+1):2);	 if (!ptr) return 0;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d002      	beq.n	8002b0e <print_object+0x296>
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	e000      	b.n	8002b10 <print_object+0x298>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	4619      	mov	r1, r3
 8002b12:	6838      	ldr	r0, [r7, #0]
 8002b14:	f7fe fcc2 	bl	800149c <ensure>
 8002b18:	6438      	str	r0, [r7, #64]	@ 0x40
 8002b1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <print_object+0x2ac>
 8002b20:	2300      	movs	r3, #0
 8002b22:	e196      	b.n	8002e52 <print_object+0x5da>
		if (fmt)	for (i=0;i<depth-1;i++) *ptr++='\t';
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d011      	beq.n	8002b4e <print_object+0x2d6>
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b2e:	e009      	b.n	8002b44 <print_object+0x2cc>
 8002b30:	20000000 	.word	0x20000000
 8002b34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b36:	1c5a      	adds	r2, r3, #1
 8002b38:	643a      	str	r2, [r7, #64]	@ 0x40
 8002b3a:	2209      	movs	r2, #9
 8002b3c:	701a      	strb	r2, [r3, #0]
 8002b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b40:	3301      	adds	r3, #1
 8002b42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	dbf2      	blt.n	8002b34 <print_object+0x2bc>
		*ptr++='}';*ptr=0;
 8002b4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	643a      	str	r2, [r7, #64]	@ 0x40
 8002b54:	227d      	movs	r2, #125	@ 0x7d
 8002b56:	701a      	strb	r2, [r3, #0]
 8002b58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	701a      	strb	r2, [r3, #0]
		out=(p->buffer)+i;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b64:	4413      	add	r3, r2
 8002b66:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b68:	e172      	b.n	8002e50 <print_object+0x5d8>
	}
	else
	{
		/* Allocate space for the names and the objects */
		entries=(char**)cJSON_malloc(numentries*sizeof(char*));
 8002b6a:	4b6b      	ldr	r3, [pc, #428]	@ (8002d18 <print_object+0x4a0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b70:	0092      	lsls	r2, r2, #2
 8002b72:	4610      	mov	r0, r2
 8002b74:	4798      	blx	r3
 8002b76:	6278      	str	r0, [r7, #36]	@ 0x24
		if (!entries) return 0;
 8002b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <print_object+0x30a>
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e167      	b.n	8002e52 <print_object+0x5da>
		names=(char**)cJSON_malloc(numentries*sizeof(char*));
 8002b82:	4b65      	ldr	r3, [pc, #404]	@ (8002d18 <print_object+0x4a0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b88:	0092      	lsls	r2, r2, #2
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	4798      	blx	r3
 8002b8e:	6238      	str	r0, [r7, #32]
		if (!names) {cJSON_free(entries);return 0;}
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d105      	bne.n	8002ba2 <print_object+0x32a>
 8002b96:	4b61      	ldr	r3, [pc, #388]	@ (8002d1c <print_object+0x4a4>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002b9c:	4798      	blx	r3
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	e157      	b.n	8002e52 <print_object+0x5da>
		memset(entries,0,sizeof(char*)*numentries);
 8002ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	2100      	movs	r1, #0
 8002baa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002bac:	f00a fc25 	bl	800d3fa <memset>
		memset(names,0,sizeof(char*)*numentries);
 8002bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	6a38      	ldr	r0, [r7, #32]
 8002bba:	f00a fc1e 	bl	800d3fa <memset>

		/* Collect all the results into our arrays: */
		child=item->child;depth++;if (fmt) len+=depth;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d041      	beq.n	8002c54 <print_object+0x3dc>
 8002bd0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		while (child)
 8002bd8:	e03c      	b.n	8002c54 <print_object+0x3dc>
		{
			names[i]=str=print_string_ptr(child->string,0);
 8002bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	2100      	movs	r1, #0
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff f84b 	bl	8001c7c <print_string_ptr>
 8002be6:	61b8      	str	r0, [r7, #24]
 8002be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	6a3a      	ldr	r2, [r7, #32]
 8002bee:	4413      	add	r3, r2
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	601a      	str	r2, [r3, #0]
			entries[i++]=ret=print_value(child,depth,fmt,0);
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	68b9      	ldr	r1, [r7, #8]
 8002bfa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002bfc:	f7ff fab6 	bl	800216c <print_value>
 8002c00:	6178      	str	r0, [r7, #20]
 8002c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c0c:	4413      	add	r3, r2
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	601a      	str	r2, [r3, #0]
			if (str && ret) len+=strlen(ret)+strlen(str)+2+(fmt?2+depth:0); else fail=1;
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d018      	beq.n	8002c4a <print_object+0x3d2>
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d015      	beq.n	8002c4a <print_object+0x3d2>
 8002c1e:	6978      	ldr	r0, [r7, #20]
 8002c20:	f7fd fad6 	bl	80001d0 <strlen>
 8002c24:	4604      	mov	r4, r0
 8002c26:	69b8      	ldr	r0, [r7, #24]
 8002c28:	f7fd fad2 	bl	80001d0 <strlen>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	4423      	add	r3, r4
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	2a00      	cmp	r2, #0
 8002c34:	d002      	beq.n	8002c3c <print_object+0x3c4>
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	3202      	adds	r2, #2
 8002c3a:	e000      	b.n	8002c3e <print_object+0x3c6>
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	441a      	add	r2, r3
 8002c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c42:	4413      	add	r3, r2
 8002c44:	3302      	adds	r3, #2
 8002c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c48:	e001      	b.n	8002c4e <print_object+0x3d6>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
			child=child->next;
 8002c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	633b      	str	r3, [r7, #48]	@ 0x30
		while (child)
 8002c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1bf      	bne.n	8002bda <print_object+0x362>
		}
		
		/* Try to allocate the output string */
		if (!fail)	out=(char*)cJSON_malloc(len);
 8002c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d105      	bne.n	8002c6c <print_object+0x3f4>
 8002c60:	4b2d      	ldr	r3, [pc, #180]	@ (8002d18 <print_object+0x4a0>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c66:	4610      	mov	r0, r2
 8002c68:	4798      	blx	r3
 8002c6a:	6478      	str	r0, [r7, #68]	@ 0x44
		if (!out) fail=1;
 8002c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <print_object+0x3fe>
 8002c72:	2301      	movs	r3, #1
 8002c74:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Handle failure */
		if (fail)
 8002c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d033      	beq.n	8002ce4 <print_object+0x46c>
		{
			for (i=0;i<numentries;i++) {if (names[i]) cJSON_free(names[i]);if (entries[i]) cJSON_free(entries[i]);}
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c80:	e022      	b.n	8002cc8 <print_object+0x450>
 8002c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	6a3a      	ldr	r2, [r7, #32]
 8002c88:	4413      	add	r3, r2
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d008      	beq.n	8002ca2 <print_object+0x42a>
 8002c90:	4b22      	ldr	r3, [pc, #136]	@ (8002d1c <print_object+0x4a4>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c96:	0092      	lsls	r2, r2, #2
 8002c98:	6a39      	ldr	r1, [r7, #32]
 8002c9a:	440a      	add	r2, r1
 8002c9c:	6812      	ldr	r2, [r2, #0]
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	4798      	blx	r3
 8002ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ca8:	4413      	add	r3, r2
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d008      	beq.n	8002cc2 <print_object+0x44a>
 8002cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8002d1c <print_object+0x4a4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002cb6:	0092      	lsls	r2, r2, #2
 8002cb8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cba:	440a      	add	r2, r1
 8002cbc:	6812      	ldr	r2, [r2, #0]
 8002cbe:	4610      	mov	r0, r2
 8002cc0:	4798      	blx	r3
 8002cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002cc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	dbd8      	blt.n	8002c82 <print_object+0x40a>
			cJSON_free(names);cJSON_free(entries);
 8002cd0:	4b12      	ldr	r3, [pc, #72]	@ (8002d1c <print_object+0x4a4>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6a38      	ldr	r0, [r7, #32]
 8002cd6:	4798      	blx	r3
 8002cd8:	4b10      	ldr	r3, [pc, #64]	@ (8002d1c <print_object+0x4a4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002cde:	4798      	blx	r3
			return 0;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	e0b6      	b.n	8002e52 <print_object+0x5da>
		}
		
		/* Compose the output: */
		*out='{';ptr=out+1;if (fmt)*ptr++='\n';*ptr=0;
 8002ce4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ce6:	227b      	movs	r2, #123	@ 0x7b
 8002ce8:	701a      	strb	r2, [r3, #0]
 8002cea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cec:	3301      	adds	r3, #1
 8002cee:	643b      	str	r3, [r7, #64]	@ 0x40
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d004      	beq.n	8002d00 <print_object+0x488>
 8002cf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	643a      	str	r2, [r7, #64]	@ 0x40
 8002cfc:	220a      	movs	r2, #10
 8002cfe:	701a      	strb	r2, [r3, #0]
 8002d00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d02:	2200      	movs	r2, #0
 8002d04:	701a      	strb	r2, [r3, #0]
		for (i=0;i<numentries;i++)
 8002d06:	2300      	movs	r3, #0
 8002d08:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d0a:	e078      	b.n	8002dfe <print_object+0x586>
		{
			if (fmt) for (j=0;j<depth;j++) *ptr++='\t';
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d012      	beq.n	8002d38 <print_object+0x4c0>
 8002d12:	2300      	movs	r3, #0
 8002d14:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d16:	e00b      	b.n	8002d30 <print_object+0x4b8>
 8002d18:	20000000 	.word	0x20000000
 8002d1c:	20000004 	.word	0x20000004
 8002d20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	643a      	str	r2, [r7, #64]	@ 0x40
 8002d26:	2209      	movs	r2, #9
 8002d28:	701a      	strb	r2, [r3, #0]
 8002d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	dbf3      	blt.n	8002d20 <print_object+0x4a8>
			tmplen=strlen(names[i]);memcpy(ptr,names[i],tmplen);ptr+=tmplen;
 8002d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	6a3a      	ldr	r2, [r7, #32]
 8002d3e:	4413      	add	r3, r2
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fd fa44 	bl	80001d0 <strlen>
 8002d48:	61f8      	str	r0, [r7, #28]
 8002d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	6a3a      	ldr	r2, [r7, #32]
 8002d50:	4413      	add	r3, r2
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	69fa      	ldr	r2, [r7, #28]
 8002d56:	4619      	mov	r1, r3
 8002d58:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002d5a:	f00a ffda 	bl	800dd12 <memcpy>
 8002d5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	4413      	add	r3, r2
 8002d64:	643b      	str	r3, [r7, #64]	@ 0x40
			*ptr++=':';if (fmt) *ptr++='\t';
 8002d66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	643a      	str	r2, [r7, #64]	@ 0x40
 8002d6c:	223a      	movs	r2, #58	@ 0x3a
 8002d6e:	701a      	strb	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d004      	beq.n	8002d80 <print_object+0x508>
 8002d76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	643a      	str	r2, [r7, #64]	@ 0x40
 8002d7c:	2209      	movs	r2, #9
 8002d7e:	701a      	strb	r2, [r3, #0]
			strcpy(ptr,entries[i]);ptr+=strlen(entries[i]);
 8002d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d86:	4413      	add	r3, r2
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002d8e:	f00a ffce 	bl	800dd2e <strcpy>
 8002d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d98:	4413      	add	r3, r2
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fd fa17 	bl	80001d0 <strlen>
 8002da2:	4602      	mov	r2, r0
 8002da4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002da6:	4413      	add	r3, r2
 8002da8:	643b      	str	r3, [r7, #64]	@ 0x40
			if (i!=numentries-1) *ptr++=',';
 8002daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dac:	3b01      	subs	r3, #1
 8002dae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d004      	beq.n	8002dbe <print_object+0x546>
 8002db4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	643a      	str	r2, [r7, #64]	@ 0x40
 8002dba:	222c      	movs	r2, #44	@ 0x2c
 8002dbc:	701a      	strb	r2, [r3, #0]
			if (fmt) *ptr++='\n';
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d004      	beq.n	8002dce <print_object+0x556>
 8002dc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dc6:	1c5a      	adds	r2, r3, #1
 8002dc8:	643a      	str	r2, [r7, #64]	@ 0x40
 8002dca:	220a      	movs	r2, #10
 8002dcc:	701a      	strb	r2, [r3, #0]
			*ptr=0;
 8002dce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]
			cJSON_free(names[i]);cJSON_free(entries[i]);
 8002dd4:	4b21      	ldr	r3, [pc, #132]	@ (8002e5c <print_object+0x5e4>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002dda:	0092      	lsls	r2, r2, #2
 8002ddc:	6a39      	ldr	r1, [r7, #32]
 8002dde:	440a      	add	r2, r1
 8002de0:	6812      	ldr	r2, [r2, #0]
 8002de2:	4610      	mov	r0, r2
 8002de4:	4798      	blx	r3
 8002de6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e5c <print_object+0x5e4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002dec:	0092      	lsls	r2, r2, #2
 8002dee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002df0:	440a      	add	r2, r1
 8002df2:	6812      	ldr	r2, [r2, #0]
 8002df4:	4610      	mov	r0, r2
 8002df6:	4798      	blx	r3
		for (i=0;i<numentries;i++)
 8002df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002dfe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e02:	429a      	cmp	r2, r3
 8002e04:	db82      	blt.n	8002d0c <print_object+0x494>
		}
		
		cJSON_free(names);cJSON_free(entries);
 8002e06:	4b15      	ldr	r3, [pc, #84]	@ (8002e5c <print_object+0x5e4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6a38      	ldr	r0, [r7, #32]
 8002e0c:	4798      	blx	r3
 8002e0e:	4b13      	ldr	r3, [pc, #76]	@ (8002e5c <print_object+0x5e4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002e14:	4798      	blx	r3
		if (fmt) for (i=0;i<depth-1;i++) *ptr++='\t';
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00f      	beq.n	8002e3c <print_object+0x5c4>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e20:	e007      	b.n	8002e32 <print_object+0x5ba>
 8002e22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e28:	2209      	movs	r2, #9
 8002e2a:	701a      	strb	r2, [r3, #0]
 8002e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e2e:	3301      	adds	r3, #1
 8002e30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	3b01      	subs	r3, #1
 8002e36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	dbf2      	blt.n	8002e22 <print_object+0x5aa>
		*ptr++='}';*ptr++=0;
 8002e3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e42:	227d      	movs	r2, #125	@ 0x7d
 8002e44:	701a      	strb	r2, [r3, #0]
 8002e46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	701a      	strb	r2, [r3, #0]
	}
	return out;	
 8002e50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	374c      	adds	r7, #76	@ 0x4c
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd90      	pop	{r4, r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000004 	.word	0x20000004

08002e60 <cJSON_GetObjectItem>:

/* Get Array size/item / object item. */
int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}
cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}
cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	e002      	b.n	8002e78 <cJSON_GetObjectItem+0x18>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d008      	beq.n	8002e90 <cJSON_GetObjectItem+0x30>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	6839      	ldr	r1, [r7, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fe f8d9 	bl	800103c <cJSON_strcasecmp>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1f0      	bne.n	8002e72 <cJSON_GetObjectItem+0x12>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <suffix_object>:

/* Utility for array list handling. */
static void suffix_object(cJSON *prev,cJSON *item) {prev->next=item;item->prev=prev;}
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
 8002ea2:	6039      	str	r1, [r7, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	605a      	str	r2, [r3, #4]
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <cJSON_AddItemToArray>:
/* Utility for handling references. */
static cJSON *create_reference(cJSON *item) {cJSON *ref=cJSON_New_Item();if (!ref) return 0;memcpy(ref,item,sizeof(cJSON));ref->string=0;ref->type|=cJSON_IsReference;ref->next=ref->prev=0;return ref;}

/* Add item to array/object. */
void   cJSON_AddItemToArray(cJSON *array, cJSON *item)						{cJSON *c=array->child;if (!item) return; if (!c) {array->child=item;} else {while (c && c->next) c=c->next; suffix_object(c,item);}}
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d015      	beq.n	8002efe <cJSON_AddItemToArray+0x42>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d106      	bne.n	8002ee6 <cJSON_AddItemToArray+0x2a>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	609a      	str	r2, [r3, #8]
 8002ede:	e00f      	b.n	8002f00 <cJSON_AddItemToArray+0x44>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <cJSON_AddItemToArray+0x38>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1f5      	bne.n	8002ee0 <cJSON_AddItemToArray+0x24>
 8002ef4:	6839      	ldr	r1, [r7, #0]
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f7ff ffcf 	bl	8002e9a <suffix_object>
 8002efc:	e000      	b.n	8002f00 <cJSON_AddItemToArray+0x44>
 8002efe:	bf00      	nop
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <cJSON_AddItemToObject>:
void   cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (item->string) cJSON_free(item->string);item->string=cJSON_strdup(string);cJSON_AddItemToArray(object,item);}
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d014      	beq.n	8002f44 <cJSON_AddItemToObject+0x3c>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d005      	beq.n	8002f2e <cJSON_AddItemToObject+0x26>
 8002f22:	4b0a      	ldr	r3, [pc, #40]	@ (8002f4c <cJSON_AddItemToObject+0x44>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6a12      	ldr	r2, [r2, #32]
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	4798      	blx	r3
 8002f2e:	68b8      	ldr	r0, [r7, #8]
 8002f30:	f7fe f8f2 	bl	8001118 <cJSON_strdup>
 8002f34:	4602      	mov	r2, r0
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	621a      	str	r2, [r3, #32]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f7ff ffbd 	bl	8002ebc <cJSON_AddItemToArray>
 8002f42:	e000      	b.n	8002f46 <cJSON_AddItemToObject+0x3e>
 8002f44:	bf00      	nop
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20000004 	.word	0x20000004

08002f50 <cJSON_CreateNumber>:
/* Create basic types: */
cJSON *cJSON_CreateNull(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_NULL;return item;}
cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}
cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}
cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}
cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuedouble=num;item->valueint=(int)num;}return item;}
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	ed87 0b00 	vstr	d0, [r7]
 8002f5a:	f7fe f8fd 	bl	8001158 <cJSON_New_Item>
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00e      	beq.n	8002f84 <cJSON_CreateNumber+0x34>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2203      	movs	r2, #3
 8002f6a:	60da      	str	r2, [r3, #12]
 8002f6c:	68f9      	ldr	r1, [r7, #12]
 8002f6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f72:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8002f76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f7a:	f7fd fdfd 	bl	8000b78 <__aeabi_d2iz>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	615a      	str	r2, [r3, #20]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <cJSON_CreateObject>:
cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);}return item;}
cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}
cJSON *cJSON_CreateObject(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Object;return item;}
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	f7fe f8e0 	bl	8001158 <cJSON_New_Item>
 8002f98:	6078      	str	r0, [r7, #4]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <cJSON_CreateObject+0x18>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2206      	movs	r2, #6
 8002fa4:	60da      	str	r2, [r3, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <Delay_US>:
#include "FreeRtos.h"
#include "task.h"
#include <stdio.h>

void Delay_US(uint32_t us)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b089      	sub	sp, #36	@ 0x24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
	uint32_t old_time = SysTick->VAL;
 8002fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8003028 <Delay_US+0x78>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	61fb      	str	r3, [r7, #28]
	uint32_t new_time;
	uint32_t ticks = us * 99;
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	4413      	add	r3, r2
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	4413      	add	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]
	uint32_t cnt = 0;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	61bb      	str	r3, [r7, #24]
	uint32_t load = SysTick->LOAD;
 8002fd0:	4b15      	ldr	r3, [pc, #84]	@ (8003028 <Delay_US+0x78>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	613b      	str	r3, [r7, #16]

	while (1)
	{
		new_time = SysTick->VAL;
 8002fd6:	4b14      	ldr	r3, [pc, #80]	@ (8003028 <Delay_US+0x78>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	60fb      	str	r3, [r7, #12]

		if (new_time != old_time)
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d0f8      	beq.n	8002fd6 <Delay_US+0x26>
		{
			if (new_time < old_time)
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d206      	bcs.n	8002ffa <Delay_US+0x4a>
				cnt += (old_time - new_time);
 8002fec:	69fa      	ldr	r2, [r7, #28]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
 8002ff8:	e007      	b.n	800300a <Delay_US+0x5a>
			else
				cnt += (load - new_time + old_time);
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	1ad2      	subs	r2, r2, r3
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	4413      	add	r3, r2
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4413      	add	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]

			if (cnt >= ticks)
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	429a      	cmp	r2, r3
 8003010:	d202      	bcs.n	8003018 <Delay_US+0x68>
				break;

			old_time = new_time;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	61fb      	str	r3, [r7, #28]
		new_time = SysTick->VAL;
 8003016:	e7de      	b.n	8002fd6 <Delay_US+0x26>
				break;
 8003018:	bf00      	nop
		}
	}
}
 800301a:	bf00      	nop
 800301c:	3724      	adds	r7, #36	@ 0x24
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	e000e010 	.word	0xe000e010

0800302c <DHT11_Init>:


void DHT11_Init(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	603b      	str	r3, [r7, #0]
 8003036:	4b0e      	ldr	r3, [pc, #56]	@ (8003070 <DHT11_Init+0x44>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303a:	4a0d      	ldr	r2, [pc, #52]	@ (8003070 <DHT11_Init+0x44>)
 800303c:	f043 0304 	orr.w	r3, r3, #4
 8003040:	6313      	str	r3, [r2, #48]	@ 0x30
 8003042:	4b0b      	ldr	r3, [pc, #44]	@ (8003070 <DHT11_Init+0x44>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	603b      	str	r3, [r7, #0]
 800304c:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef GPIO_Init_Struct;

	GPIO_Init_Struct.Mode = GPIO_MODE_OUTPUT_OD;
 800304e:	2311      	movs	r3, #17
 8003050:	60bb      	str	r3, [r7, #8]
	GPIO_Init_Struct.Pin = GPIO_PIN_6;
 8003052:	2340      	movs	r3, #64	@ 0x40
 8003054:	607b      	str	r3, [r7, #4]
	GPIO_Init_Struct.Pull = GPIO_PULLUP;
 8003056:	2301      	movs	r3, #1
 8003058:	60fb      	str	r3, [r7, #12]
	GPIO_Init_Struct.Speed = GPIO_SPEED_FREQ_HIGH;
 800305a:	2302      	movs	r3, #2
 800305c:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(GPIOC, &GPIO_Init_Struct);
 800305e:	1d3b      	adds	r3, r7, #4
 8003060:	4619      	mov	r1, r3
 8003062:	4804      	ldr	r0, [pc, #16]	@ (8003074 <DHT11_Init+0x48>)
 8003064:	f003 fa5c 	bl	8006520 <HAL_GPIO_Init>
}
 8003068:	bf00      	nop
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40023800 	.word	0x40023800
 8003074:	40020800 	.word	0x40020800

08003078 <DHT11_Start>:

void DHT11_Start(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
	//printf("start\r\n");
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800307c:	2200      	movs	r2, #0
 800307e:	2140      	movs	r1, #64	@ 0x40
 8003080:	4807      	ldr	r0, [pc, #28]	@ (80030a0 <DHT11_Start+0x28>)
 8003082:	f003 fc01 	bl	8006888 <HAL_GPIO_WritePin>

	HAL_Delay(20);
 8003086:	2014      	movs	r0, #20
 8003088:	f003 f8b2 	bl	80061f0 <HAL_Delay>
	//printf("start2\r\n");
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800308c:	2201      	movs	r2, #1
 800308e:	2140      	movs	r1, #64	@ 0x40
 8003090:	4803      	ldr	r0, [pc, #12]	@ (80030a0 <DHT11_Start+0x28>)
 8003092:	f003 fbf9 	bl	8006888 <HAL_GPIO_WritePin>

	Delay_US(30);
 8003096:	201e      	movs	r0, #30
 8003098:	f7ff ff8a 	bl	8002fb0 <Delay_US>
	//printf("start3\r\n");
}
 800309c:	bf00      	nop
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40020800 	.word	0x40020800

080030a4 <DHT11_Response>:

uint8_t DHT11_Response(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
	uint16_t time = 0;
 80030aa:	2300      	movs	r3, #0
 80030ac:	80fb      	strh	r3, [r7, #6]

	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) && time < 100)
 80030ae:	e005      	b.n	80030bc <DHT11_Response+0x18>
	{
		Delay_US(1);
 80030b0:	2001      	movs	r0, #1
 80030b2:	f7ff ff7d 	bl	8002fb0 <Delay_US>
		time++;
 80030b6:	88fb      	ldrh	r3, [r7, #6]
 80030b8:	3301      	adds	r3, #1
 80030ba:	80fb      	strh	r3, [r7, #6]
	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) && time < 100)
 80030bc:	2140      	movs	r1, #64	@ 0x40
 80030be:	4815      	ldr	r0, [pc, #84]	@ (8003114 <DHT11_Response+0x70>)
 80030c0:	f003 fbca 	bl	8006858 <HAL_GPIO_ReadPin>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <DHT11_Response+0x2c>
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	2b63      	cmp	r3, #99	@ 0x63
 80030ce:	d9ef      	bls.n	80030b0 <DHT11_Response+0xc>
	}

	if (time >= 100)
 80030d0:	88fb      	ldrh	r3, [r7, #6]
 80030d2:	2b63      	cmp	r3, #99	@ 0x63
 80030d4:	d901      	bls.n	80030da <DHT11_Response+0x36>
		return 1;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e018      	b.n	800310c <DHT11_Response+0x68>

	time = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	80fb      	strh	r3, [r7, #6]

	while (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) && time < 100)
 80030de:	e005      	b.n	80030ec <DHT11_Response+0x48>
	{
		Delay_US(1);
 80030e0:	2001      	movs	r0, #1
 80030e2:	f7ff ff65 	bl	8002fb0 <Delay_US>
		time++;
 80030e6:	88fb      	ldrh	r3, [r7, #6]
 80030e8:	3301      	adds	r3, #1
 80030ea:	80fb      	strh	r3, [r7, #6]
	while (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) && time < 100)
 80030ec:	2140      	movs	r1, #64	@ 0x40
 80030ee:	4809      	ldr	r0, [pc, #36]	@ (8003114 <DHT11_Response+0x70>)
 80030f0:	f003 fbb2 	bl	8006858 <HAL_GPIO_ReadPin>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d102      	bne.n	8003100 <DHT11_Response+0x5c>
 80030fa:	88fb      	ldrh	r3, [r7, #6]
 80030fc:	2b63      	cmp	r3, #99	@ 0x63
 80030fe:	d9ef      	bls.n	80030e0 <DHT11_Response+0x3c>
	}

	if (time >= 100)
 8003100:	88fb      	ldrh	r3, [r7, #6]
 8003102:	2b63      	cmp	r3, #99	@ 0x63
 8003104:	d901      	bls.n	800310a <DHT11_Response+0x66>
		return 1;
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <DHT11_Response+0x68>

	return 0;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40020800 	.word	0x40020800

08003118 <DHT11_Read_Bit>:

uint8_t DHT11_Read_Bit(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
	uint16_t time = 0;
 800311e:	2300      	movs	r3, #0
 8003120:	80fb      	strh	r3, [r7, #6]

	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) && time < 100)
 8003122:	e005      	b.n	8003130 <DHT11_Read_Bit+0x18>
	{
		Delay_US(1);
 8003124:	2001      	movs	r0, #1
 8003126:	f7ff ff43 	bl	8002fb0 <Delay_US>
		time++;
 800312a:	88fb      	ldrh	r3, [r7, #6]
 800312c:	3301      	adds	r3, #1
 800312e:	80fb      	strh	r3, [r7, #6]
	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) && time < 100)
 8003130:	2140      	movs	r1, #64	@ 0x40
 8003132:	481a      	ldr	r0, [pc, #104]	@ (800319c <DHT11_Read_Bit+0x84>)
 8003134:	f003 fb90 	bl	8006858 <HAL_GPIO_ReadPin>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d002      	beq.n	8003144 <DHT11_Read_Bit+0x2c>
 800313e:	88fb      	ldrh	r3, [r7, #6]
 8003140:	2b63      	cmp	r3, #99	@ 0x63
 8003142:	d9ef      	bls.n	8003124 <DHT11_Read_Bit+0xc>
	}

	if (time >= 100)
 8003144:	88fb      	ldrh	r3, [r7, #6]
 8003146:	2b63      	cmp	r3, #99	@ 0x63
 8003148:	d907      	bls.n	800315a <DHT11_Read_Bit+0x42>
		return 2;
 800314a:	2302      	movs	r3, #2
 800314c:	e021      	b.n	8003192 <DHT11_Read_Bit+0x7a>

	while (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) && time < 100)
	{
		Delay_US(1);
 800314e:	2001      	movs	r0, #1
 8003150:	f7ff ff2e 	bl	8002fb0 <Delay_US>
		time++;
 8003154:	88fb      	ldrh	r3, [r7, #6]
 8003156:	3301      	adds	r3, #1
 8003158:	80fb      	strh	r3, [r7, #6]
	while (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) && time < 100)
 800315a:	2140      	movs	r1, #64	@ 0x40
 800315c:	480f      	ldr	r0, [pc, #60]	@ (800319c <DHT11_Read_Bit+0x84>)
 800315e:	f003 fb7b 	bl	8006858 <HAL_GPIO_ReadPin>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d102      	bne.n	800316e <DHT11_Read_Bit+0x56>
 8003168:	88fb      	ldrh	r3, [r7, #6]
 800316a:	2b63      	cmp	r3, #99	@ 0x63
 800316c:	d9ef      	bls.n	800314e <DHT11_Read_Bit+0x36>
	}

	if (time >= 100)
 800316e:	88fb      	ldrh	r3, [r7, #6]
 8003170:	2b63      	cmp	r3, #99	@ 0x63
 8003172:	d901      	bls.n	8003178 <DHT11_Read_Bit+0x60>
		return 2;
 8003174:	2302      	movs	r3, #2
 8003176:	e00c      	b.n	8003192 <DHT11_Read_Bit+0x7a>

	Delay_US(30);
 8003178:	201e      	movs	r0, #30
 800317a:	f7ff ff19 	bl	8002fb0 <Delay_US>

	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == 0)
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	4806      	ldr	r0, [pc, #24]	@ (800319c <DHT11_Read_Bit+0x84>)
 8003182:	f003 fb69 	bl	8006858 <HAL_GPIO_ReadPin>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <DHT11_Read_Bit+0x78>
		return 0;
 800318c:	2300      	movs	r3, #0
 800318e:	e000      	b.n	8003192 <DHT11_Read_Bit+0x7a>
	else
		return 1;
 8003190:	2301      	movs	r3, #1
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40020800 	.word	0x40020800

080031a0 <DHT11_Read_Byte>:

uint8_t DHT11_Read_Byte(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80031a6:	2300      	movs	r3, #0
 80031a8:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 80031aa:	2300      	movs	r3, #0
 80031ac:	71bb      	strb	r3, [r7, #6]

	for (i = 0; i < 8; i++)
 80031ae:	2300      	movs	r3, #0
 80031b0:	71bb      	strb	r3, [r7, #6]
 80031b2:	e00c      	b.n	80031ce <DHT11_Read_Byte+0x2e>
	{
		data <<= 1;
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	71fb      	strb	r3, [r7, #7]
		data = data | DHT11_Read_Bit();
 80031ba:	f7ff ffad 	bl	8003118 <DHT11_Read_Bit>
 80031be:	4603      	mov	r3, r0
 80031c0:	461a      	mov	r2, r3
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i++)
 80031c8:	79bb      	ldrb	r3, [r7, #6]
 80031ca:	3301      	adds	r3, #1
 80031cc:	71bb      	strb	r3, [r7, #6]
 80031ce:	79bb      	ldrb	r3, [r7, #6]
 80031d0:	2b07      	cmp	r3, #7
 80031d2:	d9ef      	bls.n	80031b4 <DHT11_Read_Byte+0x14>
	}

	return data;
 80031d4:	79fb      	ldrb	r3, [r7, #7]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <DHT11_Read_Data>:

void DHT11_Read_Data(uint8_t *pData)
{
 80031de:	b590      	push	{r4, r7, lr}
 80031e0:	b085      	sub	sp, #20
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
	DHT11_Start();
 80031e6:	f7ff ff47 	bl	8003078 <DHT11_Start>
	//printf("read data\r\n");

	if (DHT11_Response()){
 80031ea:	f7ff ff5b 	bl	80030a4 <DHT11_Response>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d133      	bne.n	800325c <DHT11_Read_Data+0x7e>

	//printf("no response\r\n");


	uint8_t i;
	for (i = 0; i < 5; i++)
 80031f4:	2300      	movs	r3, #0
 80031f6:	73fb      	strb	r3, [r7, #15]
 80031f8:	e009      	b.n	800320e <DHT11_Read_Data+0x30>
	{
		pData[i] = DHT11_Read_Byte();
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	18d4      	adds	r4, r2, r3
 8003200:	f7ff ffce 	bl	80031a0 <DHT11_Read_Byte>
 8003204:	4603      	mov	r3, r0
 8003206:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < 5; i++)
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	3301      	adds	r3, #1
 800320c:	73fb      	strb	r3, [r7, #15]
 800320e:	7bfb      	ldrb	r3, [r7, #15]
 8003210:	2b04      	cmp	r3, #4
 8003212:	d9f2      	bls.n	80031fa <DHT11_Read_Data+0x1c>
	}

	if (pData[4] != pData[0] + pData[1] + pData[2] + pData[3])
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3304      	adds	r3, #4
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	4619      	mov	r1, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	461a      	mov	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3301      	adds	r3, #1
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	4413      	add	r3, r2
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	3202      	adds	r2, #2
 800322e:	7812      	ldrb	r2, [r2, #0]
 8003230:	4413      	add	r3, r2
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	3203      	adds	r2, #3
 8003236:	7812      	ldrb	r2, [r2, #0]
 8003238:	4413      	add	r3, r2
 800323a:	4299      	cmp	r1, r3
 800323c:	d00f      	beq.n	800325e <DHT11_Read_Data+0x80>
	{
		for (i = 0; i < 5; i++)
 800323e:	2300      	movs	r3, #0
 8003240:	73fb      	strb	r3, [r7, #15]
 8003242:	e007      	b.n	8003254 <DHT11_Read_Data+0x76>
		{
			pData[i] = 0;
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	4413      	add	r3, r2
 800324a:	2200      	movs	r2, #0
 800324c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 5; i++)
 800324e:	7bfb      	ldrb	r3, [r7, #15]
 8003250:	3301      	adds	r3, #1
 8003252:	73fb      	strb	r3, [r7, #15]
 8003254:	7bfb      	ldrb	r3, [r7, #15]
 8003256:	2b04      	cmp	r3, #4
 8003258:	d9f4      	bls.n	8003244 <DHT11_Read_Data+0x66>
 800325a:	e000      	b.n	800325e <DHT11_Read_Data+0x80>
		return;
 800325c:	bf00      	nop
		}
	}
}
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	bd90      	pop	{r4, r7, pc}

08003264 <WriteCmd>:
0xC8, 0xD3, 0x00, 0xD5, 0x80, 0xD8, 0x05, 0xD9, 0xF1, 0xDA, 0x12,

0xD8, 0x30, 0x8D, 0x14, 0xAF};

void WriteCmd()
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af04      	add	r7, sp, #16
	uint8_t i = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	71fb      	strb	r3, [r7, #7]
	for(i = 0; i < 27; i++){
 800326e:	2300      	movs	r3, #0
 8003270:	71fb      	strb	r3, [r7, #7]
 8003272:	e011      	b.n	8003298 <WriteCmd+0x34>
		HAL_I2C_Mem_Write(&hi2c1, 0x78, 0x00, I2C_MEMADD_SIZE_8BIT, CMD_Data+i, 1, 0x100);
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	4a0c      	ldr	r2, [pc, #48]	@ (80032a8 <WriteCmd+0x44>)
 8003278:	4413      	add	r3, r2
 800327a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800327e:	9202      	str	r2, [sp, #8]
 8003280:	2201      	movs	r2, #1
 8003282:	9201      	str	r2, [sp, #4]
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	2301      	movs	r3, #1
 8003288:	2200      	movs	r2, #0
 800328a:	2178      	movs	r1, #120	@ 0x78
 800328c:	4807      	ldr	r0, [pc, #28]	@ (80032ac <WriteCmd+0x48>)
 800328e:	f003 ffa3 	bl	80071d8 <HAL_I2C_Mem_Write>
	for(i = 0; i < 27; i++){
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	3301      	adds	r3, #1
 8003296:	71fb      	strb	r3, [r7, #7]
 8003298:	79fb      	ldrb	r3, [r7, #7]
 800329a:	2b1a      	cmp	r3, #26
 800329c:	d9ea      	bls.n	8003274 <WriteCmd+0x10>
	}
}
 800329e:	bf00      	nop
 80032a0:	bf00      	nop
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	20000008 	.word	0x20000008
 80032ac:	20000470 	.word	0x20000470

080032b0 <OLED_WR_CMD>:

//向设备写控制命令
void OLED_WR_CMD(uint8_t cmd)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af04      	add	r7, sp, #16
 80032b6:	4603      	mov	r3, r0
 80032b8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x78, 0x00, I2C_MEMADD_SIZE_8BIT, &cmd, 1, 0x100);
 80032ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032be:	9302      	str	r3, [sp, #8]
 80032c0:	2301      	movs	r3, #1
 80032c2:	9301      	str	r3, [sp, #4]
 80032c4:	1dfb      	adds	r3, r7, #7
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	2301      	movs	r3, #1
 80032ca:	2200      	movs	r2, #0
 80032cc:	2178      	movs	r1, #120	@ 0x78
 80032ce:	4803      	ldr	r0, [pc, #12]	@ (80032dc <OLED_WR_CMD+0x2c>)
 80032d0:	f003 ff82 	bl	80071d8 <HAL_I2C_Mem_Write>
}
 80032d4:	bf00      	nop
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	20000470 	.word	0x20000470

080032e0 <OLED_WR_DATA>:

//向设备写数据
void OLED_WR_DATA(uint8_t data)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af04      	add	r7, sp, #16
 80032e6:	4603      	mov	r3, r0
 80032e8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x78, 0x40, I2C_MEMADD_SIZE_8BIT, &data, 1, 0x100);
 80032ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032ee:	9302      	str	r3, [sp, #8]
 80032f0:	2301      	movs	r3, #1
 80032f2:	9301      	str	r3, [sp, #4]
 80032f4:	1dfb      	adds	r3, r7, #7
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	2301      	movs	r3, #1
 80032fa:	2240      	movs	r2, #64	@ 0x40
 80032fc:	2178      	movs	r1, #120	@ 0x78
 80032fe:	4803      	ldr	r0, [pc, #12]	@ (800330c <OLED_WR_DATA+0x2c>)
 8003300:	f003 ff6a 	bl	80071d8 <HAL_I2C_Mem_Write>
}
 8003304:	bf00      	nop
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	20000470 	.word	0x20000470

08003310 <OLED_Init>:

//初始化oled屏幕
void OLED_Init(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
	HAL_Delay(200);
 8003314:	20c8      	movs	r0, #200	@ 0xc8
 8003316:	f002 ff6b 	bl	80061f0 <HAL_Delay>
	WriteCmd();
 800331a:	f7ff ffa3 	bl	8003264 <WriteCmd>
}
 800331e:	bf00      	nop
 8003320:	bd80      	pop	{r7, pc}

08003322 <OLED_Clear>:

//清屏size12 size16要清两行，其他函数有类似情况
void OLED_Clear()
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
	//printf("oled clear\r\n");
	uint8_t i, n;
	for(i = 0; i < 8; i++)
 8003328:	2300      	movs	r3, #0
 800332a:	71fb      	strb	r3, [r7, #7]
 800332c:	e01b      	b.n	8003366 <OLED_Clear+0x44>
	{
		//printf("i: %d\r\n", i);
		OLED_WR_CMD(0xb0 + i);
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	3b50      	subs	r3, #80	@ 0x50
 8003332:	b2db      	uxtb	r3, r3
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff ffbb 	bl	80032b0 <OLED_WR_CMD>
		OLED_WR_CMD (0x00);
 800333a:	2000      	movs	r0, #0
 800333c:	f7ff ffb8 	bl	80032b0 <OLED_WR_CMD>
		OLED_WR_CMD (0x10);
 8003340:	2010      	movs	r0, #16
 8003342:	f7ff ffb5 	bl	80032b0 <OLED_WR_CMD>
		for(n = 0; n < 128; n++)
 8003346:	2300      	movs	r3, #0
 8003348:	71bb      	strb	r3, [r7, #6]
 800334a:	e005      	b.n	8003358 <OLED_Clear+0x36>
			OLED_WR_DATA(0);
 800334c:	2000      	movs	r0, #0
 800334e:	f7ff ffc7 	bl	80032e0 <OLED_WR_DATA>
		for(n = 0; n < 128; n++)
 8003352:	79bb      	ldrb	r3, [r7, #6]
 8003354:	3301      	adds	r3, #1
 8003356:	71bb      	strb	r3, [r7, #6]
 8003358:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800335c:	2b00      	cmp	r3, #0
 800335e:	daf5      	bge.n	800334c <OLED_Clear+0x2a>
	for(i = 0; i < 8; i++)
 8003360:	79fb      	ldrb	r3, [r7, #7]
 8003362:	3301      	adds	r3, #1
 8003364:	71fb      	strb	r3, [r7, #7]
 8003366:	79fb      	ldrb	r3, [r7, #7]
 8003368:	2b07      	cmp	r3, #7
 800336a:	d9e0      	bls.n	800332e <OLED_Clear+0xc>
	}
}
 800336c:	bf00      	nop
 800336e:	bf00      	nop
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <OLED_Clearrow>:

//清行
void OLED_Clearrow(uint8_t i)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	4603      	mov	r3, r0
 800337e:	71fb      	strb	r3, [r7, #7]
	uint8_t n;
	OLED_WR_CMD(0xb0 + i);
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	3b50      	subs	r3, #80	@ 0x50
 8003384:	b2db      	uxtb	r3, r3
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff ff92 	bl	80032b0 <OLED_WR_CMD>
	OLED_WR_CMD (0x00);
 800338c:	2000      	movs	r0, #0
 800338e:	f7ff ff8f 	bl	80032b0 <OLED_WR_CMD>
	OLED_WR_CMD (0x10);
 8003392:	2010      	movs	r0, #16
 8003394:	f7ff ff8c 	bl	80032b0 <OLED_WR_CMD>
	for(n = 0; n < 128; n++)
 8003398:	2300      	movs	r3, #0
 800339a:	73fb      	strb	r3, [r7, #15]
 800339c:	e005      	b.n	80033aa <OLED_Clearrow+0x34>
		OLED_WR_DATA(0);
 800339e:	2000      	movs	r0, #0
 80033a0:	f7ff ff9e 	bl	80032e0 <OLED_WR_DATA>
	for(n = 0; n < 128; n++)
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
 80033a6:	3301      	adds	r3, #1
 80033a8:	73fb      	strb	r3, [r7, #15]
 80033aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	daf5      	bge.n	800339e <OLED_Clearrow+0x28>
}
 80033b2:	bf00      	nop
 80033b4:	bf00      	nop
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <OLED_Set_Pos>:
	OLED_WR_CMD(0X10);  //DCDC OFF
	OLED_WR_CMD(0XAE);  //DISPLAY OFF
}

void OLED_Set_Pos(uint8_t x, uint8_t y)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	460a      	mov	r2, r1
 80033c6:	71fb      	strb	r3, [r7, #7]
 80033c8:	4613      	mov	r3, r2
 80033ca:	71bb      	strb	r3, [r7, #6]
	OLED_WR_CMD(0xb0 + y);
 80033cc:	79bb      	ldrb	r3, [r7, #6]
 80033ce:	3b50      	subs	r3, #80	@ 0x50
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff ff6c 	bl	80032b0 <OLED_WR_CMD>
	OLED_WR_CMD(((x & 0xf0) >> 4) | 0x10);
 80033d8:	79fb      	ldrb	r3, [r7, #7]
 80033da:	091b      	lsrs	r3, r3, #4
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	f043 0310 	orr.w	r3, r3, #16
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff ff63 	bl	80032b0 <OLED_WR_CMD>
	OLED_WR_CMD(x & 0x0f);
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	f003 030f 	and.w	r3, r3, #15
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff ff5c 	bl	80032b0 <OLED_WR_CMD>
}
 80033f8:	bf00      	nop
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <oled_pow>:
			OLED_WR_DATA(1);
	} //更新显示
}

unsigned int oled_pow(uint8_t m, uint8_t n)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	460a      	mov	r2, r1
 800340a:	71fb      	strb	r3, [r7, #7]
 800340c:	4613      	mov	r3, r2
 800340e:	71bb      	strb	r3, [r7, #6]
	unsigned int result = 1;
 8003410:	2301      	movs	r3, #1
 8003412:	60fb      	str	r3, [r7, #12]
	while(n--)result *= m;
 8003414:	e004      	b.n	8003420 <oled_pow+0x20>
 8003416:	79fa      	ldrb	r2, [r7, #7]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	fb02 f303 	mul.w	r3, r2, r3
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	79bb      	ldrb	r3, [r7, #6]
 8003422:	1e5a      	subs	r2, r3, #1
 8003424:	71ba      	strb	r2, [r7, #6]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f5      	bne.n	8003416 <oled_pow+0x16>
	return result;
 800342a:	68fb      	ldr	r3, [r7, #12]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <OLED_ShowChar>:
//x:0~127
//y:0~63
//mode:0,反白显示;1,正常显示
//size:选择字体 16/12
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t Char_Size)
{
 8003438:	b590      	push	{r4, r7, lr}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	4604      	mov	r4, r0
 8003440:	4608      	mov	r0, r1
 8003442:	4611      	mov	r1, r2
 8003444:	461a      	mov	r2, r3
 8003446:	4623      	mov	r3, r4
 8003448:	71fb      	strb	r3, [r7, #7]
 800344a:	4603      	mov	r3, r0
 800344c:	71bb      	strb	r3, [r7, #6]
 800344e:	460b      	mov	r3, r1
 8003450:	717b      	strb	r3, [r7, #5]
 8003452:	4613      	mov	r3, r2
 8003454:	713b      	strb	r3, [r7, #4]
    unsigned char c = 0, i = 0;
 8003456:	2300      	movs	r3, #0
 8003458:	73bb      	strb	r3, [r7, #14]
 800345a:	2300      	movs	r3, #0
 800345c:	73fb      	strb	r3, [r7, #15]
    
    c = chr - ' ';//得到偏移后的值
 800345e:	797b      	ldrb	r3, [r7, #5]
 8003460:	3b20      	subs	r3, #32
 8003462:	73bb      	strb	r3, [r7, #14]
    if(x > 128 - 1)
 8003464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003468:	2b00      	cmp	r3, #0
 800346a:	da04      	bge.n	8003476 <OLED_ShowChar+0x3e>
    {
        x = 0;
 800346c:	2300      	movs	r3, #0
 800346e:	71fb      	strb	r3, [r7, #7]
        y = y + 2;
 8003470:	79bb      	ldrb	r3, [r7, #6]
 8003472:	3302      	adds	r3, #2
 8003474:	71bb      	strb	r3, [r7, #6]
    }
    if (Char_Size == 40)
 8003476:	793b      	ldrb	r3, [r7, #4]
 8003478:	2b28      	cmp	r3, #40	@ 0x28
 800347a:	f040 808f 	bne.w	800359c <OLED_ShowChar+0x164>
    {
        OLED_Set_Pos(x, y);
 800347e:	79ba      	ldrb	r2, [r7, #6]
 8003480:	79fb      	ldrb	r3, [r7, #7]
 8003482:	4611      	mov	r1, r2
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff ff99 	bl	80033bc <OLED_Set_Pos>
        for (i = 0; i < 20; i++)
 800348a:	2300      	movs	r3, #0
 800348c:	73fb      	strb	r3, [r7, #15]
 800348e:	e00d      	b.n	80034ac <OLED_ShowChar+0x74>
            OLED_WR_DATA(F20X40[c * 100 + i]); 
 8003490:	7bbb      	ldrb	r3, [r7, #14]
 8003492:	2264      	movs	r2, #100	@ 0x64
 8003494:	fb03 f202 	mul.w	r2, r3, r2
 8003498:	7bfb      	ldrb	r3, [r7, #15]
 800349a:	4413      	add	r3, r2
 800349c:	4aa1      	ldr	r2, [pc, #644]	@ (8003724 <OLED_ShowChar+0x2ec>)
 800349e:	5cd3      	ldrb	r3, [r2, r3]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff ff1d 	bl	80032e0 <OLED_WR_DATA>
        for (i = 0; i < 20; i++)
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	3301      	adds	r3, #1
 80034aa:	73fb      	strb	r3, [r7, #15]
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
 80034ae:	2b13      	cmp	r3, #19
 80034b0:	d9ee      	bls.n	8003490 <OLED_ShowChar+0x58>
        
        OLED_Set_Pos(x, y + 1);
 80034b2:	79bb      	ldrb	r3, [r7, #6]
 80034b4:	3301      	adds	r3, #1
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	79fb      	ldrb	r3, [r7, #7]
 80034ba:	4611      	mov	r1, r2
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff ff7d 	bl	80033bc <OLED_Set_Pos>
        for (i = 0; i < 20; i++)
 80034c2:	2300      	movs	r3, #0
 80034c4:	73fb      	strb	r3, [r7, #15]
 80034c6:	e00e      	b.n	80034e6 <OLED_ShowChar+0xae>
            OLED_WR_DATA(F20X40[c * 100 + i + 20]); 
 80034c8:	7bbb      	ldrb	r3, [r7, #14]
 80034ca:	2264      	movs	r2, #100	@ 0x64
 80034cc:	fb03 f202 	mul.w	r2, r3, r2
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
 80034d2:	4413      	add	r3, r2
 80034d4:	3314      	adds	r3, #20
 80034d6:	4a93      	ldr	r2, [pc, #588]	@ (8003724 <OLED_ShowChar+0x2ec>)
 80034d8:	5cd3      	ldrb	r3, [r2, r3]
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff ff00 	bl	80032e0 <OLED_WR_DATA>
        for (i = 0; i < 20; i++)
 80034e0:	7bfb      	ldrb	r3, [r7, #15]
 80034e2:	3301      	adds	r3, #1
 80034e4:	73fb      	strb	r3, [r7, #15]
 80034e6:	7bfb      	ldrb	r3, [r7, #15]
 80034e8:	2b13      	cmp	r3, #19
 80034ea:	d9ed      	bls.n	80034c8 <OLED_ShowChar+0x90>
        
        OLED_Set_Pos(x, y + 2);
 80034ec:	79bb      	ldrb	r3, [r7, #6]
 80034ee:	3302      	adds	r3, #2
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	79fb      	ldrb	r3, [r7, #7]
 80034f4:	4611      	mov	r1, r2
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff ff60 	bl	80033bc <OLED_Set_Pos>
        for (i = 0; i < 20; i++)
 80034fc:	2300      	movs	r3, #0
 80034fe:	73fb      	strb	r3, [r7, #15]
 8003500:	e00e      	b.n	8003520 <OLED_ShowChar+0xe8>
            OLED_WR_DATA(F20X40[c * 100 + i + 40]);
 8003502:	7bbb      	ldrb	r3, [r7, #14]
 8003504:	2264      	movs	r2, #100	@ 0x64
 8003506:	fb03 f202 	mul.w	r2, r3, r2
 800350a:	7bfb      	ldrb	r3, [r7, #15]
 800350c:	4413      	add	r3, r2
 800350e:	3328      	adds	r3, #40	@ 0x28
 8003510:	4a84      	ldr	r2, [pc, #528]	@ (8003724 <OLED_ShowChar+0x2ec>)
 8003512:	5cd3      	ldrb	r3, [r2, r3]
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff fee3 	bl	80032e0 <OLED_WR_DATA>
        for (i = 0; i < 20; i++)
 800351a:	7bfb      	ldrb	r3, [r7, #15]
 800351c:	3301      	adds	r3, #1
 800351e:	73fb      	strb	r3, [r7, #15]
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	2b13      	cmp	r3, #19
 8003524:	d9ed      	bls.n	8003502 <OLED_ShowChar+0xca>
        
        OLED_Set_Pos(x, y + 3);
 8003526:	79bb      	ldrb	r3, [r7, #6]
 8003528:	3303      	adds	r3, #3
 800352a:	b2da      	uxtb	r2, r3
 800352c:	79fb      	ldrb	r3, [r7, #7]
 800352e:	4611      	mov	r1, r2
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff ff43 	bl	80033bc <OLED_Set_Pos>
        for (i = 0; i < 20; i++)
 8003536:	2300      	movs	r3, #0
 8003538:	73fb      	strb	r3, [r7, #15]
 800353a:	e00e      	b.n	800355a <OLED_ShowChar+0x122>
            OLED_WR_DATA(F20X40[c * 100 + i + 60]);
 800353c:	7bbb      	ldrb	r3, [r7, #14]
 800353e:	2264      	movs	r2, #100	@ 0x64
 8003540:	fb03 f202 	mul.w	r2, r3, r2
 8003544:	7bfb      	ldrb	r3, [r7, #15]
 8003546:	4413      	add	r3, r2
 8003548:	333c      	adds	r3, #60	@ 0x3c
 800354a:	4a76      	ldr	r2, [pc, #472]	@ (8003724 <OLED_ShowChar+0x2ec>)
 800354c:	5cd3      	ldrb	r3, [r2, r3]
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff fec6 	bl	80032e0 <OLED_WR_DATA>
        for (i = 0; i < 20; i++)
 8003554:	7bfb      	ldrb	r3, [r7, #15]
 8003556:	3301      	adds	r3, #1
 8003558:	73fb      	strb	r3, [r7, #15]
 800355a:	7bfb      	ldrb	r3, [r7, #15]
 800355c:	2b13      	cmp	r3, #19
 800355e:	d9ed      	bls.n	800353c <OLED_ShowChar+0x104>
        
        OLED_Set_Pos(x, y + 4);
 8003560:	79bb      	ldrb	r3, [r7, #6]
 8003562:	3304      	adds	r3, #4
 8003564:	b2da      	uxtb	r2, r3
 8003566:	79fb      	ldrb	r3, [r7, #7]
 8003568:	4611      	mov	r1, r2
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff ff26 	bl	80033bc <OLED_Set_Pos>
        for (i = 0; i < 20; i++)
 8003570:	2300      	movs	r3, #0
 8003572:	73fb      	strb	r3, [r7, #15]
 8003574:	e00e      	b.n	8003594 <OLED_ShowChar+0x15c>
            OLED_WR_DATA(F20X40[c * 100 + i + 80]);
 8003576:	7bbb      	ldrb	r3, [r7, #14]
 8003578:	2264      	movs	r2, #100	@ 0x64
 800357a:	fb03 f202 	mul.w	r2, r3, r2
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	4413      	add	r3, r2
 8003582:	3350      	adds	r3, #80	@ 0x50
 8003584:	4a67      	ldr	r2, [pc, #412]	@ (8003724 <OLED_ShowChar+0x2ec>)
 8003586:	5cd3      	ldrb	r3, [r2, r3]
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff fea9 	bl	80032e0 <OLED_WR_DATA>
        for (i = 0; i < 20; i++)
 800358e:	7bfb      	ldrb	r3, [r7, #15]
 8003590:	3301      	adds	r3, #1
 8003592:	73fb      	strb	r3, [r7, #15]
 8003594:	7bfb      	ldrb	r3, [r7, #15]
 8003596:	2b13      	cmp	r3, #19
 8003598:	d9ed      	bls.n	8003576 <OLED_ShowChar+0x13e>
        
        for(i = 0; i < 6; i++)
            OLED_WR_DATA(F6x8[c][i]);

    }
}
 800359a:	e0bf      	b.n	800371c <OLED_ShowChar+0x2e4>
    else if (Char_Size == 32)
 800359c:	793b      	ldrb	r3, [r7, #4]
 800359e:	2b20      	cmp	r3, #32
 80035a0:	d169      	bne.n	8003676 <OLED_ShowChar+0x23e>
        OLED_Set_Pos(x, y);
 80035a2:	79ba      	ldrb	r2, [r7, #6]
 80035a4:	79fb      	ldrb	r3, [r7, #7]
 80035a6:	4611      	mov	r1, r2
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff ff07 	bl	80033bc <OLED_Set_Pos>
        for (i = 0; i < 16; i++)
 80035ae:	2300      	movs	r3, #0
 80035b0:	73fb      	strb	r3, [r7, #15]
 80035b2:	e00b      	b.n	80035cc <OLED_ShowChar+0x194>
            OLED_WR_DATA(F16X32[c * 64 + i]);  
 80035b4:	7bbb      	ldrb	r3, [r7, #14]
 80035b6:	019a      	lsls	r2, r3, #6
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
 80035ba:	4413      	add	r3, r2
 80035bc:	4a5a      	ldr	r2, [pc, #360]	@ (8003728 <OLED_ShowChar+0x2f0>)
 80035be:	5cd3      	ldrb	r3, [r2, r3]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff fe8d 	bl	80032e0 <OLED_WR_DATA>
        for (i = 0; i < 16; i++)
 80035c6:	7bfb      	ldrb	r3, [r7, #15]
 80035c8:	3301      	adds	r3, #1
 80035ca:	73fb      	strb	r3, [r7, #15]
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
 80035ce:	2b0f      	cmp	r3, #15
 80035d0:	d9f0      	bls.n	80035b4 <OLED_ShowChar+0x17c>
        OLED_Set_Pos(x, y + 1);
 80035d2:	79bb      	ldrb	r3, [r7, #6]
 80035d4:	3301      	adds	r3, #1
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	4611      	mov	r1, r2
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff feed 	bl	80033bc <OLED_Set_Pos>
        for (i = 0; i < 16; i++)
 80035e2:	2300      	movs	r3, #0
 80035e4:	73fb      	strb	r3, [r7, #15]
 80035e6:	e00c      	b.n	8003602 <OLED_ShowChar+0x1ca>
            OLED_WR_DATA(F16X32[c * 64 + i + 16]); 
 80035e8:	7bbb      	ldrb	r3, [r7, #14]
 80035ea:	019a      	lsls	r2, r3, #6
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
 80035ee:	4413      	add	r3, r2
 80035f0:	3310      	adds	r3, #16
 80035f2:	4a4d      	ldr	r2, [pc, #308]	@ (8003728 <OLED_ShowChar+0x2f0>)
 80035f4:	5cd3      	ldrb	r3, [r2, r3]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff fe72 	bl	80032e0 <OLED_WR_DATA>
        for (i = 0; i < 16; i++)
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	3301      	adds	r3, #1
 8003600:	73fb      	strb	r3, [r7, #15]
 8003602:	7bfb      	ldrb	r3, [r7, #15]
 8003604:	2b0f      	cmp	r3, #15
 8003606:	d9ef      	bls.n	80035e8 <OLED_ShowChar+0x1b0>
        OLED_Set_Pos(x, y + 2);
 8003608:	79bb      	ldrb	r3, [r7, #6]
 800360a:	3302      	adds	r3, #2
 800360c:	b2da      	uxtb	r2, r3
 800360e:	79fb      	ldrb	r3, [r7, #7]
 8003610:	4611      	mov	r1, r2
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff fed2 	bl	80033bc <OLED_Set_Pos>
        for (i = 0; i < 16; i++)
 8003618:	2300      	movs	r3, #0
 800361a:	73fb      	strb	r3, [r7, #15]
 800361c:	e00c      	b.n	8003638 <OLED_ShowChar+0x200>
            OLED_WR_DATA(F16X32[c * 64 + i + 32]);
 800361e:	7bbb      	ldrb	r3, [r7, #14]
 8003620:	019a      	lsls	r2, r3, #6
 8003622:	7bfb      	ldrb	r3, [r7, #15]
 8003624:	4413      	add	r3, r2
 8003626:	3320      	adds	r3, #32
 8003628:	4a3f      	ldr	r2, [pc, #252]	@ (8003728 <OLED_ShowChar+0x2f0>)
 800362a:	5cd3      	ldrb	r3, [r2, r3]
 800362c:	4618      	mov	r0, r3
 800362e:	f7ff fe57 	bl	80032e0 <OLED_WR_DATA>
        for (i = 0; i < 16; i++)
 8003632:	7bfb      	ldrb	r3, [r7, #15]
 8003634:	3301      	adds	r3, #1
 8003636:	73fb      	strb	r3, [r7, #15]
 8003638:	7bfb      	ldrb	r3, [r7, #15]
 800363a:	2b0f      	cmp	r3, #15
 800363c:	d9ef      	bls.n	800361e <OLED_ShowChar+0x1e6>
        OLED_Set_Pos(x, y + 3);
 800363e:	79bb      	ldrb	r3, [r7, #6]
 8003640:	3303      	adds	r3, #3
 8003642:	b2da      	uxtb	r2, r3
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	4611      	mov	r1, r2
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff feb7 	bl	80033bc <OLED_Set_Pos>
        for (i = 0; i < 16; i++)
 800364e:	2300      	movs	r3, #0
 8003650:	73fb      	strb	r3, [r7, #15]
 8003652:	e00c      	b.n	800366e <OLED_ShowChar+0x236>
            OLED_WR_DATA(F16X32[c * 64 + i + 48]);
 8003654:	7bbb      	ldrb	r3, [r7, #14]
 8003656:	019a      	lsls	r2, r3, #6
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	4413      	add	r3, r2
 800365c:	3330      	adds	r3, #48	@ 0x30
 800365e:	4a32      	ldr	r2, [pc, #200]	@ (8003728 <OLED_ShowChar+0x2f0>)
 8003660:	5cd3      	ldrb	r3, [r2, r3]
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff fe3c 	bl	80032e0 <OLED_WR_DATA>
        for (i = 0; i < 16; i++)
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	3301      	adds	r3, #1
 800366c:	73fb      	strb	r3, [r7, #15]
 800366e:	7bfb      	ldrb	r3, [r7, #15]
 8003670:	2b0f      	cmp	r3, #15
 8003672:	d9ef      	bls.n	8003654 <OLED_ShowChar+0x21c>
}
 8003674:	e052      	b.n	800371c <OLED_ShowChar+0x2e4>
    else if(Char_Size == 16)
 8003676:	793b      	ldrb	r3, [r7, #4]
 8003678:	2b10      	cmp	r3, #16
 800367a:	d133      	bne.n	80036e4 <OLED_ShowChar+0x2ac>
        OLED_Set_Pos(x,y);
 800367c:	79ba      	ldrb	r2, [r7, #6]
 800367e:	79fb      	ldrb	r3, [r7, #7]
 8003680:	4611      	mov	r1, r2
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff fe9a 	bl	80033bc <OLED_Set_Pos>
        for(i = 0; i < 8 ; i++)
 8003688:	2300      	movs	r3, #0
 800368a:	73fb      	strb	r3, [r7, #15]
 800368c:	e00b      	b.n	80036a6 <OLED_ShowChar+0x26e>
            OLED_WR_DATA(F8x16[c * 16 + i]);
 800368e:	7bbb      	ldrb	r3, [r7, #14]
 8003690:	011a      	lsls	r2, r3, #4
 8003692:	7bfb      	ldrb	r3, [r7, #15]
 8003694:	4413      	add	r3, r2
 8003696:	4a25      	ldr	r2, [pc, #148]	@ (800372c <OLED_ShowChar+0x2f4>)
 8003698:	5cd3      	ldrb	r3, [r2, r3]
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff fe20 	bl	80032e0 <OLED_WR_DATA>
        for(i = 0; i < 8 ; i++)
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
 80036a2:	3301      	adds	r3, #1
 80036a4:	73fb      	strb	r3, [r7, #15]
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	2b07      	cmp	r3, #7
 80036aa:	d9f0      	bls.n	800368e <OLED_ShowChar+0x256>
        OLED_Set_Pos(x, y + 1);
 80036ac:	79bb      	ldrb	r3, [r7, #6]
 80036ae:	3301      	adds	r3, #1
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	79fb      	ldrb	r3, [r7, #7]
 80036b4:	4611      	mov	r1, r2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff fe80 	bl	80033bc <OLED_Set_Pos>
        for(i = 0; i < 8 ; i++)
 80036bc:	2300      	movs	r3, #0
 80036be:	73fb      	strb	r3, [r7, #15]
 80036c0:	e00c      	b.n	80036dc <OLED_ShowChar+0x2a4>
            OLED_WR_DATA(F8x16[c * 16 + i + 8]);
 80036c2:	7bbb      	ldrb	r3, [r7, #14]
 80036c4:	011a      	lsls	r2, r3, #4
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
 80036c8:	4413      	add	r3, r2
 80036ca:	3308      	adds	r3, #8
 80036cc:	4a17      	ldr	r2, [pc, #92]	@ (800372c <OLED_ShowChar+0x2f4>)
 80036ce:	5cd3      	ldrb	r3, [r2, r3]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff fe05 	bl	80032e0 <OLED_WR_DATA>
        for(i = 0; i < 8 ; i++)
 80036d6:	7bfb      	ldrb	r3, [r7, #15]
 80036d8:	3301      	adds	r3, #1
 80036da:	73fb      	strb	r3, [r7, #15]
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
 80036de:	2b07      	cmp	r3, #7
 80036e0:	d9ef      	bls.n	80036c2 <OLED_ShowChar+0x28a>
}
 80036e2:	e01b      	b.n	800371c <OLED_ShowChar+0x2e4>
        OLED_Set_Pos(x, y);
 80036e4:	79ba      	ldrb	r2, [r7, #6]
 80036e6:	79fb      	ldrb	r3, [r7, #7]
 80036e8:	4611      	mov	r1, r2
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff fe66 	bl	80033bc <OLED_Set_Pos>
        for(i = 0; i < 6; i++)
 80036f0:	2300      	movs	r3, #0
 80036f2:	73fb      	strb	r3, [r7, #15]
 80036f4:	e00f      	b.n	8003716 <OLED_ShowChar+0x2de>
            OLED_WR_DATA(F6x8[c][i]);
 80036f6:	7bba      	ldrb	r2, [r7, #14]
 80036f8:	7bf9      	ldrb	r1, [r7, #15]
 80036fa:	480d      	ldr	r0, [pc, #52]	@ (8003730 <OLED_ShowChar+0x2f8>)
 80036fc:	4613      	mov	r3, r2
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	4413      	add	r3, r2
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	4403      	add	r3, r0
 8003706:	440b      	add	r3, r1
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff fde8 	bl	80032e0 <OLED_WR_DATA>
        for(i = 0; i < 6; i++)
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	3301      	adds	r3, #1
 8003714:	73fb      	strb	r3, [r7, #15]
 8003716:	7bfb      	ldrb	r3, [r7, #15]
 8003718:	2b05      	cmp	r3, #5
 800371a:	d9ec      	bls.n	80036f6 <OLED_ShowChar+0x2be>
}
 800371c:	bf00      	nop
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	bd90      	pop	{r4, r7, pc}
 8003724:	080112dc 	.word	0x080112dc
 8003728:	08011d68 	.word	0x08011d68
 800372c:	08010cec 	.word	0x08010cec
 8003730:	08010ac4 	.word	0x08010ac4

08003734 <OLED_ShowNum>:
//len :数字的位数
//size:字体大小
//mode:模式	0,填充模式;1,叠加模式
//num:数值(0~4294967295);
void OLED_ShowNum(uint8_t x,uint8_t y,unsigned int num,uint8_t len,uint8_t size2)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	603a      	str	r2, [r7, #0]
 800373c:	461a      	mov	r2, r3
 800373e:	4603      	mov	r3, r0
 8003740:	71fb      	strb	r3, [r7, #7]
 8003742:	460b      	mov	r3, r1
 8003744:	71bb      	strb	r3, [r7, #6]
 8003746:	4613      	mov	r3, r2
 8003748:	717b      	strb	r3, [r7, #5]
	uint8_t t, temp;
	uint8_t enshow = 0;
 800374a:	2300      	movs	r3, #0
 800374c:	73bb      	strb	r3, [r7, #14]
	for(t = 0; t < len; t++)
 800374e:	2300      	movs	r3, #0
 8003750:	73fb      	strb	r3, [r7, #15]
 8003752:	e049      	b.n	80037e8 <OLED_ShowNum+0xb4>
	{
		temp = (num / oled_pow(10, len - t - 1)) % 10;
 8003754:	797a      	ldrb	r2, [r7, #5]
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	b2db      	uxtb	r3, r3
 800375c:	3b01      	subs	r3, #1
 800375e:	b2db      	uxtb	r3, r3
 8003760:	4619      	mov	r1, r3
 8003762:	200a      	movs	r0, #10
 8003764:	f7ff fe4c 	bl	8003400 <oled_pow>
 8003768:	4602      	mov	r2, r0
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003770:	4b22      	ldr	r3, [pc, #136]	@ (80037fc <OLED_ShowNum+0xc8>)
 8003772:	fba3 2301 	umull	r2, r3, r3, r1
 8003776:	08da      	lsrs	r2, r3, #3
 8003778:	4613      	mov	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	1aca      	subs	r2, r1, r3
 8003782:	4613      	mov	r3, r2
 8003784:	737b      	strb	r3, [r7, #13]
		if(enshow == 0 && t < (len - 1))
 8003786:	7bbb      	ldrb	r3, [r7, #14]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d119      	bne.n	80037c0 <OLED_ShowNum+0x8c>
 800378c:	7bfa      	ldrb	r2, [r7, #15]
 800378e:	797b      	ldrb	r3, [r7, #5]
 8003790:	3b01      	subs	r3, #1
 8003792:	429a      	cmp	r2, r3
 8003794:	da14      	bge.n	80037c0 <OLED_ShowNum+0x8c>
		{
			if(temp == 0)
 8003796:	7b7b      	ldrb	r3, [r7, #13]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10f      	bne.n	80037bc <OLED_ShowNum+0x88>
			{
				OLED_ShowChar(x + (size2 / 2) * t, y, ' ', size2);
 800379c:	7e3b      	ldrb	r3, [r7, #24]
 800379e:	085b      	lsrs	r3, r3, #1
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	7bfa      	ldrb	r2, [r7, #15]
 80037a4:	fb12 f303 	smulbb	r3, r2, r3
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	4413      	add	r3, r2
 80037ae:	b2d8      	uxtb	r0, r3
 80037b0:	7e3b      	ldrb	r3, [r7, #24]
 80037b2:	79b9      	ldrb	r1, [r7, #6]
 80037b4:	2220      	movs	r2, #32
 80037b6:	f7ff fe3f 	bl	8003438 <OLED_ShowChar>
				continue;
 80037ba:	e012      	b.n	80037e2 <OLED_ShowNum+0xae>
			}
			else 
				enshow=1;
 80037bc:	2301      	movs	r3, #1
 80037be:	73bb      	strb	r3, [r7, #14]
		}
	 	OLED_ShowChar(x + (size2 / 2) * t, y, temp + '0', size2);
 80037c0:	7e3b      	ldrb	r3, [r7, #24]
 80037c2:	085b      	lsrs	r3, r3, #1
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	7bfa      	ldrb	r2, [r7, #15]
 80037c8:	fb12 f303 	smulbb	r3, r2, r3
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	79fb      	ldrb	r3, [r7, #7]
 80037d0:	4413      	add	r3, r2
 80037d2:	b2d8      	uxtb	r0, r3
 80037d4:	7b7b      	ldrb	r3, [r7, #13]
 80037d6:	3330      	adds	r3, #48	@ 0x30
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	7e3b      	ldrb	r3, [r7, #24]
 80037dc:	79b9      	ldrb	r1, [r7, #6]
 80037de:	f7ff fe2b 	bl	8003438 <OLED_ShowChar>
	for(t = 0; t < len; t++)
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
 80037e4:	3301      	adds	r3, #1
 80037e6:	73fb      	strb	r3, [r7, #15]
 80037e8:	7bfa      	ldrb	r2, [r7, #15]
 80037ea:	797b      	ldrb	r3, [r7, #5]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d3b1      	bcc.n	8003754 <OLED_ShowNum+0x20>
	}
}
 80037f0:	bf00      	nop
 80037f2:	bf00      	nop
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	cccccccd 	.word	0xcccccccd

08003800 <OLED_ShowString>:

//显示一个字符号串
void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr, uint8_t Char_Size)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	603a      	str	r2, [r7, #0]
 8003808:	461a      	mov	r2, r3
 800380a:	4603      	mov	r3, r0
 800380c:	71fb      	strb	r3, [r7, #7]
 800380e:	460b      	mov	r3, r1
 8003810:	71bb      	strb	r3, [r7, #6]
 8003812:	4613      	mov	r3, r2
 8003814:	717b      	strb	r3, [r7, #5]
	unsigned char j = 0;
 8003816:	2300      	movs	r3, #0
 8003818:	73fb      	strb	r3, [r7, #15]
	while (chr[j] != '\0')
 800381a:	e016      	b.n	800384a <OLED_ShowString+0x4a>
	{		
		OLED_ShowChar(x, y, chr[j], Char_Size);
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	4413      	add	r3, r2
 8003822:	781a      	ldrb	r2, [r3, #0]
 8003824:	797b      	ldrb	r3, [r7, #5]
 8003826:	79b9      	ldrb	r1, [r7, #6]
 8003828:	79f8      	ldrb	r0, [r7, #7]
 800382a:	f7ff fe05 	bl	8003438 <OLED_ShowChar>
		x += 8;
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	3308      	adds	r3, #8
 8003832:	71fb      	strb	r3, [r7, #7]
		if(x > 120)
 8003834:	79fb      	ldrb	r3, [r7, #7]
 8003836:	2b78      	cmp	r3, #120	@ 0x78
 8003838:	d904      	bls.n	8003844 <OLED_ShowString+0x44>
		{
			x = 0;
 800383a:	2300      	movs	r3, #0
 800383c:	71fb      	strb	r3, [r7, #7]
			y += 2;
 800383e:	79bb      	ldrb	r3, [r7, #6]
 8003840:	3302      	adds	r3, #2
 8003842:	71bb      	strb	r3, [r7, #6]
		}
		j++;
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	3301      	adds	r3, #1
 8003848:	73fb      	strb	r3, [r7, #15]
	while (chr[j] != '\0')
 800384a:	7bfb      	ldrb	r3, [r7, #15]
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	4413      	add	r3, r2
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1e2      	bne.n	800381c <OLED_ShowString+0x1c>
	}
}
 8003856:	bf00      	nop
 8003858:	bf00      	nop
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <OLED_ShowChinese>:

//显示汉字
//hzk 用取模软件得出的数组
void OLED_ShowChinese(uint8_t x, uint8_t y, uint8_t no)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	71fb      	strb	r3, [r7, #7]
 800386a:	460b      	mov	r3, r1
 800386c:	71bb      	strb	r3, [r7, #6]
 800386e:	4613      	mov	r3, r2
 8003870:	717b      	strb	r3, [r7, #5]
    uint8_t t, adder = 0;
 8003872:	2300      	movs	r3, #0
 8003874:	73bb      	strb	r3, [r7, #14]
    
    OLED_Set_Pos(x, y);
 8003876:	79ba      	ldrb	r2, [r7, #6]
 8003878:	79fb      	ldrb	r3, [r7, #7]
 800387a:	4611      	mov	r1, r2
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff fd9d 	bl	80033bc <OLED_Set_Pos>
    
    for(t = 0; t < 16; t++)
 8003882:	2300      	movs	r3, #0
 8003884:	73fb      	strb	r3, [r7, #15]
 8003886:	e010      	b.n	80038aa <OLED_ShowChinese+0x4a>
    {
        OLED_WR_DATA(Hzk[2 * no][t]);
 8003888:	797b      	ldrb	r3, [r7, #5]
 800388a:	005a      	lsls	r2, r3, #1
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	491b      	ldr	r1, [pc, #108]	@ (80038fc <OLED_ShowChinese+0x9c>)
 8003890:	0152      	lsls	r2, r2, #5
 8003892:	440a      	add	r2, r1
 8003894:	4413      	add	r3, r2
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff fd21 	bl	80032e0 <OLED_WR_DATA>
        adder += 1;
 800389e:	7bbb      	ldrb	r3, [r7, #14]
 80038a0:	3301      	adds	r3, #1
 80038a2:	73bb      	strb	r3, [r7, #14]
    for(t = 0; t < 16; t++)
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
 80038a6:	3301      	adds	r3, #1
 80038a8:	73fb      	strb	r3, [r7, #15]
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
 80038ac:	2b0f      	cmp	r3, #15
 80038ae:	d9eb      	bls.n	8003888 <OLED_ShowChinese+0x28>
    }
    
    OLED_Set_Pos(x,y+1);
 80038b0:	79bb      	ldrb	r3, [r7, #6]
 80038b2:	3301      	adds	r3, #1
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	79fb      	ldrb	r3, [r7, #7]
 80038b8:	4611      	mov	r1, r2
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7ff fd7e 	bl	80033bc <OLED_Set_Pos>
    
    for(t = 0; t < 16; t++)
 80038c0:	2300      	movs	r3, #0
 80038c2:	73fb      	strb	r3, [r7, #15]
 80038c4:	e011      	b.n	80038ea <OLED_ShowChinese+0x8a>
    {
        OLED_WR_DATA(Hzk[2 * no + 1][t]);
 80038c6:	797b      	ldrb	r3, [r7, #5]
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
 80038ce:	490b      	ldr	r1, [pc, #44]	@ (80038fc <OLED_ShowChinese+0x9c>)
 80038d0:	0152      	lsls	r2, r2, #5
 80038d2:	440a      	add	r2, r1
 80038d4:	4413      	add	r3, r2
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff fd01 	bl	80032e0 <OLED_WR_DATA>
        adder += 1;
 80038de:	7bbb      	ldrb	r3, [r7, #14]
 80038e0:	3301      	adds	r3, #1
 80038e2:	73bb      	strb	r3, [r7, #14]
    for(t = 0; t < 16; t++)
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	3301      	adds	r3, #1
 80038e8:	73fb      	strb	r3, [r7, #15]
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
 80038ec:	2b0f      	cmp	r3, #15
 80038ee:	d9ea      	bls.n	80038c6 <OLED_ShowChinese+0x66>
    }
}
 80038f0:	bf00      	nop
 80038f2:	bf00      	nop
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	08012428 	.word	0x08012428

08003900 <Control_Menu>:
extern SemaphoreHandle_t semHandle; 
extern uint8_t gBuzzerFlag;


//test on server: mosquitto_pub -h "18.185.92.160" -p 1883 -u test -P test -t "0001" -m "{\"cmd\":\"menu\", \"tab\":\"2\"}"
void Control_Menu(cJSON *obj){
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
	//printf("control menu\r\n");
	cJSON *tabObject = cJSON_GetObjectItem(obj, "tab");
 8003908:	491f      	ldr	r1, [pc, #124]	@ (8003988 <Control_Menu+0x88>)
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff faa8 	bl	8002e60 <cJSON_GetObjectItem>
 8003910:	60f8      	str	r0, [r7, #12]
	if (tabObject)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d032      	beq.n	800397e <Control_Menu+0x7e>
	{
		if (!strcmp(tabObject->valuestring, "1"))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	491b      	ldr	r1, [pc, #108]	@ (800398c <Control_Menu+0x8c>)
 800391e:	4618      	mov	r0, r3
 8003920:	f7fc fc5e 	bl	80001e0 <strcmp>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d103      	bne.n	8003932 <Control_Menu+0x32>
			gMenu = 1;
 800392a:	4b19      	ldr	r3, [pc, #100]	@ (8003990 <Control_Menu+0x90>)
 800392c:	2201      	movs	r2, #1
 800392e:	701a      	strb	r2, [r3, #0]
		else if (!strcmp(tabObject->valuestring, "3"))
			gMenu = 3;
		else if (!strcmp(tabObject->valuestring, "4"))
			gMenu = 4;
	}
}
 8003930:	e025      	b.n	800397e <Control_Menu+0x7e>
		else if (!strcmp(tabObject->valuestring, "2"))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	4917      	ldr	r1, [pc, #92]	@ (8003994 <Control_Menu+0x94>)
 8003938:	4618      	mov	r0, r3
 800393a:	f7fc fc51 	bl	80001e0 <strcmp>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d103      	bne.n	800394c <Control_Menu+0x4c>
			gMenu = 2;
 8003944:	4b12      	ldr	r3, [pc, #72]	@ (8003990 <Control_Menu+0x90>)
 8003946:	2202      	movs	r2, #2
 8003948:	701a      	strb	r2, [r3, #0]
}
 800394a:	e018      	b.n	800397e <Control_Menu+0x7e>
		else if (!strcmp(tabObject->valuestring, "3"))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	4911      	ldr	r1, [pc, #68]	@ (8003998 <Control_Menu+0x98>)
 8003952:	4618      	mov	r0, r3
 8003954:	f7fc fc44 	bl	80001e0 <strcmp>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d103      	bne.n	8003966 <Control_Menu+0x66>
			gMenu = 3;
 800395e:	4b0c      	ldr	r3, [pc, #48]	@ (8003990 <Control_Menu+0x90>)
 8003960:	2203      	movs	r2, #3
 8003962:	701a      	strb	r2, [r3, #0]
}
 8003964:	e00b      	b.n	800397e <Control_Menu+0x7e>
		else if (!strcmp(tabObject->valuestring, "4"))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	490c      	ldr	r1, [pc, #48]	@ (800399c <Control_Menu+0x9c>)
 800396c:	4618      	mov	r0, r3
 800396e:	f7fc fc37 	bl	80001e0 <strcmp>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <Control_Menu+0x7e>
			gMenu = 4;
 8003978:	4b05      	ldr	r3, [pc, #20]	@ (8003990 <Control_Menu+0x90>)
 800397a:	2204      	movs	r2, #4
 800397c:	701a      	strb	r2, [r3, #0]
}
 800397e:	bf00      	nop
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	080106b8 	.word	0x080106b8
 800398c:	080106bc 	.word	0x080106bc
 8003990:	20000038 	.word	0x20000038
 8003994:	080106c0 	.word	0x080106c0
 8003998:	080106c4 	.word	0x080106c4
 800399c:	080106c8 	.word	0x080106c8

080039a0 <Control_Light>:

//test on server:
//mosquitto_pub -h "18.185.92.160" -p 1883 -u test -P test -t "0001" -m "{\"cmd\":\"light\", \"which\":2, \"state\":1}"
void Control_Light(cJSON *obj){
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
	cJSON *idObject = cJSON_GetObjectItem(obj, "which");
 80039a8:	4936      	ldr	r1, [pc, #216]	@ (8003a84 <Control_Light+0xe4>)
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7ff fa58 	bl	8002e60 <cJSON_GetObjectItem>
 80039b0:	6178      	str	r0, [r7, #20]
	if (!idObject)
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d05d      	beq.n	8003a74 <Control_Light+0xd4>
		return;

	cJSON *stateObject = cJSON_GetObjectItem(obj, "state");
 80039b8:	4933      	ldr	r1, [pc, #204]	@ (8003a88 <Control_Light+0xe8>)
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff fa50 	bl	8002e60 <cJSON_GetObjectItem>
 80039c0:	6138      	str	r0, [r7, #16]
	if (!stateObject)
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d057      	beq.n	8003a78 <Control_Light+0xd8>
		return;

	int id = idObject->valueint;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	60fb      	str	r3, [r7, #12]
	int state = stateObject->valueint;
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	60bb      	str	r3, [r7, #8]

	if (id < 1 || id > 4 || state < 0 || state > 1)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	dd50      	ble.n	8003a7c <Control_Light+0xdc>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2b04      	cmp	r3, #4
 80039de:	dc4d      	bgt.n	8003a7c <Control_Light+0xdc>
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	db4a      	blt.n	8003a7c <Control_Light+0xdc>
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	dc47      	bgt.n	8003a7c <Control_Light+0xdc>
		return;
	switch(id){
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d844      	bhi.n	8003a7e <Control_Light+0xde>
 80039f4:	a201      	add	r2, pc, #4	@ (adr r2, 80039fc <Control_Light+0x5c>)
 80039f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fa:	bf00      	nop
 80039fc:	08003a0d 	.word	0x08003a0d
 8003a00:	08003a27 	.word	0x08003a27
 8003a04:	08003a41 	.word	0x08003a41
 8003a08:	08003a5b 	.word	0x08003a5b
		case 1:
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, (state == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	bf14      	ite	ne
 8003a12:	2301      	movne	r3, #1
 8003a14:	2300      	moveq	r3, #0
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	461a      	mov	r2, r3
 8003a1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a1e:	481b      	ldr	r0, [pc, #108]	@ (8003a8c <Control_Light+0xec>)
 8003a20:	f002 ff32 	bl	8006888 <HAL_GPIO_WritePin>
			break;
 8003a24:	e02b      	b.n	8003a7e <Control_Light+0xde>
		case 2:
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, (state == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	bf14      	ite	ne
 8003a2c:	2301      	movne	r3, #1
 8003a2e:	2300      	moveq	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	461a      	mov	r2, r3
 8003a34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003a38:	4814      	ldr	r0, [pc, #80]	@ (8003a8c <Control_Light+0xec>)
 8003a3a:	f002 ff25 	bl	8006888 <HAL_GPIO_WritePin>
			break;
 8003a3e:	e01e      	b.n	8003a7e <Control_Light+0xde>
		case 3:
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, (state == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	bf14      	ite	ne
 8003a46:	2301      	movne	r3, #1
 8003a48:	2300      	moveq	r3, #0
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003a52:	480e      	ldr	r0, [pc, #56]	@ (8003a8c <Control_Light+0xec>)
 8003a54:	f002 ff18 	bl	8006888 <HAL_GPIO_WritePin>
			break;
 8003a58:	e011      	b.n	8003a7e <Control_Light+0xde>
		case 4:
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, (state == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	bf14      	ite	ne
 8003a60:	2301      	movne	r3, #1
 8003a62:	2300      	moveq	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	461a      	mov	r2, r3
 8003a68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a6c:	4807      	ldr	r0, [pc, #28]	@ (8003a8c <Control_Light+0xec>)
 8003a6e:	f002 ff0b 	bl	8006888 <HAL_GPIO_WritePin>
			break;
 8003a72:	e004      	b.n	8003a7e <Control_Light+0xde>
		return;
 8003a74:	bf00      	nop
 8003a76:	e002      	b.n	8003a7e <Control_Light+0xde>
		return;
 8003a78:	bf00      	nop
 8003a7a:	e000      	b.n	8003a7e <Control_Light+0xde>
		return;
 8003a7c:	bf00      	nop
	}
}
 8003a7e:	3718      	adds	r7, #24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	080106cc 	.word	0x080106cc
 8003a88:	080106d4 	.word	0x080106d4
 8003a8c:	40020c00 	.word	0x40020c00

08003a90 <Control_Buzzer_Start>:

void Control_Buzzer_Start(){
 8003a90:	b590      	push	{r4, r7, lr}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af02      	add	r7, sp, #8
	//printf("start buzzer\r\n");
	xTimerStart(buzzerTimerHandle, portMAX_DELAY);
 8003a96:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac0 <Control_Buzzer_Start+0x30>)
 8003a98:	681c      	ldr	r4, [r3, #0]
 8003a9a:	f007 fcd5 	bl	800b448 <xTaskGetTickCount>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	4620      	mov	r0, r4
 8003aac:	f008 fa9e 	bl	800bfec <xTimerGenericCommand>
	gBuzzerFlag = 1;
 8003ab0:	4b04      	ldr	r3, [pc, #16]	@ (8003ac4 <Control_Buzzer_Start+0x34>)
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	701a      	strb	r2, [r3, #0]
}
 8003ab6:	bf00      	nop
 8003ab8:	3704      	adds	r7, #4
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd90      	pop	{r4, r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20000350 	.word	0x20000350
 8003ac4:	20000354 	.word	0x20000354

08003ac8 <Control_Buzzer_Stop>:

void Control_Buzzer_Stop(){
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af02      	add	r7, sp, #8
	//printf("stop buzzer\r\n");
	xTimerStop(buzzerTimerHandle, portMAX_DELAY);
 8003ace:	4b0b      	ldr	r3, [pc, #44]	@ (8003afc <Control_Buzzer_Stop+0x34>)
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	2300      	movs	r3, #0
 8003ada:	2200      	movs	r2, #0
 8003adc:	2103      	movs	r1, #3
 8003ade:	f008 fa85 	bl	800bfec <xTimerGenericCommand>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003ae8:	4805      	ldr	r0, [pc, #20]	@ (8003b00 <Control_Buzzer_Stop+0x38>)
 8003aea:	f002 fecd 	bl	8006888 <HAL_GPIO_WritePin>
	gBuzzerFlag = 0;
 8003aee:	4b05      	ldr	r3, [pc, #20]	@ (8003b04 <Control_Buzzer_Stop+0x3c>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	701a      	strb	r2, [r3, #0]
}
 8003af4:	bf00      	nop
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20000350 	.word	0x20000350
 8003b00:	40020000 	.word	0x40020000
 8003b04:	20000354 	.word	0x20000354

08003b08 <Control_Buzzer>:

//test on server: mosquitto_pub -h "18.185.92.160" -p 1883 -u test -P test -t "0001" -m "{\"cmd\":\"buzzer\", \"state\":1}"
void Control_Buzzer(cJSON *obj){
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
	cJSON *stateObj = cJSON_GetObjectItem(obj, "state");
 8003b10:	490d      	ldr	r1, [pc, #52]	@ (8003b48 <Control_Buzzer+0x40>)
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7ff f9a4 	bl	8002e60 <cJSON_GetObjectItem>
 8003b18:	60f8      	str	r0, [r7, #12]
	if (!stateObj)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00e      	beq.n	8003b3e <Control_Buzzer+0x36>
		return;

	int state = stateObj->valueint;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	60bb      	str	r3, [r7, #8]

	if (state == 1)
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d102      	bne.n	8003b32 <Control_Buzzer+0x2a>
	{
		Control_Buzzer_Start();
 8003b2c:	f7ff ffb0 	bl	8003a90 <Control_Buzzer_Start>
 8003b30:	e006      	b.n	8003b40 <Control_Buzzer+0x38>
	}
	else if (state == 0)
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d103      	bne.n	8003b40 <Control_Buzzer+0x38>
	{
		Control_Buzzer_Stop();
 8003b38:	f7ff ffc6 	bl	8003ac8 <Control_Buzzer_Stop>
 8003b3c:	e000      	b.n	8003b40 <Control_Buzzer+0x38>
		return;
 8003b3e:	bf00      	nop
	}
}
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	080106d4 	.word	0x080106d4

08003b4c <Control_Date>:

//test on server: mosquitto_pub -h "18.185.92.160" -p 1883 -u test -P test -t "0001" -m "{\"cmd\":\"date\", \"time\":1736200264}"
void Control_Date(cJSON *obj){
 8003b4c:	b5b0      	push	{r4, r5, r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
	cJSON *timeObj = cJSON_GetObjectItem(obj, "time");
 8003b54:	4912      	ldr	r1, [pc, #72]	@ (8003ba0 <Control_Date+0x54>)
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7ff f982 	bl	8002e60 <cJSON_GetObjectItem>
 8003b5c:	60f8      	str	r0, [r7, #12]
	if (!timeObj)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d018      	beq.n	8003b96 <Control_Date+0x4a>
		return;

	uint32_t time = timeObj->valueint;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	60bb      	str	r3, [r7, #8]

	xSemaphoreTake(semHandle, portMAX_DELAY);
 8003b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8003ba4 <Control_Date+0x58>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003b72:	4618      	mov	r0, r3
 8003b74:	f006 fec2 	bl	800a8fc <xQueueSemaphoreTake>

	gInfo.cur_time = time;
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	461c      	mov	r4, r3
 8003b7e:	4615      	mov	r5, r2
 8003b80:	4b09      	ldr	r3, [pc, #36]	@ (8003ba8 <Control_Date+0x5c>)
 8003b82:	e9c3 4502 	strd	r4, r5, [r3, #8]

	xSemaphoreGive(semHandle);
 8003b86:	4b07      	ldr	r3, [pc, #28]	@ (8003ba4 <Control_Date+0x58>)
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2100      	movs	r1, #0
 8003b90:	f006 fc32 	bl	800a3f8 <xQueueGenericSend>
 8003b94:	e000      	b.n	8003b98 <Control_Date+0x4c>
		return;
 8003b96:	bf00      	nop
}
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bdb0      	pop	{r4, r5, r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	080106dc 	.word	0x080106dc
 8003ba4:	20000348 	.word	0x20000348
 8003ba8:	20000028 	.word	0x20000028

08003bac <Control_Alarm>:

//test on server:
//mosquitto_pub -h "18.185.92.160" -p 1883 -u test -P test -t "0001" -m "{\"cmd\":\"alarm\", \"hour\":10, \"min\":28}"
void Control_Alarm(cJSON *obj){
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
	//printf("control alarm\r\n");
	cJSON *hourObj = cJSON_GetObjectItem(obj, "hour");
 8003bb4:	4910      	ldr	r1, [pc, #64]	@ (8003bf8 <Control_Alarm+0x4c>)
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7ff f952 	bl	8002e60 <cJSON_GetObjectItem>
 8003bbc:	6178      	str	r0, [r7, #20]
	cJSON *minObj = cJSON_GetObjectItem(obj, "min");
 8003bbe:	490f      	ldr	r1, [pc, #60]	@ (8003bfc <Control_Alarm+0x50>)
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f7ff f94d 	bl	8002e60 <cJSON_GetObjectItem>
 8003bc6:	6138      	str	r0, [r7, #16]
	if (!hourObj || !minObj)
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00f      	beq.n	8003bee <Control_Alarm+0x42>
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00c      	beq.n	8003bee <Control_Alarm+0x42>
		return;

	uint8_t hour = hourObj->valueint;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	73fb      	strb	r3, [r7, #15]
	uint8_t min = minObj->valueint;
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	73bb      	strb	r3, [r7, #14]

	Add_Alarm_Link(hour, min);
 8003be0:	7bba      	ldrb	r2, [r7, #14]
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
 8003be4:	4611      	mov	r1, r2
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 ffe4 	bl	8004bb4 <Add_Alarm_Link>
 8003bec:	e000      	b.n	8003bf0 <Control_Alarm+0x44>
		return;
 8003bee:	bf00      	nop
}
 8003bf0:	3718      	adds	r7, #24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	080106e4 	.word	0x080106e4
 8003bfc:	080106ec 	.word	0x080106ec

08003c00 <Control_Note>:

//test on server:
//mosquitto_pub -h "18.185.92.160" -p 1883 -u test -P test -t "0001" -m "{\"cmd\":\"note\", \"hour\":10, \"min\":28, \"event\":\"learn german\"}"
void Control_Note(cJSON *obj)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08a      	sub	sp, #40	@ 0x28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
	//printf("control note\r\n");
	cJSON *hourObj = cJSON_GetObjectItem(obj, "hour");
 8003c08:	491f      	ldr	r1, [pc, #124]	@ (8003c88 <Control_Note+0x88>)
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff f928 	bl	8002e60 <cJSON_GetObjectItem>
 8003c10:	6278      	str	r0, [r7, #36]	@ 0x24
	cJSON *minObj = cJSON_GetObjectItem(obj, "min");
 8003c12:	491e      	ldr	r1, [pc, #120]	@ (8003c8c <Control_Note+0x8c>)
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff f923 	bl	8002e60 <cJSON_GetObjectItem>
 8003c1a:	6238      	str	r0, [r7, #32]
	cJSON *eventObj = cJSON_GetObjectItem(obj, "event");
 8003c1c:	491c      	ldr	r1, [pc, #112]	@ (8003c90 <Control_Note+0x90>)
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7ff f91e 	bl	8002e60 <cJSON_GetObjectItem>
 8003c24:	61f8      	str	r0, [r7, #28]
	if (!hourObj || !minObj || !eventObj)
 8003c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d029      	beq.n	8003c80 <Control_Note+0x80>
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d026      	beq.n	8003c80 <Control_Note+0x80>
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d023      	beq.n	8003c80 <Control_Note+0x80>
		return;

	uint8_t hour = hourObj->valueint;
 8003c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	76fb      	strb	r3, [r7, #27]
	uint8_t min = minObj->valueint;
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	76bb      	strb	r3, [r7, #26]
	char event[16] = {0};
 8003c44:	2300      	movs	r3, #0
 8003c46:	60bb      	str	r3, [r7, #8]
 8003c48:	f107 030c 	add.w	r3, r7, #12
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	605a      	str	r2, [r3, #4]
 8003c52:	609a      	str	r2, [r3, #8]
	//event = pvPortMalloc(sizeof(uint8_t)*10);
	strcpy(event, eventObj->valuestring);
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	691a      	ldr	r2, [r3, #16]
 8003c58:	f107 0308 	add.w	r3, r7, #8
 8003c5c:	4611      	mov	r1, r2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f00a f865 	bl	800dd2e <strcpy>
	printf("event: %s\r\n", event);
 8003c64:	f107 0308 	add.w	r3, r7, #8
 8003c68:	4619      	mov	r1, r3
 8003c6a:	480a      	ldr	r0, [pc, #40]	@ (8003c94 <Control_Note+0x94>)
 8003c6c:	f009 fb36 	bl	800d2dc <iprintf>

	Add_Note_Link(hour, min, event);
 8003c70:	f107 0208 	add.w	r2, r7, #8
 8003c74:	7eb9      	ldrb	r1, [r7, #26]
 8003c76:	7efb      	ldrb	r3, [r7, #27]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f001 f877 	bl	8004d6c <Add_Note_Link>
 8003c7e:	e000      	b.n	8003c82 <Control_Note+0x82>
		return;
 8003c80:	bf00      	nop
}
 8003c82:	3728      	adds	r7, #40	@ 0x28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	080106e4 	.word	0x080106e4
 8003c8c:	080106ec 	.word	0x080106ec
 8003c90:	080106f0 	.word	0x080106f0
 8003c94:	080106f8 	.word	0x080106f8

08003c98 <Parse_Message>:

void Parse_Message(char *msg){
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b0cc      	sub	sp, #304	@ 0x130
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003ca2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003ca6:	6018      	str	r0, [r3, #0]
	//MQTTSUBRECV:0,"0001",10,helloworld
	char *p = msg, *p1 ,*p2;  //p1 point to 10, p2 point to helloworld
 8003ca8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003cac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	int comma = 0, len = 0;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	char str[8] = {0}; 
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	char content[256] = {0};
 8003cce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003cd2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	22fc      	movs	r2, #252	@ 0xfc
 8003cde:	2100      	movs	r1, #0
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f009 fb8a 	bl	800d3fa <memset>
	
	while (*p != '\0')
 8003ce6:	e02a      	b.n	8003d3e <Parse_Message+0xa6>
	{
		if (*p == ',')
 8003ce8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b2c      	cmp	r3, #44	@ 0x2c
 8003cf0:	d104      	bne.n	8003cfc <Parse_Message+0x64>
			comma++;
 8003cf2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
		
		if (comma == 2 && *p == ',')
 8003cfc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d109      	bne.n	8003d18 <Parse_Message+0x80>
 8003d04:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	2b2c      	cmp	r3, #44	@ 0x2c
 8003d0c:	d104      	bne.n	8003d18 <Parse_Message+0x80>
			p1 = p + 1;
 8003d0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003d12:	3301      	adds	r3, #1
 8003d14:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
		
		if (comma == 3 && *p == ',')
 8003d18:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d1c:	2b03      	cmp	r3, #3
 8003d1e:	d109      	bne.n	8003d34 <Parse_Message+0x9c>
 8003d20:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2b2c      	cmp	r3, #44	@ 0x2c
 8003d28:	d104      	bne.n	8003d34 <Parse_Message+0x9c>
			p2 = p + 1;
 8003d2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003d2e:	3301      	adds	r3, #1
 8003d30:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		
		p++;
 8003d34:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003d38:	3301      	adds	r3, #1
 8003d3a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	while (*p != '\0')
 8003d3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1cf      	bne.n	8003ce8 <Parse_Message+0x50>
	}
	
	memcpy(str, p1, p2 - p1);  //get length 10
 8003d48:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8003d4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	461a      	mov	r2, r3
 8003d54:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003d58:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f009 ffd8 	bl	800dd12 <memcpy>
	len = atoi(str);
 8003d62:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003d66:	4618      	mov	r0, r3
 8003d68:	f009 f88e 	bl	800ce88 <atoi>
 8003d6c:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
	
	memcpy(content, p2, len);   //get content hello world
 8003d70:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8003d74:	f107 030c 	add.w	r3, r7, #12
 8003d78:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f009 ffc8 	bl	800dd12 <memcpy>

	cJSON *jsonObject = cJSON_Parse(content);
 8003d82:	f107 030c 	add.w	r3, r7, #12
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fe f95a 	bl	8002040 <cJSON_Parse>
 8003d8c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
	if (jsonObject == NULL)
 8003d90:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d104      	bne.n	8003da2 <Parse_Message+0x10a>
	{
		cJSON_Delete(jsonObject);
 8003d98:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8003d9c:	f7fd f9f4 	bl	8001188 <cJSON_Delete>
 8003da0:	e066      	b.n	8003e70 <Parse_Message+0x1d8>
		return;
	}
	
	cJSON *cmdObject = cJSON_GetObjectItem(jsonObject, "cmd");
 8003da2:	4935      	ldr	r1, [pc, #212]	@ (8003e78 <Parse_Message+0x1e0>)
 8003da4:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8003da8:	f7ff f85a 	bl	8002e60 <cJSON_GetObjectItem>
 8003dac:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
	if (!strcmp(cmdObject->valuestring, "menu"))
 8003db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	4931      	ldr	r1, [pc, #196]	@ (8003e7c <Parse_Message+0x1e4>)
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fc fa11 	bl	80001e0 <strcmp>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d104      	bne.n	8003dce <Parse_Message+0x136>
	{
		Control_Menu(jsonObject);
 8003dc4:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8003dc8:	f7ff fd9a 	bl	8003900 <Control_Menu>
 8003dcc:	e04c      	b.n	8003e68 <Parse_Message+0x1d0>
	}
	else if (!strcmp(cmdObject->valuestring, "light"))
 8003dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	492a      	ldr	r1, [pc, #168]	@ (8003e80 <Parse_Message+0x1e8>)
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fc fa02 	bl	80001e0 <strcmp>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d104      	bne.n	8003dec <Parse_Message+0x154>
	{
		Control_Light(jsonObject);
 8003de2:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8003de6:	f7ff fddb 	bl	80039a0 <Control_Light>
 8003dea:	e03d      	b.n	8003e68 <Parse_Message+0x1d0>
	}
	else if (!strcmp(cmdObject->valuestring, "buzzer"))
 8003dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	4924      	ldr	r1, [pc, #144]	@ (8003e84 <Parse_Message+0x1ec>)
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7fc f9f3 	bl	80001e0 <strcmp>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d104      	bne.n	8003e0a <Parse_Message+0x172>
	{
		Control_Buzzer(jsonObject);
 8003e00:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8003e04:	f7ff fe80 	bl	8003b08 <Control_Buzzer>
 8003e08:	e02e      	b.n	8003e68 <Parse_Message+0x1d0>
	}
	else if (!strcmp(cmdObject->valuestring, "date"))
 8003e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	491d      	ldr	r1, [pc, #116]	@ (8003e88 <Parse_Message+0x1f0>)
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fc f9e4 	bl	80001e0 <strcmp>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d104      	bne.n	8003e28 <Parse_Message+0x190>
	{
		Control_Date(jsonObject);
 8003e1e:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8003e22:	f7ff fe93 	bl	8003b4c <Control_Date>
 8003e26:	e01f      	b.n	8003e68 <Parse_Message+0x1d0>
	}
	else if (!strcmp(cmdObject->valuestring, "alarm"))
 8003e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	4917      	ldr	r1, [pc, #92]	@ (8003e8c <Parse_Message+0x1f4>)
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fc f9d5 	bl	80001e0 <strcmp>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d104      	bne.n	8003e46 <Parse_Message+0x1ae>
	{
		Control_Alarm(jsonObject);
 8003e3c:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8003e40:	f7ff feb4 	bl	8003bac <Control_Alarm>
 8003e44:	e010      	b.n	8003e68 <Parse_Message+0x1d0>
	}
	else if (!strcmp(cmdObject->valuestring, "note"))
 8003e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	4910      	ldr	r1, [pc, #64]	@ (8003e90 <Parse_Message+0x1f8>)
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fc f9c6 	bl	80001e0 <strcmp>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d106      	bne.n	8003e68 <Parse_Message+0x1d0>
	{
		printf("parse node\r\n");
 8003e5a:	480e      	ldr	r0, [pc, #56]	@ (8003e94 <Parse_Message+0x1fc>)
 8003e5c:	f009 faa6 	bl	800d3ac <puts>
		Control_Note(jsonObject);
 8003e60:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8003e64:	f7ff fecc 	bl	8003c00 <Control_Note>
	}
	
	cJSON_Delete(jsonObject);
 8003e68:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8003e6c:	f7fd f98c 	bl	8001188 <cJSON_Delete>
	
}
 8003e70:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	08010704 	.word	0x08010704
 8003e7c:	08010708 	.word	0x08010708
 8003e80:	08010710 	.word	0x08010710
 8003e84:	08010718 	.word	0x08010718
 8003e88:	08010720 	.word	0x08010720
 8003e8c:	08010728 	.word	0x08010728
 8003e90:	08010730 	.word	0x08010730
 8003e94:	08010738 	.word	0x08010738

08003e98 <ESP8266_Init>:
uint16_t g_Index;

#define MQTT_SUCCESS 0
#define MQTT_FAILURE 1

void ESP8266_Init(void){
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003ea2:	4812      	ldr	r0, [pc, #72]	@ (8003eec <ESP8266_Init+0x54>)
 8003ea4:	f002 fcf0 	bl	8006888 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8003ea8:	2014      	movs	r0, #20
 8003eaa:	f002 f9a1 	bl	80061f0 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003eb4:	480d      	ldr	r0, [pc, #52]	@ (8003eec <ESP8266_Init+0x54>)
 8003eb6:	f002 fce7 	bl	8006888 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8003eba:	2014      	movs	r0, #20
 8003ebc:	f002 f998 	bl	80061f0 <HAL_Delay>

	ESP8266_Response("csum 0xde\r\n", 500);
 8003ec0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003ec4:	480a      	ldr	r0, [pc, #40]	@ (8003ef0 <ESP8266_Init+0x58>)
 8003ec6:	f000 f819 	bl	8003efc <ESP8266_Response>
	ESP8266_SetBaud(115200);
 8003eca:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8003ece:	f000 f85f 	bl	8003f90 <ESP8266_SetBaud>
	ESP8266_Response("ready\r\n", 500);
 8003ed2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003ed6:	4807      	ldr	r0, [pc, #28]	@ (8003ef4 <ESP8266_Init+0x5c>)
 8003ed8:	f000 f810 	bl	8003efc <ESP8266_Response>

	//close echo
	ESP8266_Send_Cmd("ATE0");
 8003edc:	4806      	ldr	r0, [pc, #24]	@ (8003ef8 <ESP8266_Init+0x60>)
 8003ede:	f000 f897 	bl	8004010 <ESP8266_Send_Cmd>

	ESP8266_Refresh_Buffer();
 8003ee2:	f000 f87d 	bl	8003fe0 <ESP8266_Refresh_Buffer>
}
 8003ee6:	bf00      	nop
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	40020400 	.word	0x40020400
 8003ef0:	08010744 	.word	0x08010744
 8003ef4:	08010750 	.word	0x08010750
 8003ef8:	08010758 	.word	0x08010758

08003efc <ESP8266_Response>:

uint8_t ESP8266_Response(const char *msg, uint32_t timeout){
 8003efc:	b590      	push	{r4, r7, lr}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
	//printf("baud: %d\n", (int)huart3.Init.BaudRate);
	uint32_t Cur_Tick = HAL_GetTick();
 8003f06:	f002 f967 	bl	80061d8 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]
	uint8_t data, i = 0;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	75fb      	strb	r3, [r7, #23]
	while(1){
		if(HAL_GetTick() - Cur_Tick >= timeout){
 8003f10:	f002 f962 	bl	80061d8 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d801      	bhi.n	8003f24 <ESP8266_Response+0x28>
			return 0;  //failed
 8003f20:	2300      	movs	r3, #0
 8003f22:	e02b      	b.n	8003f7c <ESP8266_Response+0x80>
		}

		if(HAL_UART_Receive(&huart3, &data, 1, 10) == HAL_TIMEOUT) continue;
 8003f24:	f107 010f 	add.w	r1, r7, #15
 8003f28:	230a      	movs	r3, #10
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	4815      	ldr	r0, [pc, #84]	@ (8003f84 <ESP8266_Response+0x88>)
 8003f2e:	f004 feb0 	bl	8008c92 <HAL_UART_Receive>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b03      	cmp	r3, #3
 8003f36:	d01f      	beq.n	8003f78 <ESP8266_Response+0x7c>
		g_UART_Buf[g_Index++] = data;
 8003f38:	4b13      	ldr	r3, [pc, #76]	@ (8003f88 <ESP8266_Response+0x8c>)
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	1c5a      	adds	r2, r3, #1
 8003f3e:	b291      	uxth	r1, r2
 8003f40:	4a11      	ldr	r2, [pc, #68]	@ (8003f88 <ESP8266_Response+0x8c>)
 8003f42:	8011      	strh	r1, [r2, #0]
 8003f44:	461a      	mov	r2, r3
 8003f46:	7bf9      	ldrb	r1, [r7, #15]
 8003f48:	4b10      	ldr	r3, [pc, #64]	@ (8003f8c <ESP8266_Response+0x90>)
 8003f4a:	5499      	strb	r1, [r3, r2]
		if(data == msg[i]){
 8003f4c:	7dfb      	ldrb	r3, [r7, #23]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	4413      	add	r3, r2
 8003f52:	781a      	ldrb	r2, [r3, #0]
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d10b      	bne.n	8003f72 <ESP8266_Response+0x76>
			i++;
 8003f5a:	7dfb      	ldrb	r3, [r7, #23]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	75fb      	strb	r3, [r7, #23]
			if(i == strlen(msg))
 8003f60:	7dfc      	ldrb	r4, [r7, #23]
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7fc f934 	bl	80001d0 <strlen>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	429c      	cmp	r4, r3
 8003f6c:	d1d0      	bne.n	8003f10 <ESP8266_Response+0x14>
				return 1;  //succeed
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e004      	b.n	8003f7c <ESP8266_Response+0x80>
		}
		else{
			i = 0;
 8003f72:	2300      	movs	r3, #0
 8003f74:	75fb      	strb	r3, [r7, #23]
 8003f76:	e7cb      	b.n	8003f10 <ESP8266_Response+0x14>
		if(HAL_UART_Receive(&huart3, &data, 1, 10) == HAL_TIMEOUT) continue;
 8003f78:	bf00      	nop
		if(HAL_GetTick() - Cur_Tick >= timeout){
 8003f7a:	e7c9      	b.n	8003f10 <ESP8266_Response+0x14>
		}
	}

}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	371c      	adds	r7, #28
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd90      	pop	{r4, r7, pc}
 8003f84:	2000054c 	.word	0x2000054c
 8003f88:	20000340 	.word	0x20000340
 8003f8c:	20000140 	.word	0x20000140

08003f90 <ESP8266_SetBaud>:

void ESP8266_SetBaud(uint32_t baud){
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
	  huart3.Instance = USART3;
 8003f98:	4b0f      	ldr	r3, [pc, #60]	@ (8003fd8 <ESP8266_SetBaud+0x48>)
 8003f9a:	4a10      	ldr	r2, [pc, #64]	@ (8003fdc <ESP8266_SetBaud+0x4c>)
 8003f9c:	601a      	str	r2, [r3, #0]
	  huart3.Init.BaudRate = baud;
 8003f9e:	4a0e      	ldr	r2, [pc, #56]	@ (8003fd8 <ESP8266_SetBaud+0x48>)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6053      	str	r3, [r2, #4]
	  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd8 <ESP8266_SetBaud+0x48>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	609a      	str	r2, [r3, #8]
	  huart3.Init.StopBits = UART_STOPBITS_1;
 8003faa:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd8 <ESP8266_SetBaud+0x48>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	60da      	str	r2, [r3, #12]
	  huart3.Init.Parity = UART_PARITY_NONE;
 8003fb0:	4b09      	ldr	r3, [pc, #36]	@ (8003fd8 <ESP8266_SetBaud+0x48>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	611a      	str	r2, [r3, #16]
	  huart3.Init.Mode = UART_MODE_TX_RX;
 8003fb6:	4b08      	ldr	r3, [pc, #32]	@ (8003fd8 <ESP8266_SetBaud+0x48>)
 8003fb8:	220c      	movs	r2, #12
 8003fba:	615a      	str	r2, [r3, #20]
	  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fbc:	4b06      	ldr	r3, [pc, #24]	@ (8003fd8 <ESP8266_SetBaud+0x48>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	619a      	str	r2, [r3, #24]
	  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fc2:	4b05      	ldr	r3, [pc, #20]	@ (8003fd8 <ESP8266_SetBaud+0x48>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	61da      	str	r2, [r3, #28]
	  HAL_UART_Init(&huart3);
 8003fc8:	4803      	ldr	r0, [pc, #12]	@ (8003fd8 <ESP8266_SetBaud+0x48>)
 8003fca:	f004 fd87 	bl	8008adc <HAL_UART_Init>
}
 8003fce:	bf00      	nop
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	2000054c 	.word	0x2000054c
 8003fdc:	40004800 	.word	0x40004800

08003fe0 <ESP8266_Refresh_Buffer>:

void ESP8266_Refresh_Buffer(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
	printf("%s\r\n", g_UART_Buf);
 8003fe4:	4907      	ldr	r1, [pc, #28]	@ (8004004 <ESP8266_Refresh_Buffer+0x24>)
 8003fe6:	4808      	ldr	r0, [pc, #32]	@ (8004008 <ESP8266_Refresh_Buffer+0x28>)
 8003fe8:	f009 f978 	bl	800d2dc <iprintf>

	g_Index = 0;
 8003fec:	4b07      	ldr	r3, [pc, #28]	@ (800400c <ESP8266_Refresh_Buffer+0x2c>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	801a      	strh	r2, [r3, #0]
	memset(g_UART_Buf, 0, sizeof(g_UART_Buf));
 8003ff2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	4802      	ldr	r0, [pc, #8]	@ (8004004 <ESP8266_Refresh_Buffer+0x24>)
 8003ffa:	f009 f9fe 	bl	800d3fa <memset>
}
 8003ffe:	bf00      	nop
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	20000140 	.word	0x20000140
 8004008:	08010760 	.word	0x08010760
 800400c:	20000340 	.word	0x20000340

08004010 <ESP8266_Send_Cmd>:

void ESP8266_Send_Cmd(const char *cmd)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)cmd, strlen(cmd), HAL_MAX_DELAY);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7fc f8d9 	bl	80001d0 <strlen>
 800401e:	4603      	mov	r3, r0
 8004020:	b29a      	uxth	r2, r3
 8004022:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004026:	6879      	ldr	r1, [r7, #4]
 8004028:	4806      	ldr	r0, [pc, #24]	@ (8004044 <ESP8266_Send_Cmd+0x34>)
 800402a:	f004 fda7 	bl	8008b7c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);
 800402e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004032:	2202      	movs	r2, #2
 8004034:	4904      	ldr	r1, [pc, #16]	@ (8004048 <ESP8266_Send_Cmd+0x38>)
 8004036:	4803      	ldr	r0, [pc, #12]	@ (8004044 <ESP8266_Send_Cmd+0x34>)
 8004038:	f004 fda0 	bl	8008b7c <HAL_UART_Transmit>
}
 800403c:	bf00      	nop
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	2000054c 	.word	0x2000054c
 8004048:	08010768 	.word	0x08010768

0800404c <ESP8266_Connect_AP>:

uint8_t ESP8266_Connect_AP(const char *ssid, const char *passwd){
 800404c:	b580      	push	{r7, lr}
 800404e:	b0a2      	sub	sp, #136	@ 0x88
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
	char cmd[128] = {0};
 8004056:	2300      	movs	r3, #0
 8004058:	60bb      	str	r3, [r7, #8]
 800405a:	f107 030c 	add.w	r3, r7, #12
 800405e:	227c      	movs	r2, #124	@ 0x7c
 8004060:	2100      	movs	r1, #0
 8004062:	4618      	mov	r0, r3
 8004064:	f009 f9c9 	bl	800d3fa <memset>
	sprintf(cmd, "AT+CWJAP=\"%s\",\"%s\"", ssid, passwd);
 8004068:	f107 0008 	add.w	r0, r7, #8
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	490e      	ldr	r1, [pc, #56]	@ (80040ac <ESP8266_Connect_AP+0x60>)
 8004072:	f008 ffcb 	bl	800d00c <siprintf>
	ESP8266_Send_Cmd(cmd);
 8004076:	f107 0308 	add.w	r3, r7, #8
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff ffc8 	bl	8004010 <ESP8266_Send_Cmd>
	if (ESP8266_Response("OK\r\n", 60000))
 8004080:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8004084:	480a      	ldr	r0, [pc, #40]	@ (80040b0 <ESP8266_Connect_AP+0x64>)
 8004086:	f7ff ff39 	bl	8003efc <ESP8266_Response>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <ESP8266_Connect_AP+0x4c>
	{
		ESP8266_Refresh_Buffer();
 8004090:	f7ff ffa6 	bl	8003fe0 <ESP8266_Refresh_Buffer>
		return 1;
 8004094:	2301      	movs	r3, #1
 8004096:	e005      	b.n	80040a4 <ESP8266_Connect_AP+0x58>
	}
	else
	{
		ESP8266_Refresh_Buffer();
 8004098:	f7ff ffa2 	bl	8003fe0 <ESP8266_Refresh_Buffer>
		printf("Failed to connect wifi\r\n");
 800409c:	4805      	ldr	r0, [pc, #20]	@ (80040b4 <ESP8266_Connect_AP+0x68>)
 800409e:	f009 f985 	bl	800d3ac <puts>
		return 0;
 80040a2:	2300      	movs	r3, #0
	}
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3788      	adds	r7, #136	@ 0x88
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	0801076c 	.word	0x0801076c
 80040b0:	08010780 	.word	0x08010780
 80040b4:	08010788 	.word	0x08010788

080040b8 <ESP8266_Connect_MQTT>:


uint8_t ESP8266_Connect_MQTT(const char *ip, int port, const char *user, const char *passwd)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b0a4      	sub	sp, #144	@ 0x90
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
 80040c4:	603b      	str	r3, [r7, #0]
	char cmd[128] = {0};
 80040c6:	2300      	movs	r3, #0
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	f107 0314 	add.w	r3, r7, #20
 80040ce:	227c      	movs	r2, #124	@ 0x7c
 80040d0:	2100      	movs	r1, #0
 80040d2:	4618      	mov	r0, r3
 80040d4:	f009 f991 	bl	800d3fa <memset>

	sprintf(cmd, "AT+MQTTUSERCFG=0,1,\"0001\",\"%s\",\"%s\",0,0,\" \"", user, passwd);
 80040d8:	f107 0010 	add.w	r0, r7, #16
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	4921      	ldr	r1, [pc, #132]	@ (8004168 <ESP8266_Connect_MQTT+0xb0>)
 80040e2:	f008 ff93 	bl	800d00c <siprintf>

	ESP8266_Send_Cmd(cmd);
 80040e6:	f107 0310 	add.w	r3, r7, #16
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7ff ff90 	bl	8004010 <ESP8266_Send_Cmd>

	if (ESP8266_Response("OK\r\n", 5000))
 80040f0:	f241 3188 	movw	r1, #5000	@ 0x1388
 80040f4:	481d      	ldr	r0, [pc, #116]	@ (800416c <ESP8266_Connect_MQTT+0xb4>)
 80040f6:	f7ff ff01 	bl	8003efc <ESP8266_Response>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d002      	beq.n	8004106 <ESP8266_Connect_MQTT+0x4e>
	{
		ESP8266_Refresh_Buffer();
 8004100:	f7ff ff6e 	bl	8003fe0 <ESP8266_Refresh_Buffer>
 8004104:	e004      	b.n	8004110 <ESP8266_Connect_MQTT+0x58>
	}
	else
	{
		ESP8266_Refresh_Buffer();
 8004106:	f7ff ff6b 	bl	8003fe0 <ESP8266_Refresh_Buffer>
		printf("CONFIG MQTT FAILURE\r\n");
 800410a:	4819      	ldr	r0, [pc, #100]	@ (8004170 <ESP8266_Connect_MQTT+0xb8>)
 800410c:	f009 f94e 	bl	800d3ac <puts>
	}

	memset(cmd, 0, sizeof(cmd));
 8004110:	f107 0310 	add.w	r3, r7, #16
 8004114:	2280      	movs	r2, #128	@ 0x80
 8004116:	2100      	movs	r1, #0
 8004118:	4618      	mov	r0, r3
 800411a:	f009 f96e 	bl	800d3fa <memset>

	sprintf(cmd, "AT+MQTTCONN=0,\"%s\",%d,1", ip, port);
 800411e:	f107 0010 	add.w	r0, r7, #16
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	4913      	ldr	r1, [pc, #76]	@ (8004174 <ESP8266_Connect_MQTT+0xbc>)
 8004128:	f008 ff70 	bl	800d00c <siprintf>

	ESP8266_Send_Cmd(cmd);
 800412c:	f107 0310 	add.w	r3, r7, #16
 8004130:	4618      	mov	r0, r3
 8004132:	f7ff ff6d 	bl	8004010 <ESP8266_Send_Cmd>

	if (ESP8266_Response("OK", 10000))
 8004136:	f242 7110 	movw	r1, #10000	@ 0x2710
 800413a:	480f      	ldr	r0, [pc, #60]	@ (8004178 <ESP8266_Connect_MQTT+0xc0>)
 800413c:	f7ff fede 	bl	8003efc <ESP8266_Response>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d006      	beq.n	8004154 <ESP8266_Connect_MQTT+0x9c>
	{
		ESP8266_Refresh_Buffer();
 8004146:	f7ff ff4b 	bl	8003fe0 <ESP8266_Refresh_Buffer>
		printf("CONNECT MQTT SUCCEED\r\n");
 800414a:	480c      	ldr	r0, [pc, #48]	@ (800417c <ESP8266_Connect_MQTT+0xc4>)
 800414c:	f009 f92e 	bl	800d3ac <puts>
		return 1;
 8004150:	2301      	movs	r3, #1
 8004152:	e005      	b.n	8004160 <ESP8266_Connect_MQTT+0xa8>
	}
	else
	{
		ESP8266_Refresh_Buffer();
 8004154:	f7ff ff44 	bl	8003fe0 <ESP8266_Refresh_Buffer>
		printf("CONNECT MQTT FAILURE\r\n");
 8004158:	4809      	ldr	r0, [pc, #36]	@ (8004180 <ESP8266_Connect_MQTT+0xc8>)
 800415a:	f009 f927 	bl	800d3ac <puts>
		return 0;
 800415e:	2300      	movs	r3, #0
	}
}
 8004160:	4618      	mov	r0, r3
 8004162:	3790      	adds	r7, #144	@ 0x90
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	080107a0 	.word	0x080107a0
 800416c:	08010780 	.word	0x08010780
 8004170:	080107cc 	.word	0x080107cc
 8004174:	080107e4 	.word	0x080107e4
 8004178:	080107fc 	.word	0x080107fc
 800417c:	08010800 	.word	0x08010800
 8004180:	08010818 	.word	0x08010818

08004184 <ESP8266_Publish>:

void ESP8266_Publish(const char *topic, const char *msg)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b0c2      	sub	sp, #264	@ 0x108
 8004188:	af00      	add	r7, sp, #0
 800418a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800418e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004192:	6018      	str	r0, [r3, #0]
 8004194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800419c:	6019      	str	r1, [r3, #0]
	char cmd[256] = {0};
 800419e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041a2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	3304      	adds	r3, #4
 80041ac:	22fc      	movs	r2, #252	@ 0xfc
 80041ae:	2100      	movs	r1, #0
 80041b0:	4618      	mov	r0, r3
 80041b2:	f009 f922 	bl	800d3fa <memset>

	sprintf(cmd, "AT+MQTTPUB=0,\"%s\",\"%s\",0,0", topic, msg);
 80041b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041be:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80041c2:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80041c6:	f107 0008 	add.w	r0, r7, #8
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6812      	ldr	r2, [r2, #0]
 80041ce:	4906      	ldr	r1, [pc, #24]	@ (80041e8 <ESP8266_Publish+0x64>)
 80041d0:	f008 ff1c 	bl	800d00c <siprintf>

	//printf("%s\r\n", cmd);
	ESP8266_Send_Cmd(cmd);
 80041d4:	f107 0308 	add.w	r3, r7, #8
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff ff19 	bl	8004010 <ESP8266_Send_Cmd>
//	{
//		ESP8266_Refresh_Buffer();
//		printf("PUBLISH FAILURE\r\n");
//		return 0;
//	}
}
 80041de:	bf00      	nop
 80041e0:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	08010830 	.word	0x08010830

080041ec <ESP8266_Subscribe>:

uint8_t ESP8266_Subscribe(const char *topic)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b0a2      	sub	sp, #136	@ 0x88
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
	char cmd[128] = {0};
 80041f4:	2300      	movs	r3, #0
 80041f6:	60bb      	str	r3, [r7, #8]
 80041f8:	f107 030c 	add.w	r3, r7, #12
 80041fc:	227c      	movs	r2, #124	@ 0x7c
 80041fe:	2100      	movs	r1, #0
 8004200:	4618      	mov	r0, r3
 8004202:	f009 f8fa 	bl	800d3fa <memset>

	sprintf(cmd, "AT+MQTTSUB=0,\"%s\",0", topic);
 8004206:	f107 0308 	add.w	r3, r7, #8
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	490f      	ldr	r1, [pc, #60]	@ (800424c <ESP8266_Subscribe+0x60>)
 800420e:	4618      	mov	r0, r3
 8004210:	f008 fefc 	bl	800d00c <siprintf>

	ESP8266_Send_Cmd(cmd);
 8004214:	f107 0308 	add.w	r3, r7, #8
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff fef9 	bl	8004010 <ESP8266_Send_Cmd>

	if (ESP8266_Response("OK\r\n", 10000))
 800421e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8004222:	480b      	ldr	r0, [pc, #44]	@ (8004250 <ESP8266_Subscribe+0x64>)
 8004224:	f7ff fe6a 	bl	8003efc <ESP8266_Response>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <ESP8266_Subscribe+0x4a>
	{
		ESP8266_Refresh_Buffer();
 800422e:	f7ff fed7 	bl	8003fe0 <ESP8266_Refresh_Buffer>
		//printf("SUBSCRIBE SUCCEED\r\n");
		return 1;
 8004232:	2301      	movs	r3, #1
 8004234:	e005      	b.n	8004242 <ESP8266_Subscribe+0x56>
	}
	else
	{
		ESP8266_Refresh_Buffer();
 8004236:	f7ff fed3 	bl	8003fe0 <ESP8266_Refresh_Buffer>
		printf("SUBSCRIBE FAILURE\r\n");
 800423a:	4806      	ldr	r0, [pc, #24]	@ (8004254 <ESP8266_Subscribe+0x68>)
 800423c:	f009 f8b6 	bl	800d3ac <puts>
		return 0;
 8004240:	2300      	movs	r3, #0
	}
}
 8004242:	4618      	mov	r0, r3
 8004244:	3788      	adds	r7, #136	@ 0x88
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	0801084c 	.word	0x0801084c
 8004250:	08010780 	.word	0x08010780
 8004254:	08010860 	.word	0x08010860

08004258 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af02      	add	r7, sp, #8
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
	int timeid = 1;
 800425e:	2301      	movs	r3, #1
 8004260:	607b      	str	r3, [r7, #4]
	dataTimerHandle = xTimerCreate("data", 1000, pdTRUE, &timeid, Data_Increase_Callback);  //create timer
 8004262:	1d3b      	adds	r3, r7, #4
 8004264:	4a16      	ldr	r2, [pc, #88]	@ (80042c0 <MX_FREERTOS_Init+0x68>)
 8004266:	9200      	str	r2, [sp, #0]
 8004268:	2201      	movs	r2, #1
 800426a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800426e:	4815      	ldr	r0, [pc, #84]	@ (80042c4 <MX_FREERTOS_Init+0x6c>)
 8004270:	f007 fe5e 	bl	800bf30 <xTimerCreate>
 8004274:	4603      	mov	r3, r0
 8004276:	4a14      	ldr	r2, [pc, #80]	@ (80042c8 <MX_FREERTOS_Init+0x70>)
 8004278:	6013      	str	r3, [r2, #0]
	int timeid2 = 2;
 800427a:	2302      	movs	r3, #2
 800427c:	603b      	str	r3, [r7, #0]
	buzzerTimerHandle = xTimerCreate("buzzer", 1, pdTRUE, &timeid2, Buzzer_Callback);
 800427e:	463b      	mov	r3, r7
 8004280:	4a12      	ldr	r2, [pc, #72]	@ (80042cc <MX_FREERTOS_Init+0x74>)
 8004282:	9200      	str	r2, [sp, #0]
 8004284:	2201      	movs	r2, #1
 8004286:	2101      	movs	r1, #1
 8004288:	4811      	ldr	r0, [pc, #68]	@ (80042d0 <MX_FREERTOS_Init+0x78>)
 800428a:	f007 fe51 	bl	800bf30 <xTimerCreate>
 800428e:	4603      	mov	r3, r0
 8004290:	4a10      	ldr	r2, [pc, #64]	@ (80042d4 <MX_FREERTOS_Init+0x7c>)
 8004292:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	uartHandle = xQueueCreate(5, sizeof(gUartBuf));
 8004294:	2200      	movs	r2, #0
 8004296:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800429a:	2005      	movs	r0, #5
 800429c:	f006 f84d 	bl	800a33a <xQueueGenericCreate>
 80042a0:	4603      	mov	r3, r0
 80042a2:	4a0d      	ldr	r2, [pc, #52]	@ (80042d8 <MX_FREERTOS_Init+0x80>)
 80042a4:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80042a6:	4a0d      	ldr	r2, [pc, #52]	@ (80042dc <MX_FREERTOS_Init+0x84>)
 80042a8:	2100      	movs	r1, #0
 80042aa:	480d      	ldr	r0, [pc, #52]	@ (80042e0 <MX_FREERTOS_Init+0x88>)
 80042ac:	f005 fdc8 	bl	8009e40 <osThreadNew>
 80042b0:	4603      	mov	r3, r0
 80042b2:	4a0c      	ldr	r2, [pc, #48]	@ (80042e4 <MX_FREERTOS_Init+0x8c>)
 80042b4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80042b6:	bf00      	nop
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	080046dd 	.word	0x080046dd
 80042c4:	080108bc 	.word	0x080108bc
 80042c8:	2000034c 	.word	0x2000034c
 80042cc:	08004725 	.word	0x08004725
 80042d0:	080108c4 	.word	0x080108c4
 80042d4:	20000350 	.word	0x20000350
 80042d8:	20000344 	.word	0x20000344
 80042dc:	08012adc 	.word	0x08012adc
 80042e0:	080042e9 	.word	0x080042e9
 80042e4:	2000046c 	.word	0x2000046c

080042e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80042e8:	b590      	push	{r4, r7, lr}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af02      	add	r7, sp, #8
 80042ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	semHandle = xSemaphoreCreateBinary();
 80042f0:	2203      	movs	r2, #3
 80042f2:	2100      	movs	r1, #0
 80042f4:	2001      	movs	r0, #1
 80042f6:	f006 f820 	bl	800a33a <xQueueGenericCreate>
 80042fa:	4603      	mov	r3, r0
 80042fc:	4a61      	ldr	r2, [pc, #388]	@ (8004484 <StartDefaultTask+0x19c>)
 80042fe:	6013      	str	r3, [r2, #0]
	xSemaphoreGive(semHandle);  //initialize semHandle
 8004300:	4b60      	ldr	r3, [pc, #384]	@ (8004484 <StartDefaultTask+0x19c>)
 8004302:	6818      	ldr	r0, [r3, #0]
 8004304:	2300      	movs	r3, #0
 8004306:	2200      	movs	r2, #0
 8004308:	2100      	movs	r1, #0
 800430a:	f006 f875 	bl	800a3f8 <xQueueGenericSend>

	OLED_Init();
 800430e:	f7fe ffff 	bl	8003310 <OLED_Init>
	OLED_Clear();
 8004312:	f7ff f806 	bl	8003322 <OLED_Clear>
	OLED_ShowString(0,0,(uint8_t *)"[1]START WORKING", 16);
 8004316:	2310      	movs	r3, #16
 8004318:	4a5b      	ldr	r2, [pc, #364]	@ (8004488 <StartDefaultTask+0x1a0>)
 800431a:	2100      	movs	r1, #0
 800431c:	2000      	movs	r0, #0
 800431e:	f7ff fa6f 	bl	8003800 <OLED_ShowString>

	ESP8266_Init();
 8004322:	f7ff fdb9 	bl	8003e98 <ESP8266_Init>
	if(ESP8266_Connect_AP(SSID, PASSWORD)){
 8004326:	4959      	ldr	r1, [pc, #356]	@ (800448c <StartDefaultTask+0x1a4>)
 8004328:	4859      	ldr	r0, [pc, #356]	@ (8004490 <StartDefaultTask+0x1a8>)
 800432a:	f7ff fe8f 	bl	800404c <ESP8266_Connect_AP>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d006      	beq.n	8004342 <StartDefaultTask+0x5a>
		OLED_ShowString(0,2,(uint8_t *)"[2]WIFI OK", 16);
 8004334:	2310      	movs	r3, #16
 8004336:	4a57      	ldr	r2, [pc, #348]	@ (8004494 <StartDefaultTask+0x1ac>)
 8004338:	2102      	movs	r1, #2
 800433a:	2000      	movs	r0, #0
 800433c:	f7ff fa60 	bl	8003800 <OLED_ShowString>
 8004340:	e005      	b.n	800434e <StartDefaultTask+0x66>
	}
	else{
		OLED_ShowString(0,2,(uint8_t *)"[2]WIFI ERR", 16);
 8004342:	2310      	movs	r3, #16
 8004344:	4a54      	ldr	r2, [pc, #336]	@ (8004498 <StartDefaultTask+0x1b0>)
 8004346:	2102      	movs	r1, #2
 8004348:	2000      	movs	r0, #0
 800434a:	f7ff fa59 	bl	8003800 <OLED_ShowString>
	}

	if(ESP8266_Connect_MQTT(MQTTIP, MQTTPORT, "test", "test")){
 800434e:	4b53      	ldr	r3, [pc, #332]	@ (800449c <StartDefaultTask+0x1b4>)
 8004350:	4a52      	ldr	r2, [pc, #328]	@ (800449c <StartDefaultTask+0x1b4>)
 8004352:	f240 715b 	movw	r1, #1883	@ 0x75b
 8004356:	4852      	ldr	r0, [pc, #328]	@ (80044a0 <StartDefaultTask+0x1b8>)
 8004358:	f7ff feae 	bl	80040b8 <ESP8266_Connect_MQTT>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d006      	beq.n	8004370 <StartDefaultTask+0x88>
		OLED_ShowString(0,4,(uint8_t *)"[3]MQTT OK", 16);
 8004362:	2310      	movs	r3, #16
 8004364:	4a4f      	ldr	r2, [pc, #316]	@ (80044a4 <StartDefaultTask+0x1bc>)
 8004366:	2104      	movs	r1, #4
 8004368:	2000      	movs	r0, #0
 800436a:	f7ff fa49 	bl	8003800 <OLED_ShowString>
 800436e:	e005      	b.n	800437c <StartDefaultTask+0x94>
	}
	else{
		OLED_ShowString(0,4,(uint8_t *)"[3]MQTT ERR", 16);
 8004370:	2310      	movs	r3, #16
 8004372:	4a4d      	ldr	r2, [pc, #308]	@ (80044a8 <StartDefaultTask+0x1c0>)
 8004374:	2104      	movs	r1, #4
 8004376:	2000      	movs	r0, #0
 8004378:	f7ff fa42 	bl	8003800 <OLED_ShowString>
	}
	if(ESP8266_Subscribe(DEVICEID)){
 800437c:	484b      	ldr	r0, [pc, #300]	@ (80044ac <StartDefaultTask+0x1c4>)
 800437e:	f7ff ff35 	bl	80041ec <ESP8266_Subscribe>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d006      	beq.n	8004396 <StartDefaultTask+0xae>
		OLED_ShowString(0,6,(uint8_t *)"[4]SUBSCRIBE OK", 16);
 8004388:	2310      	movs	r3, #16
 800438a:	4a49      	ldr	r2, [pc, #292]	@ (80044b0 <StartDefaultTask+0x1c8>)
 800438c:	2106      	movs	r1, #6
 800438e:	2000      	movs	r0, #0
 8004390:	f7ff fa36 	bl	8003800 <OLED_ShowString>
 8004394:	e005      	b.n	80043a2 <StartDefaultTask+0xba>
	}
	else{
		OLED_ShowString(0,6,(uint8_t *)"[4]SUBSCRIBE ERR", 16);
 8004396:	2310      	movs	r3, #16
 8004398:	4a46      	ldr	r2, [pc, #280]	@ (80044b4 <StartDefaultTask+0x1cc>)
 800439a:	2106      	movs	r1, #6
 800439c:	2000      	movs	r0, #0
 800439e:	f7ff fa2f 	bl	8003800 <OLED_ShowString>
	}
	osDelay(1000);
 80043a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80043a6:	f005 fddd 	bl	8009f64 <osDelay>

	//start timer
	if (xTimerStart(dataTimerHandle, portMAX_DELAY) != pdPASS) {
 80043aa:	4b43      	ldr	r3, [pc, #268]	@ (80044b8 <StartDefaultTask+0x1d0>)
 80043ac:	681c      	ldr	r4, [r3, #0]
 80043ae:	f007 f84b 	bl	800b448 <xTaskGetTickCount>
 80043b2:	4602      	mov	r2, r0
 80043b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	2300      	movs	r3, #0
 80043bc:	2101      	movs	r1, #1
 80043be:	4620      	mov	r0, r4
 80043c0:	f007 fe14 	bl	800bfec <xTimerGenericCommand>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d002      	beq.n	80043d0 <StartDefaultTask+0xe8>
	    printf("Failed to start the timer\r\n");
 80043ca:	483c      	ldr	r0, [pc, #240]	@ (80044bc <StartDefaultTask+0x1d4>)
 80043cc:	f008 ffee 	bl	800d3ac <puts>
	}

	HAL_UARTEx_ReceiveToIdle_IT(&huart3, gUartBuf, sizeof(gUartBuf)); //Open the Idle interrupt of uart3
 80043d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80043d4:	493a      	ldr	r1, [pc, #232]	@ (80044c0 <StartDefaultTask+0x1d8>)
 80043d6:	483b      	ldr	r0, [pc, #236]	@ (80044c4 <StartDefaultTask+0x1dc>)
 80043d8:	f004 fcf2 	bl	8008dc0 <HAL_UARTEx_ReceiveToIdle_IT>



	//create task
	recvTaskHandle = osThreadNew(RecvTask, NULL, &recvTask_attributes);
 80043dc:	4a3a      	ldr	r2, [pc, #232]	@ (80044c8 <StartDefaultTask+0x1e0>)
 80043de:	2100      	movs	r1, #0
 80043e0:	483a      	ldr	r0, [pc, #232]	@ (80044cc <StartDefaultTask+0x1e4>)
 80043e2:	f005 fd2d 	bl	8009e40 <osThreadNew>
 80043e6:	4603      	mov	r3, r0
 80043e8:	4a39      	ldr	r2, [pc, #228]	@ (80044d0 <StartDefaultTask+0x1e8>)
 80043ea:	6013      	str	r3, [r2, #0]

	osDelay(1000);
 80043ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80043f0:	f005 fdb8 	bl	8009f64 <osDelay>

	tempTaskHandle = osThreadNew(GetTempTask, NULL, &tempTask_attributes);
 80043f4:	4a37      	ldr	r2, [pc, #220]	@ (80044d4 <StartDefaultTask+0x1ec>)
 80043f6:	2100      	movs	r1, #0
 80043f8:	4837      	ldr	r0, [pc, #220]	@ (80044d8 <StartDefaultTask+0x1f0>)
 80043fa:	f005 fd21 	bl	8009e40 <osThreadNew>
 80043fe:	4603      	mov	r3, r0
 8004400:	4a36      	ldr	r2, [pc, #216]	@ (80044dc <StartDefaultTask+0x1f4>)
 8004402:	6013      	str	r3, [r2, #0]
	lightTaskHandle = osThreadNew(GetLightTask, NULL, &lightTask_attributes);
 8004404:	4a36      	ldr	r2, [pc, #216]	@ (80044e0 <StartDefaultTask+0x1f8>)
 8004406:	2100      	movs	r1, #0
 8004408:	4836      	ldr	r0, [pc, #216]	@ (80044e4 <StartDefaultTask+0x1fc>)
 800440a:	f005 fd19 	bl	8009e40 <osThreadNew>
 800440e:	4603      	mov	r3, r0
 8004410:	4a35      	ldr	r2, [pc, #212]	@ (80044e8 <StartDefaultTask+0x200>)
 8004412:	6013      	str	r3, [r2, #0]
	OLEDTaskHandle = osThreadNew(OLED_Show_Task, NULL, &OLEDTask_attributes);
 8004414:	4a35      	ldr	r2, [pc, #212]	@ (80044ec <StartDefaultTask+0x204>)
 8004416:	2100      	movs	r1, #0
 8004418:	4835      	ldr	r0, [pc, #212]	@ (80044f0 <StartDefaultTask+0x208>)
 800441a:	f005 fd11 	bl	8009e40 <osThreadNew>
 800441e:	4603      	mov	r3, r0
 8004420:	4a34      	ldr	r2, [pc, #208]	@ (80044f4 <StartDefaultTask+0x20c>)
 8004422:	6013      	str	r3, [r2, #0]
	UploadTaskHandle = osThreadNew(UploadTask, NULL, &UploadTask_attributes);
 8004424:	4a34      	ldr	r2, [pc, #208]	@ (80044f8 <StartDefaultTask+0x210>)
 8004426:	2100      	movs	r1, #0
 8004428:	4834      	ldr	r0, [pc, #208]	@ (80044fc <StartDefaultTask+0x214>)
 800442a:	f005 fd09 	bl	8009e40 <osThreadNew>
 800442e:	4603      	mov	r3, r0
 8004430:	4a33      	ldr	r2, [pc, #204]	@ (8004500 <StartDefaultTask+0x218>)
 8004432:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  for(;;)
  {
	  //if buzzer is work, press button will close it, else the menu will be changed by button
	if (Key_Scan() == 1)
 8004434:	f000 f924 	bl	8004680 <Key_Scan>
 8004438:	4603      	mov	r3, r0
 800443a:	2b01      	cmp	r3, #1
 800443c:	d113      	bne.n	8004466 <StartDefaultTask+0x17e>
	{
		if (gBuzzerFlag == 1)
 800443e:	4b31      	ldr	r3, [pc, #196]	@ (8004504 <StartDefaultTask+0x21c>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d102      	bne.n	800444c <StartDefaultTask+0x164>
		{
			Control_Buzzer_Stop();
 8004446:	f7ff fb3f 	bl	8003ac8 <Control_Buzzer_Stop>
 800444a:	e00c      	b.n	8004466 <StartDefaultTask+0x17e>
		}
		else
		{
			gMenu++;
 800444c:	4b2e      	ldr	r3, [pc, #184]	@ (8004508 <StartDefaultTask+0x220>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	3301      	adds	r3, #1
 8004452:	b2da      	uxtb	r2, r3
 8004454:	4b2c      	ldr	r3, [pc, #176]	@ (8004508 <StartDefaultTask+0x220>)
 8004456:	701a      	strb	r2, [r3, #0]
			if (gMenu == 5)
 8004458:	4b2b      	ldr	r3, [pc, #172]	@ (8004508 <StartDefaultTask+0x220>)
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	2b05      	cmp	r3, #5
 800445e:	d102      	bne.n	8004466 <StartDefaultTask+0x17e>
				gMenu = 1;
 8004460:	4b29      	ldr	r3, [pc, #164]	@ (8004508 <StartDefaultTask+0x220>)
 8004462:	2201      	movs	r2, #1
 8004464:	701a      	strb	r2, [r3, #0]
		}
	}

	//find the alarm which satisfy the requirement and turn on it
	if (gBuzzerFlag == 0 && Link_Alarm_Isset())
 8004466:	4b27      	ldr	r3, [pc, #156]	@ (8004504 <StartDefaultTask+0x21c>)
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d106      	bne.n	800447c <StartDefaultTask+0x194>
 800446e:	f000 fc33 	bl	8004cd8 <Link_Alarm_Isset>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <StartDefaultTask+0x194>
	{
		Control_Buzzer_Start();
 8004478:	f7ff fb0a 	bl	8003a90 <Control_Buzzer_Start>
	}
	osDelay(50);
 800447c:	2032      	movs	r0, #50	@ 0x32
 800447e:	f005 fd71 	bl	8009f64 <osDelay>
	if (Key_Scan() == 1)
 8004482:	e7d7      	b.n	8004434 <StartDefaultTask+0x14c>
 8004484:	20000348 	.word	0x20000348
 8004488:	080108cc 	.word	0x080108cc
 800448c:	080108e0 	.word	0x080108e0
 8004490:	080108f4 	.word	0x080108f4
 8004494:	08010900 	.word	0x08010900
 8004498:	0801090c 	.word	0x0801090c
 800449c:	08010918 	.word	0x08010918
 80044a0:	08010920 	.word	0x08010920
 80044a4:	08010930 	.word	0x08010930
 80044a8:	0801093c 	.word	0x0801093c
 80044ac:	08010948 	.word	0x08010948
 80044b0:	08010950 	.word	0x08010950
 80044b4:	08010960 	.word	0x08010960
 80044b8:	2000034c 	.word	0x2000034c
 80044bc:	08010974 	.word	0x08010974
 80044c0:	20000358 	.word	0x20000358
 80044c4:	2000054c 	.word	0x2000054c
 80044c8:	08012a28 	.word	0x08012a28
 80044cc:	0800450d 	.word	0x0800450d
 80044d0:	20000458 	.word	0x20000458
 80044d4:	08012a4c 	.word	0x08012a4c
 80044d8:	08004579 	.word	0x08004579
 80044dc:	2000045c 	.word	0x2000045c
 80044e0:	08012a70 	.word	0x08012a70
 80044e4:	080045f5 	.word	0x080045f5
 80044e8:	20000460 	.word	0x20000460
 80044ec:	08012a94 	.word	0x08012a94
 80044f0:	0800466d 	.word	0x0800466d
 80044f4:	20000464 	.word	0x20000464
 80044f8:	08012ab8 	.word	0x08012ab8
 80044fc:	08004745 	.word	0x08004745
 8004500:	20000468 	.word	0x20000468
 8004504:	20000354 	.word	0x20000354
 8004508:	20000038 	.word	0x20000038

0800450c <RecvTask>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void RecvTask(void *arg){
 800450c:	b580      	push	{r7, lr}
 800450e:	b0c2      	sub	sp, #264	@ 0x108
 8004510:	af00      	add	r7, sp, #0
 8004512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004516:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800451a:	6018      	str	r0, [r3, #0]


	uint8_t msg[256] = {0};
 800451c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004520:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	3304      	adds	r3, #4
 800452a:	22fc      	movs	r2, #252	@ 0xfc
 800452c:	2100      	movs	r1, #0
 800452e:	4618      	mov	r0, r3
 8004530:	f008 ff63 	bl	800d3fa <memset>
	while(1){
		//Task_Recv_Msg(msg);
		xQueueReceive(uartHandle, msg, portMAX_DELAY); //read data from uart
 8004534:	4b0f      	ldr	r3, [pc, #60]	@ (8004574 <RecvTask+0x68>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f107 0108 	add.w	r1, r7, #8
 800453c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004540:	4618      	mov	r0, r3
 8004542:	f006 f8f9 	bl	800a738 <xQueueReceive>
		if(strlen((char *)msg) > 10){ //when strlen(msg) < 10, this message is from esp8266
 8004546:	f107 0308 	add.w	r3, r7, #8
 800454a:	4618      	mov	r0, r3
 800454c:	f7fb fe40 	bl	80001d0 <strlen>
 8004550:	4603      	mov	r3, r0
 8004552:	2b0a      	cmp	r3, #10
 8004554:	d904      	bls.n	8004560 <RecvTask+0x54>
			//printf("Get message from server: %s\r\n", msg);
			Parse_Message((char *)msg);
 8004556:	f107 0308 	add.w	r3, r7, #8
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff fb9c 	bl	8003c98 <Parse_Message>
		}
		memset(msg, 0, sizeof(msg));
 8004560:	f107 0308 	add.w	r3, r7, #8
 8004564:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004568:	2100      	movs	r1, #0
 800456a:	4618      	mov	r0, r3
 800456c:	f008 ff45 	bl	800d3fa <memset>
		xQueueReceive(uartHandle, msg, portMAX_DELAY); //read data from uart
 8004570:	e7e0      	b.n	8004534 <RecvTask+0x28>
 8004572:	bf00      	nop
 8004574:	20000344 	.word	0x20000344

08004578 <GetTempTask>:
//			flag = 1;
//		}
//	}
//}

void GetTempTask(void *arg){
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af02      	add	r7, sp, #8
 800457e:	6078      	str	r0, [r7, #4]
//    UBaseType_t priority = uxTaskPriorityGet(NULL);
//    printf("temp priority: %lu\n", priority);

	uint8_t data[5] = {0};
 8004580:	2300      	movs	r3, #0
 8004582:	60bb      	str	r3, [r7, #8]
 8004584:	2300      	movs	r3, #0
 8004586:	733b      	strb	r3, [r7, #12]
	//printf("%d %d\r\n", data[0], data[2]);
	while(1){
		vTaskSuspendAll();  //close allocator
 8004588:	f006 feb2 	bl	800b2f0 <vTaskSuspendAll>
		DHT11_Read_Data(data);
 800458c:	f107 0308 	add.w	r3, r7, #8
 8004590:	4618      	mov	r0, r3
 8004592:	f7fe fe24 	bl	80031de <DHT11_Read_Data>
		xTaskResumeAll();
 8004596:	f006 feb9 	bl	800b30c <xTaskResumeAll>

		xSemaphoreTake(semHandle, portMAX_DELAY);
 800459a:	4b13      	ldr	r3, [pc, #76]	@ (80045e8 <GetTempTask+0x70>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80045a2:	4618      	mov	r0, r3
 80045a4:	f006 f9aa 	bl	800a8fc <xQueueSemaphoreTake>
		//printf("Semaphore taken in Task temp\n");
		gInfo.humi = data[0];
 80045a8:	7a3a      	ldrb	r2, [r7, #8]
 80045aa:	4b10      	ldr	r3, [pc, #64]	@ (80045ec <GetTempTask+0x74>)
 80045ac:	705a      	strb	r2, [r3, #1]
		gInfo.temp = data[2];
 80045ae:	7aba      	ldrb	r2, [r7, #10]
 80045b0:	4b0e      	ldr	r3, [pc, #56]	@ (80045ec <GetTempTask+0x74>)
 80045b2:	701a      	strb	r2, [r3, #0]
		xSemaphoreGive(semHandle);
 80045b4:	4b0c      	ldr	r3, [pc, #48]	@ (80045e8 <GetTempTask+0x70>)
 80045b6:	6818      	ldr	r0, [r3, #0]
 80045b8:	2300      	movs	r3, #0
 80045ba:	2200      	movs	r2, #0
 80045bc:	2100      	movs	r1, #0
 80045be:	f005 ff1b 	bl	800a3f8 <xQueueGenericSend>
		//printf("Semaphore given in Task temp\n");
		printf("humi: %d.%d %%  temp: %d.%d C\r\n", data[0], data[1], data[2], data[3]);
 80045c2:	7a3b      	ldrb	r3, [r7, #8]
 80045c4:	4619      	mov	r1, r3
 80045c6:	7a7b      	ldrb	r3, [r7, #9]
 80045c8:	461a      	mov	r2, r3
 80045ca:	7abb      	ldrb	r3, [r7, #10]
 80045cc:	4618      	mov	r0, r3
 80045ce:	7afb      	ldrb	r3, [r7, #11]
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	4603      	mov	r3, r0
 80045d4:	4806      	ldr	r0, [pc, #24]	@ (80045f0 <GetTempTask+0x78>)
 80045d6:	f008 fe81 	bl	800d2dc <iprintf>
		osDelay(500);
 80045da:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80045de:	f005 fcc1 	bl	8009f64 <osDelay>
		vTaskSuspendAll();  //close allocator
 80045e2:	bf00      	nop
 80045e4:	e7d0      	b.n	8004588 <GetTempTask+0x10>
 80045e6:	bf00      	nop
 80045e8:	20000348 	.word	0x20000348
 80045ec:	20000028 	.word	0x20000028
 80045f0:	08010990 	.word	0x08010990

080045f4 <GetLightTask>:
	}
}

void GetLightTask(void *arg){
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
//    UBaseType_t priority = uxTaskPriorityGet(NULL);
//    printf("light priority: %lu\n", priority);

	//printf("light function\r\n");
	uint8_t data[2] = {0};
 80045fc:	2300      	movs	r3, #0
 80045fe:	81bb      	strh	r3, [r7, #12]
	uint16_t light = 0;
 8004600:	2300      	movs	r3, #0
 8004602:	81fb      	strh	r3, [r7, #14]
	while(1){
		BH1750_Send_CMD(0x20);
 8004604:	2020      	movs	r0, #32
 8004606:	f7fc fcc7 	bl	8000f98 <BH1750_Send_CMD>
		osDelay(150);
 800460a:	2096      	movs	r0, #150	@ 0x96
 800460c:	f005 fcaa 	bl	8009f64 <osDelay>
		BH1750_Read_Data(data);
 8004610:	f107 030c 	add.w	r3, r7, #12
 8004614:	4618      	mov	r0, r3
 8004616:	f7fc fcd3 	bl	8000fc0 <BH1750_Read_Data>
		light = BH1750_Data_To_Lx(data);
 800461a:	f107 030c 	add.w	r3, r7, #12
 800461e:	4618      	mov	r0, r3
 8004620:	f7fc fce2 	bl	8000fe8 <BH1750_Data_To_Lx>
 8004624:	4603      	mov	r3, r0
 8004626:	81fb      	strh	r3, [r7, #14]
		xSemaphoreTake(semHandle, portMAX_DELAY);
 8004628:	4b0d      	ldr	r3, [pc, #52]	@ (8004660 <GetLightTask+0x6c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004630:	4618      	mov	r0, r3
 8004632:	f006 f963 	bl	800a8fc <xQueueSemaphoreTake>
		//printf("Semaphore taken in Task light\n");
		gInfo.light = light;
 8004636:	89fb      	ldrh	r3, [r7, #14]
 8004638:	4a0a      	ldr	r2, [pc, #40]	@ (8004664 <GetLightTask+0x70>)
 800463a:	6053      	str	r3, [r2, #4]
		xSemaphoreGive(semHandle);
 800463c:	4b08      	ldr	r3, [pc, #32]	@ (8004660 <GetLightTask+0x6c>)
 800463e:	6818      	ldr	r0, [r3, #0]
 8004640:	2300      	movs	r3, #0
 8004642:	2200      	movs	r2, #0
 8004644:	2100      	movs	r1, #0
 8004646:	f005 fed7 	bl	800a3f8 <xQueueGenericSend>
		//printf("Semaphore given in Task light\n");
		osDelay(350);
 800464a:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 800464e:	f005 fc89 	bl	8009f64 <osDelay>
		printf("light: %d\r\n", light);
 8004652:	89fb      	ldrh	r3, [r7, #14]
 8004654:	4619      	mov	r1, r3
 8004656:	4804      	ldr	r0, [pc, #16]	@ (8004668 <GetLightTask+0x74>)
 8004658:	f008 fe40 	bl	800d2dc <iprintf>
		BH1750_Send_CMD(0x20);
 800465c:	bf00      	nop
 800465e:	e7d1      	b.n	8004604 <GetLightTask+0x10>
 8004660:	20000348 	.word	0x20000348
 8004664:	20000028 	.word	0x20000028
 8004668:	080109b0 	.word	0x080109b0

0800466c <OLED_Show_Task>:
	}
}

void OLED_Show_Task(void *arg){
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
	OLED_Show_Menu();
 8004674:	f001 f9c8 	bl	8005a08 <OLED_Show_Menu>
}
 8004678:	bf00      	nop
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <Key_Scan>:

uint8_t Key_Scan(void){
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
//			return 1;
//		}
//	}

    static uint8_t prevState = GPIO_PIN_SET;
    uint8_t currState = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6);
 8004686:	2140      	movs	r1, #64	@ 0x40
 8004688:	4812      	ldr	r0, [pc, #72]	@ (80046d4 <Key_Scan+0x54>)
 800468a:	f002 f8e5 	bl	8006858 <HAL_GPIO_ReadPin>
 800468e:	4603      	mov	r3, r0
 8004690:	71fb      	strb	r3, [r7, #7]

    if (prevState == GPIO_PIN_SET && currState == GPIO_PIN_RESET) { // Button pressed
 8004692:	4b11      	ldr	r3, [pc, #68]	@ (80046d8 <Key_Scan+0x58>)
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d111      	bne.n	80046be <Key_Scan+0x3e>
 800469a:	79fb      	ldrb	r3, [r7, #7]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10e      	bne.n	80046be <Key_Scan+0x3e>
        osDelay(30); // Debounce delay
 80046a0:	201e      	movs	r0, #30
 80046a2:	f005 fc5f 	bl	8009f64 <osDelay>
        if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6) == GPIO_PIN_RESET) { // Confirm press
 80046a6:	2140      	movs	r1, #64	@ 0x40
 80046a8:	480a      	ldr	r0, [pc, #40]	@ (80046d4 <Key_Scan+0x54>)
 80046aa:	f002 f8d5 	bl	8006858 <HAL_GPIO_ReadPin>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10a      	bne.n	80046ca <Key_Scan+0x4a>
            prevState = GPIO_PIN_RESET;
 80046b4:	4b08      	ldr	r3, [pc, #32]	@ (80046d8 <Key_Scan+0x58>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	701a      	strb	r2, [r3, #0]
            return 1; // Button press detected
 80046ba:	2301      	movs	r3, #1
 80046bc:	e006      	b.n	80046cc <Key_Scan+0x4c>
        }
    } else if (currState == GPIO_PIN_SET) { // Button released
 80046be:	79fb      	ldrb	r3, [r7, #7]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d102      	bne.n	80046ca <Key_Scan+0x4a>
        prevState = GPIO_PIN_SET;
 80046c4:	4b04      	ldr	r3, [pc, #16]	@ (80046d8 <Key_Scan+0x58>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	701a      	strb	r2, [r3, #0]
    }

	return 0;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	40021000 	.word	0x40021000
 80046d8:	20000039 	.word	0x20000039

080046dc <Data_Increase_Callback>:

void Data_Increase_Callback(TimerHandle_t xTimer){
 80046dc:	b5b0      	push	{r4, r5, r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(semHandle, portMAX_DELAY);
 80046e4:	4b0d      	ldr	r3, [pc, #52]	@ (800471c <Data_Increase_Callback+0x40>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80046ec:	4618      	mov	r0, r3
 80046ee:	f006 f905 	bl	800a8fc <xQueueSemaphoreTake>
	gInfo.cur_time++;
 80046f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004720 <Data_Increase_Callback+0x44>)
 80046f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80046f8:	1c54      	adds	r4, r2, #1
 80046fa:	f143 0500 	adc.w	r5, r3, #0
 80046fe:	4b08      	ldr	r3, [pc, #32]	@ (8004720 <Data_Increase_Callback+0x44>)
 8004700:	e9c3 4502 	strd	r4, r5, [r3, #8]
	xSemaphoreGive(semHandle);
 8004704:	4b05      	ldr	r3, [pc, #20]	@ (800471c <Data_Increase_Callback+0x40>)
 8004706:	6818      	ldr	r0, [r3, #0]
 8004708:	2300      	movs	r3, #0
 800470a:	2200      	movs	r2, #0
 800470c:	2100      	movs	r1, #0
 800470e:	f005 fe73 	bl	800a3f8 <xQueueGenericSend>
}
 8004712:	bf00      	nop
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bdb0      	pop	{r4, r5, r7, pc}
 800471a:	bf00      	nop
 800471c:	20000348 	.word	0x20000348
 8004720:	20000028 	.word	0x20000028

08004724 <Buzzer_Callback>:

void Buzzer_Callback(TimerHandle_t xTimer)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 800472c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004730:	4803      	ldr	r0, [pc, #12]	@ (8004740 <Buzzer_Callback+0x1c>)
 8004732:	f002 f8c2 	bl	80068ba <HAL_GPIO_TogglePin>
}
 8004736:	bf00      	nop
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	40020000 	.word	0x40020000

08004744 <UploadTask>:

void UploadTask(void *arg){
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
	while(1){
		UploadHandle();
 800474c:	f001 fb46 	bl	8005ddc <UploadHandle>
		osDelay(500);
 8004750:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004754:	f005 fc06 	bl	8009f64 <osDelay>
		UploadHandle();
 8004758:	bf00      	nop
 800475a:	e7f7      	b.n	800474c <UploadTask+0x8>

0800475c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08c      	sub	sp, #48	@ 0x30
 8004760:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004762:	f107 031c 	add.w	r3, r7, #28
 8004766:	2200      	movs	r2, #0
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	605a      	str	r2, [r3, #4]
 800476c:	609a      	str	r2, [r3, #8]
 800476e:	60da      	str	r2, [r3, #12]
 8004770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004772:	2300      	movs	r3, #0
 8004774:	61bb      	str	r3, [r7, #24]
 8004776:	4baa      	ldr	r3, [pc, #680]	@ (8004a20 <MX_GPIO_Init+0x2c4>)
 8004778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477a:	4aa9      	ldr	r2, [pc, #676]	@ (8004a20 <MX_GPIO_Init+0x2c4>)
 800477c:	f043 0310 	orr.w	r3, r3, #16
 8004780:	6313      	str	r3, [r2, #48]	@ 0x30
 8004782:	4ba7      	ldr	r3, [pc, #668]	@ (8004a20 <MX_GPIO_Init+0x2c4>)
 8004784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004786:	f003 0310 	and.w	r3, r3, #16
 800478a:	61bb      	str	r3, [r7, #24]
 800478c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800478e:	2300      	movs	r3, #0
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	4ba3      	ldr	r3, [pc, #652]	@ (8004a20 <MX_GPIO_Init+0x2c4>)
 8004794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004796:	4aa2      	ldr	r2, [pc, #648]	@ (8004a20 <MX_GPIO_Init+0x2c4>)
 8004798:	f043 0304 	orr.w	r3, r3, #4
 800479c:	6313      	str	r3, [r2, #48]	@ 0x30
 800479e:	4ba0      	ldr	r3, [pc, #640]	@ (8004a20 <MX_GPIO_Init+0x2c4>)
 80047a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a2:	f003 0304 	and.w	r3, r3, #4
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80047aa:	2300      	movs	r3, #0
 80047ac:	613b      	str	r3, [r7, #16]
 80047ae:	4b9c      	ldr	r3, [pc, #624]	@ (8004a20 <MX_GPIO_Init+0x2c4>)
 80047b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b2:	4a9b      	ldr	r2, [pc, #620]	@ (8004a20 <MX_GPIO_Init+0x2c4>)
 80047b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80047ba:	4b99      	ldr	r3, [pc, #612]	@ (8004a20 <MX_GPIO_Init+0x2c4>)
 80047bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047c2:	613b      	str	r3, [r7, #16]
 80047c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047c6:	2300      	movs	r3, #0
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	4b95      	ldr	r3, [pc, #596]	@ (8004a20 <MX_GPIO_Init+0x2c4>)
 80047cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ce:	4a94      	ldr	r2, [pc, #592]	@ (8004a20 <MX_GPIO_Init+0x2c4>)
 80047d0:	f043 0301 	orr.w	r3, r3, #1
 80047d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80047d6:	4b92      	ldr	r3, [pc, #584]	@ (8004a20 <MX_GPIO_Init+0x2c4>)
 80047d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047e2:	2300      	movs	r3, #0
 80047e4:	60bb      	str	r3, [r7, #8]
 80047e6:	4b8e      	ldr	r3, [pc, #568]	@ (8004a20 <MX_GPIO_Init+0x2c4>)
 80047e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ea:	4a8d      	ldr	r2, [pc, #564]	@ (8004a20 <MX_GPIO_Init+0x2c4>)
 80047ec:	f043 0302 	orr.w	r3, r3, #2
 80047f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80047f2:	4b8b      	ldr	r3, [pc, #556]	@ (8004a20 <MX_GPIO_Init+0x2c4>)
 80047f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	60bb      	str	r3, [r7, #8]
 80047fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80047fe:	2300      	movs	r3, #0
 8004800:	607b      	str	r3, [r7, #4]
 8004802:	4b87      	ldr	r3, [pc, #540]	@ (8004a20 <MX_GPIO_Init+0x2c4>)
 8004804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004806:	4a86      	ldr	r2, [pc, #536]	@ (8004a20 <MX_GPIO_Init+0x2c4>)
 8004808:	f043 0308 	orr.w	r3, r3, #8
 800480c:	6313      	str	r3, [r2, #48]	@ 0x30
 800480e:	4b84      	ldr	r3, [pc, #528]	@ (8004a20 <MX_GPIO_Init+0x2c4>)
 8004810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	607b      	str	r3, [r7, #4]
 8004818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800481a:	2200      	movs	r2, #0
 800481c:	2108      	movs	r1, #8
 800481e:	4881      	ldr	r0, [pc, #516]	@ (8004a24 <MX_GPIO_Init+0x2c8>)
 8004820:	f002 f832 	bl	8006888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8004824:	2201      	movs	r2, #1
 8004826:	2101      	movs	r1, #1
 8004828:	487f      	ldr	r0, [pc, #508]	@ (8004a28 <MX_GPIO_Init+0x2cc>)
 800482a:	f002 f82d 	bl	8006888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800482e:	2200      	movs	r2, #0
 8004830:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004834:	487d      	ldr	r0, [pc, #500]	@ (8004a2c <MX_GPIO_Init+0x2d0>)
 8004836:	f002 f827 	bl	8006888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800483a:	2200      	movs	r2, #0
 800483c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8004840:	487b      	ldr	r0, [pc, #492]	@ (8004a30 <MX_GPIO_Init+0x2d4>)
 8004842:	f002 f821 	bl	8006888 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE4 PE6 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_0;
 8004846:	2355      	movs	r3, #85	@ 0x55
 8004848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800484a:	2300      	movs	r3, #0
 800484c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800484e:	2300      	movs	r3, #0
 8004850:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004852:	f107 031c 	add.w	r3, r7, #28
 8004856:	4619      	mov	r1, r3
 8004858:	4872      	ldr	r0, [pc, #456]	@ (8004a24 <MX_GPIO_Init+0x2c8>)
 800485a:	f001 fe61 	bl	8006520 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800485e:	2308      	movs	r3, #8
 8004860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004862:	2301      	movs	r3, #1
 8004864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004866:	2300      	movs	r3, #0
 8004868:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800486a:	2300      	movs	r3, #0
 800486c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800486e:	f107 031c 	add.w	r3, r7, #28
 8004872:	4619      	mov	r1, r3
 8004874:	486b      	ldr	r0, [pc, #428]	@ (8004a24 <MX_GPIO_Init+0x2c8>)
 8004876:	f001 fe53 	bl	8006520 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800487a:	2301      	movs	r3, #1
 800487c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800487e:	2301      	movs	r3, #1
 8004880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004882:	2300      	movs	r3, #0
 8004884:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004886:	2300      	movs	r3, #0
 8004888:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800488a:	f107 031c 	add.w	r3, r7, #28
 800488e:	4619      	mov	r1, r3
 8004890:	4865      	ldr	r0, [pc, #404]	@ (8004a28 <MX_GPIO_Init+0x2cc>)
 8004892:	f001 fe45 	bl	8006520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8004896:	2308      	movs	r3, #8
 8004898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800489a:	2302      	movs	r3, #2
 800489c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800489e:	2300      	movs	r3, #0
 80048a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048a2:	2300      	movs	r3, #0
 80048a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80048a6:	2305      	movs	r3, #5
 80048a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80048aa:	f107 031c 	add.w	r3, r7, #28
 80048ae:	4619      	mov	r1, r3
 80048b0:	485d      	ldr	r0, [pc, #372]	@ (8004a28 <MX_GPIO_Init+0x2cc>)
 80048b2:	f001 fe35 	bl	8006520 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80048b6:	2301      	movs	r3, #1
 80048b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80048ba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80048be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048c0:	2300      	movs	r3, #0
 80048c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80048c4:	f107 031c 	add.w	r3, r7, #28
 80048c8:	4619      	mov	r1, r3
 80048ca:	485a      	ldr	r0, [pc, #360]	@ (8004a34 <MX_GPIO_Init+0x2d8>)
 80048cc:	f001 fe28 	bl	8006520 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80048d0:	2310      	movs	r3, #16
 80048d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d4:	2302      	movs	r3, #2
 80048d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d8:	2300      	movs	r3, #0
 80048da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048dc:	2300      	movs	r3, #0
 80048de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80048e0:	2306      	movs	r3, #6
 80048e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80048e4:	f107 031c 	add.w	r3, r7, #28
 80048e8:	4619      	mov	r1, r3
 80048ea:	4852      	ldr	r0, [pc, #328]	@ (8004a34 <MX_GPIO_Init+0x2d8>)
 80048ec:	f001 fe18 	bl	8006520 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80048f0:	23e0      	movs	r3, #224	@ 0xe0
 80048f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048f4:	2302      	movs	r3, #2
 80048f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f8:	2300      	movs	r3, #0
 80048fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048fc:	2300      	movs	r3, #0
 80048fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004900:	2305      	movs	r3, #5
 8004902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004904:	f107 031c 	add.w	r3, r7, #28
 8004908:	4619      	mov	r1, r3
 800490a:	484a      	ldr	r0, [pc, #296]	@ (8004a34 <MX_GPIO_Init+0x2d8>)
 800490c:	f001 fe08 	bl	8006520 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8004910:	2304      	movs	r3, #4
 8004912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004914:	2300      	movs	r3, #0
 8004916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004918:	2300      	movs	r3, #0
 800491a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800491c:	f107 031c 	add.w	r3, r7, #28
 8004920:	4619      	mov	r1, r3
 8004922:	4842      	ldr	r0, [pc, #264]	@ (8004a2c <MX_GPIO_Init+0x2d0>)
 8004924:	f001 fdfc 	bl	8006520 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8004928:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800492c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800492e:	2302      	movs	r3, #2
 8004930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004932:	2300      	movs	r3, #0
 8004934:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004936:	2300      	movs	r3, #0
 8004938:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800493a:	2305      	movs	r3, #5
 800493c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800493e:	f107 031c 	add.w	r3, r7, #28
 8004942:	4619      	mov	r1, r3
 8004944:	4839      	ldr	r0, [pc, #228]	@ (8004a2c <MX_GPIO_Init+0x2d0>)
 8004946:	f001 fdeb 	bl	8006520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800494a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800494e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004950:	2301      	movs	r3, #1
 8004952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004954:	2300      	movs	r3, #0
 8004956:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004958:	2300      	movs	r3, #0
 800495a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800495c:	f107 031c 	add.w	r3, r7, #28
 8004960:	4619      	mov	r1, r3
 8004962:	4832      	ldr	r0, [pc, #200]	@ (8004a2c <MX_GPIO_Init+0x2d0>)
 8004964:	f001 fddc 	bl	8006520 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8004968:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800496c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800496e:	2301      	movs	r3, #1
 8004970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004972:	2300      	movs	r3, #0
 8004974:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004976:	2300      	movs	r3, #0
 8004978:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800497a:	f107 031c 	add.w	r3, r7, #28
 800497e:	4619      	mov	r1, r3
 8004980:	482b      	ldr	r0, [pc, #172]	@ (8004a30 <MX_GPIO_Init+0x2d4>)
 8004982:	f001 fdcd 	bl	8006520 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8004986:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800498a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800498c:	2302      	movs	r3, #2
 800498e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004990:	2300      	movs	r3, #0
 8004992:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004994:	2300      	movs	r3, #0
 8004996:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004998:	2306      	movs	r3, #6
 800499a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800499c:	f107 031c 	add.w	r3, r7, #28
 80049a0:	4619      	mov	r1, r3
 80049a2:	4821      	ldr	r0, [pc, #132]	@ (8004a28 <MX_GPIO_Init+0x2cc>)
 80049a4:	f001 fdbc 	bl	8006520 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80049a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80049ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049ae:	2300      	movs	r3, #0
 80049b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b2:	2300      	movs	r3, #0
 80049b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80049b6:	f107 031c 	add.w	r3, r7, #28
 80049ba:	4619      	mov	r1, r3
 80049bc:	481d      	ldr	r0, [pc, #116]	@ (8004a34 <MX_GPIO_Init+0x2d8>)
 80049be:	f001 fdaf 	bl	8006520 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80049c2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80049c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049c8:	2302      	movs	r3, #2
 80049ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049cc:	2300      	movs	r3, #0
 80049ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049d0:	2300      	movs	r3, #0
 80049d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80049d4:	230a      	movs	r3, #10
 80049d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049d8:	f107 031c 	add.w	r3, r7, #28
 80049dc:	4619      	mov	r1, r3
 80049de:	4815      	ldr	r0, [pc, #84]	@ (8004a34 <MX_GPIO_Init+0x2d8>)
 80049e0:	f001 fd9e 	bl	8006520 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80049e4:	2320      	movs	r3, #32
 80049e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049e8:	2300      	movs	r3, #0
 80049ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ec:	2300      	movs	r3, #0
 80049ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80049f0:	f107 031c 	add.w	r3, r7, #28
 80049f4:	4619      	mov	r1, r3
 80049f6:	480e      	ldr	r0, [pc, #56]	@ (8004a30 <MX_GPIO_Init+0x2d4>)
 80049f8:	f001 fd92 	bl	8006520 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80049fc:	2302      	movs	r3, #2
 80049fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004a00:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8004a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a06:	2300      	movs	r3, #0
 8004a08:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8004a0a:	f107 031c 	add.w	r3, r7, #28
 8004a0e:	4619      	mov	r1, r3
 8004a10:	4804      	ldr	r0, [pc, #16]	@ (8004a24 <MX_GPIO_Init+0x2c8>)
 8004a12:	f001 fd85 	bl	8006520 <HAL_GPIO_Init>

}
 8004a16:	bf00      	nop
 8004a18:	3730      	adds	r7, #48	@ 0x30
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	40023800 	.word	0x40023800
 8004a24:	40021000 	.word	0x40021000
 8004a28:	40020800 	.word	0x40020800
 8004a2c:	40020400 	.word	0x40020400
 8004a30:	40020c00 	.word	0x40020c00
 8004a34:	40020000 	.word	0x40020000

08004a38 <MY_GPIO_Init>:

/* USER CODE BEGIN 2 */
void MY_GPIO_Init(void){
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
  /*Configure GPIO pin : PA8 for buzzer*/
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a3e:	2300      	movs	r3, #0
 8004a40:	603b      	str	r3, [r7, #0]
 8004a42:	4b12      	ldr	r3, [pc, #72]	@ (8004a8c <MY_GPIO_Init+0x54>)
 8004a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a46:	4a11      	ldr	r2, [pc, #68]	@ (8004a8c <MY_GPIO_Init+0x54>)
 8004a48:	f043 0301 	orr.w	r3, r3, #1
 8004a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8004a8c <MY_GPIO_Init+0x54>)
 8004a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	603b      	str	r3, [r7, #0]
 8004a58:	683b      	ldr	r3, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a5a:	1d3b      	adds	r3, r7, #4
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	605a      	str	r2, [r3, #4]
 8004a62:	609a      	str	r2, [r3, #8]
 8004a64:	60da      	str	r2, [r3, #12]
 8004a66:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004a68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004a6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a72:	2300      	movs	r3, #0
 8004a74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a76:	2300      	movs	r3, #0
 8004a78:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a7a:	1d3b      	adds	r3, r7, #4
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4804      	ldr	r0, [pc, #16]	@ (8004a90 <MY_GPIO_Init+0x58>)
 8004a80:	f001 fd4e 	bl	8006520 <HAL_GPIO_Init>
}
 8004a84:	bf00      	nop
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	40023800 	.word	0x40023800
 8004a90:	40020000 	.word	0x40020000

08004a94 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004a98:	4b12      	ldr	r3, [pc, #72]	@ (8004ae4 <MX_I2C1_Init+0x50>)
 8004a9a:	4a13      	ldr	r2, [pc, #76]	@ (8004ae8 <MX_I2C1_Init+0x54>)
 8004a9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004a9e:	4b11      	ldr	r3, [pc, #68]	@ (8004ae4 <MX_I2C1_Init+0x50>)
 8004aa0:	4a12      	ldr	r2, [pc, #72]	@ (8004aec <MX_I2C1_Init+0x58>)
 8004aa2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8004ae4 <MX_I2C1_Init+0x50>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8004ae4 <MX_I2C1_Init+0x50>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ae4 <MX_I2C1_Init+0x50>)
 8004ab2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004ab6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae4 <MX_I2C1_Init+0x50>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004abe:	4b09      	ldr	r3, [pc, #36]	@ (8004ae4 <MX_I2C1_Init+0x50>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004ac4:	4b07      	ldr	r3, [pc, #28]	@ (8004ae4 <MX_I2C1_Init+0x50>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004aca:	4b06      	ldr	r3, [pc, #24]	@ (8004ae4 <MX_I2C1_Init+0x50>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004ad0:	4804      	ldr	r0, [pc, #16]	@ (8004ae4 <MX_I2C1_Init+0x50>)
 8004ad2:	f001 ff0d 	bl	80068f0 <HAL_I2C_Init>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004adc:	f000 faa2 	bl	8005024 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004ae0:	bf00      	nop
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	20000470 	.word	0x20000470
 8004ae8:	40005400 	.word	0x40005400
 8004aec:	00061a80 	.word	0x00061a80

08004af0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08a      	sub	sp, #40	@ 0x28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004af8:	f107 0314 	add.w	r3, r7, #20
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	605a      	str	r2, [r3, #4]
 8004b02:	609a      	str	r2, [r3, #8]
 8004b04:	60da      	str	r2, [r3, #12]
 8004b06:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a19      	ldr	r2, [pc, #100]	@ (8004b74 <HAL_I2C_MspInit+0x84>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d12c      	bne.n	8004b6c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b12:	2300      	movs	r3, #0
 8004b14:	613b      	str	r3, [r7, #16]
 8004b16:	4b18      	ldr	r3, [pc, #96]	@ (8004b78 <HAL_I2C_MspInit+0x88>)
 8004b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b1a:	4a17      	ldr	r2, [pc, #92]	@ (8004b78 <HAL_I2C_MspInit+0x88>)
 8004b1c:	f043 0302 	orr.w	r3, r3, #2
 8004b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b22:	4b15      	ldr	r3, [pc, #84]	@ (8004b78 <HAL_I2C_MspInit+0x88>)
 8004b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	613b      	str	r3, [r7, #16]
 8004b2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8004b2e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8004b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b34:	2312      	movs	r3, #18
 8004b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004b40:	2304      	movs	r3, #4
 8004b42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b44:	f107 0314 	add.w	r3, r7, #20
 8004b48:	4619      	mov	r1, r3
 8004b4a:	480c      	ldr	r0, [pc, #48]	@ (8004b7c <HAL_I2C_MspInit+0x8c>)
 8004b4c:	f001 fce8 	bl	8006520 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b50:	2300      	movs	r3, #0
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	4b08      	ldr	r3, [pc, #32]	@ (8004b78 <HAL_I2C_MspInit+0x88>)
 8004b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b58:	4a07      	ldr	r2, [pc, #28]	@ (8004b78 <HAL_I2C_MspInit+0x88>)
 8004b5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004b5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b60:	4b05      	ldr	r3, [pc, #20]	@ (8004b78 <HAL_I2C_MspInit+0x88>)
 8004b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004b6c:	bf00      	nop
 8004b6e:	3728      	adds	r7, #40	@ 0x28
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40005400 	.word	0x40005400
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	40020400 	.word	0x40020400

08004b80 <Init_Link>:

AlarmNode *pxAlarmHead = NULL;
int8_t minFlag = -1;  //record if the minute of an alarm already passed
extern EnvInfo gInfo;

void Init_Link(void){
 8004b80:	b580      	push	{r7, lr}
 8004b82:	af00      	add	r7, sp, #0
	pxAlarmHead = pvPortMalloc(sizeof(AlarmNode));
 8004b84:	2018      	movs	r0, #24
 8004b86:	f007 ff91 	bl	800caac <pvPortMalloc>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	4a07      	ldr	r2, [pc, #28]	@ (8004bac <Init_Link+0x2c>)
 8004b8e:	6013      	str	r3, [r2, #0]
	if(pxAlarmHead == NULL){
 8004b90:	4b06      	ldr	r3, [pc, #24]	@ (8004bac <Init_Link+0x2c>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d103      	bne.n	8004ba0 <Init_Link+0x20>
		printf("Failed to allocate memory for pxAlarmHead\n");
 8004b98:	4805      	ldr	r0, [pc, #20]	@ (8004bb0 <Init_Link+0x30>)
 8004b9a:	f008 fc07 	bl	800d3ac <puts>
		return;
 8004b9e:	e003      	b.n	8004ba8 <Init_Link+0x28>
	}

	pxAlarmHead->next = NULL;
 8004ba0:	4b02      	ldr	r3, [pc, #8]	@ (8004bac <Init_Link+0x2c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	615a      	str	r2, [r3, #20]
}
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	200004c4 	.word	0x200004c4
 8004bb0:	080109bc 	.word	0x080109bc

08004bb4 <Add_Alarm_Link>:

void Add_Alarm_Link(uint8_t hour, uint8_t min){
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	4603      	mov	r3, r0
 8004bbc:	460a      	mov	r2, r1
 8004bbe:	71fb      	strb	r3, [r7, #7]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	71bb      	strb	r3, [r7, #6]
	AlarmNode *p = pxAlarmHead->next;
 8004bc4:	4b21      	ldr	r3, [pc, #132]	@ (8004c4c <Add_Alarm_Link+0x98>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	60fb      	str	r3, [r7, #12]

	while (p)  //find a empty node for saving the time of new alarm
 8004bcc:	e006      	b.n	8004bdc <Add_Alarm_Link+0x28>
	{
		if (p->alarm_type == ALARMTYPE){
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	789b      	ldrb	r3, [r3, #2]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d006      	beq.n	8004be4 <Add_Alarm_Link+0x30>
			break;
		}

		p = p->next;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	60fb      	str	r3, [r7, #12]
	while (p)  //find a empty node for saving the time of new alarm
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f5      	bne.n	8004bce <Add_Alarm_Link+0x1a>
 8004be2:	e000      	b.n	8004be6 <Add_Alarm_Link+0x32>
			break;
 8004be4:	bf00      	nop
	}

	if (p)          //alarm already exist
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d006      	beq.n	8004bfa <Add_Alarm_Link+0x46>
	{
		p->hour = hour;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	79fa      	ldrb	r2, [r7, #7]
 8004bf0:	701a      	strb	r2, [r3, #0]
		p->min = min;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	79ba      	ldrb	r2, [r7, #6]
 8004bf6:	705a      	strb	r2, [r3, #1]
 8004bf8:	e024      	b.n	8004c44 <Add_Alarm_Link+0x90>
	}
	else            //alarm not exist
	{
		p = pxAlarmHead;
 8004bfa:	4b14      	ldr	r3, [pc, #80]	@ (8004c4c <Add_Alarm_Link+0x98>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	60fb      	str	r3, [r7, #12]

		while (p->next)
 8004c00:	e002      	b.n	8004c08 <Add_Alarm_Link+0x54>
			p = p->next;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	60fb      	str	r3, [r7, #12]
		while (p->next)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1f8      	bne.n	8004c02 <Add_Alarm_Link+0x4e>

		AlarmNode *newNode = pvPortMalloc(sizeof(AlarmNode));
 8004c10:	2018      	movs	r0, #24
 8004c12:	f007 ff4b 	bl	800caac <pvPortMalloc>
 8004c16:	60b8      	str	r0, [r7, #8]
		if (newNode == NULL){
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d103      	bne.n	8004c26 <Add_Alarm_Link+0x72>
			printf("Failed to allocate memory for newNode\r\n");
 8004c1e:	480c      	ldr	r0, [pc, #48]	@ (8004c50 <Add_Alarm_Link+0x9c>)
 8004c20:	f008 fbc4 	bl	800d3ac <puts>
			return;
 8004c24:	e00e      	b.n	8004c44 <Add_Alarm_Link+0x90>
		}

		newNode->hour = hour;
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	79fa      	ldrb	r2, [r7, #7]
 8004c2a:	701a      	strb	r2, [r3, #0]
		newNode->min = min;
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	79ba      	ldrb	r2, [r7, #6]
 8004c30:	705a      	strb	r2, [r3, #1]
		newNode->alarm_type = ALARMTYPE;
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2200      	movs	r2, #0
 8004c36:	709a      	strb	r2, [r3, #2]
		newNode->next = NULL;
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	615a      	str	r2, [r3, #20]

		p->next = newNode;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	615a      	str	r2, [r3, #20]
	}
}
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	200004c4 	.word	0x200004c4
 8004c50:	080109e8 	.word	0x080109e8

08004c54 <Link_Find_Alarm>:


void Link_Find_Alarm(uint8_t *h, uint8_t *m)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
    if (pxAlarmHead == NULL) {
 8004c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8004cd4 <Link_Find_Alarm+0x80>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d106      	bne.n	8004c74 <Link_Find_Alarm+0x20>
        //printf("pxAlarmHead is NULL\n");
        *h = 0;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	701a      	strb	r2, [r3, #0]
        *m = 0;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	701a      	strb	r2, [r3, #0]
        return;
 8004c72:	e029      	b.n	8004cc8 <Link_Find_Alarm+0x74>
    }

	AlarmNode *p = pxAlarmHead->next;
 8004c74:	4b17      	ldr	r3, [pc, #92]	@ (8004cd4 <Link_Find_Alarm+0x80>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	60fb      	str	r3, [r7, #12]
	if (p == NULL) {
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d116      	bne.n	8004cb0 <Link_Find_Alarm+0x5c>
	    //printf("The linked list is empty\n");
	    *h = 0;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	701a      	strb	r2, [r3, #0]
	    *m = 0;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	701a      	strb	r2, [r3, #0]
	    return;
 8004c8e:	e01b      	b.n	8004cc8 <Link_Find_Alarm+0x74>
	}

	while (p)
	{
		if (p->alarm_type == ALARMTYPE)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	789b      	ldrb	r3, [r3, #2]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d108      	bne.n	8004caa <Link_Find_Alarm+0x56>
		{
			*h = p->hour;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	781a      	ldrb	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	701a      	strb	r2, [r3, #0]
			*m = p->min;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	785a      	ldrb	r2, [r3, #1]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	701a      	strb	r2, [r3, #0]
			return;
 8004ca8:	e00e      	b.n	8004cc8 <Link_Find_Alarm+0x74>
		}
		p = p->next;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	60fb      	str	r3, [r7, #12]
	while (p)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1ec      	bne.n	8004c90 <Link_Find_Alarm+0x3c>

	}

	if (!p)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d105      	bne.n	8004cc8 <Link_Find_Alarm+0x74>
	{
		*h = 0;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	701a      	strb	r2, [r3, #0]
		*m = 0;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	701a      	strb	r2, [r3, #0]
	}
}
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	200004c4 	.word	0x200004c4

08004cd8 <Link_Alarm_Isset>:

//if the current time (a minute) match the time of an alarm.
uint8_t Link_Alarm_Isset(void)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
	time_t curTime = gInfo.cur_time + 3600 * 1; //for german time (GMT+1), use 3600 * 1
 8004cde:	4b20      	ldr	r3, [pc, #128]	@ (8004d60 <Link_Alarm_Isset+0x88>)
 8004ce0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004ce4:	f512 6061 	adds.w	r0, r2, #3600	@ 0xe10
 8004ce8:	f143 0100 	adc.w	r1, r3, #0
 8004cec:	e9c7 0100 	strd	r0, r1, [r7]

	struct tm *t = localtime(&curTime);
 8004cf0:	463b      	mov	r3, r7
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f008 fb8a 	bl	800d40c <localtime>
 8004cf8:	6138      	str	r0, [r7, #16]

	uint8_t hour = t->tm_hour;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	73fb      	strb	r3, [r7, #15]
	uint8_t min = t->tm_min;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	73bb      	strb	r3, [r7, #14]

	if (minFlag == min)
 8004d06:	4b17      	ldr	r3, [pc, #92]	@ (8004d64 <Link_Alarm_Isset+0x8c>)
 8004d08:	f993 3000 	ldrsb.w	r3, [r3]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	7bbb      	ldrb	r3, [r7, #14]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d101      	bne.n	8004d18 <Link_Alarm_Isset+0x40>
	{
		return 0;
 8004d14:	2300      	movs	r3, #0
 8004d16:	e01e      	b.n	8004d56 <Link_Alarm_Isset+0x7e>
	}
	else
	{
		minFlag = -1;   //at the last second of this minute, close the flag for next use
 8004d18:	4b12      	ldr	r3, [pc, #72]	@ (8004d64 <Link_Alarm_Isset+0x8c>)
 8004d1a:	22ff      	movs	r2, #255	@ 0xff
 8004d1c:	701a      	strb	r2, [r3, #0]
	}


	AlarmNode *p = pxAlarmHead->next;
 8004d1e:	4b12      	ldr	r3, [pc, #72]	@ (8004d68 <Link_Alarm_Isset+0x90>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	617b      	str	r3, [r7, #20]
	while (p)
 8004d26:	e012      	b.n	8004d4e <Link_Alarm_Isset+0x76>
	{
		if (p->hour == hour && p->min == min)
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	7bfa      	ldrb	r2, [r7, #15]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d10a      	bne.n	8004d48 <Link_Alarm_Isset+0x70>
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	785b      	ldrb	r3, [r3, #1]
 8004d36:	7bba      	ldrb	r2, [r7, #14]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d105      	bne.n	8004d48 <Link_Alarm_Isset+0x70>
		{
			minFlag = min;  //indicate that the program already find an alarm
 8004d3c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8004d40:	4b08      	ldr	r3, [pc, #32]	@ (8004d64 <Link_Alarm_Isset+0x8c>)
 8004d42:	701a      	strb	r2, [r3, #0]
			return 1;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e006      	b.n	8004d56 <Link_Alarm_Isset+0x7e>
		}

		p = p->next;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	617b      	str	r3, [r7, #20]
	while (p)
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1e9      	bne.n	8004d28 <Link_Alarm_Isset+0x50>
	}
	return 0;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	20000028 	.word	0x20000028
 8004d64:	2000003a 	.word	0x2000003a
 8004d68:	200004c4 	.word	0x200004c4

08004d6c <Add_Note_Link>:

void Add_Note_Link(uint8_t hour, uint8_t min, char *event)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	4603      	mov	r3, r0
 8004d74:	603a      	str	r2, [r7, #0]
 8004d76:	71fb      	strb	r3, [r7, #7]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	71bb      	strb	r3, [r7, #6]
	AlarmNode *p = pxAlarmHead->next;
 8004d7c:	4b26      	ldr	r3, [pc, #152]	@ (8004e18 <Add_Note_Link+0xac>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	60fb      	str	r3, [r7, #12]

	while (p)
 8004d84:	e006      	b.n	8004d94 <Add_Note_Link+0x28>
	{
		if (p->alarm_type == NOTETYPE)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	789b      	ldrb	r3, [r3, #2]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d006      	beq.n	8004d9c <Add_Note_Link+0x30>
			break;
		p = p->next;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	60fb      	str	r3, [r7, #12]
	while (p)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f5      	bne.n	8004d86 <Add_Note_Link+0x1a>
 8004d9a:	e000      	b.n	8004d9e <Add_Note_Link+0x32>
			break;
 8004d9c:	bf00      	nop
	}

	if (p)          //if note already exist, cover it
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00c      	beq.n	8004dbe <Add_Note_Link+0x52>
	{
		p->hour = hour;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	79fa      	ldrb	r2, [r7, #7]
 8004da8:	701a      	strb	r2, [r3, #0]
		p->min = min;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	79ba      	ldrb	r2, [r7, #6]
 8004dae:	705a      	strb	r2, [r3, #1]
		strcpy(p->event, event);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	3303      	adds	r3, #3
 8004db4:	6839      	ldr	r1, [r7, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f008 ffb9 	bl	800dd2e <strcpy>
 8004dbc:	e028      	b.n	8004e10 <Add_Note_Link+0xa4>
	}
	else            //alarm not exist
	{
		p = pxAlarmHead;
 8004dbe:	4b16      	ldr	r3, [pc, #88]	@ (8004e18 <Add_Note_Link+0xac>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	60fb      	str	r3, [r7, #12]

		while (p->next)
 8004dc4:	e002      	b.n	8004dcc <Add_Note_Link+0x60>
			p = p->next;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	60fb      	str	r3, [r7, #12]
		while (p->next)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1f8      	bne.n	8004dc6 <Add_Note_Link+0x5a>

		AlarmNode *newNode = pvPortMalloc(sizeof(AlarmNode));
 8004dd4:	2018      	movs	r0, #24
 8004dd6:	f007 fe69 	bl	800caac <pvPortMalloc>
 8004dda:	60b8      	str	r0, [r7, #8]
		if (newNode == NULL)
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d015      	beq.n	8004e0e <Add_Note_Link+0xa2>
			return;

		newNode->hour = hour;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	79fa      	ldrb	r2, [r7, #7]
 8004de6:	701a      	strb	r2, [r3, #0]
		newNode->min = min;
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	79ba      	ldrb	r2, [r7, #6]
 8004dec:	705a      	strb	r2, [r3, #1]
		newNode->alarm_type = NOTETYPE;
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2201      	movs	r2, #1
 8004df2:	709a      	strb	r2, [r3, #2]
		strcpy(newNode->event, event);
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	3303      	adds	r3, #3
 8004df8:	6839      	ldr	r1, [r7, #0]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f008 ff97 	bl	800dd2e <strcpy>
		newNode->next = NULL;
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2200      	movs	r2, #0
 8004e04:	615a      	str	r2, [r3, #20]
		p->next = newNode;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	615a      	str	r2, [r3, #20]
 8004e0c:	e000      	b.n	8004e10 <Add_Note_Link+0xa4>
			return;
 8004e0e:	bf00      	nop
	}
}
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	200004c4 	.word	0x200004c4

08004e1c <Link_Find_Note>:

void Link_Find_Note(uint8_t *h, uint8_t *m, char *event)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
	AlarmNode *p = pxAlarmHead->next;
 8004e28:	4b10      	ldr	r3, [pc, #64]	@ (8004e6c <Link_Find_Note+0x50>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	617b      	str	r3, [r7, #20]

	while (p)
 8004e30:	e015      	b.n	8004e5e <Link_Find_Note+0x42>
	{
		if (p->alarm_type == NOTETYPE)
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	789b      	ldrb	r3, [r3, #2]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d10e      	bne.n	8004e58 <Link_Find_Note+0x3c>
		{
			*h = p->hour;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	781a      	ldrb	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	701a      	strb	r2, [r3, #0]
			*m = p->min;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	785a      	ldrb	r2, [r3, #1]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	701a      	strb	r2, [r3, #0]
			strcpy(event, p->event);
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	3303      	adds	r3, #3
 8004e4e:	4619      	mov	r1, r3
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f008 ff6c 	bl	800dd2e <strcpy>
			return;
 8004e56:	e005      	b.n	8004e64 <Link_Find_Note+0x48>
		}

		p = p->next;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	617b      	str	r3, [r7, #20]
	while (p)
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1e6      	bne.n	8004e32 <Link_Find_Note+0x16>
	}
}
 8004e64:	3718      	adds	r7, #24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	200004c4 	.word	0x200004c4

08004e70 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004e78:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8004e7c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d013      	beq.n	8004eb0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8004e88:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8004e8c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8004e90:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00b      	beq.n	8004eb0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004e98:	e000      	b.n	8004e9c <ITM_SendChar+0x2c>
    {
      __NOP();
 8004e9a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8004e9c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0f9      	beq.n	8004e9a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8004ea6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	b2d2      	uxtb	r2, r2
 8004eae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004eb0:	687b      	ldr	r3, [r7, #4]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b086      	sub	sp, #24
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	60f8      	str	r0, [r7, #12]
 8004ec6:	60b9      	str	r1, [r7, #8]
 8004ec8:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8004eca:	2300      	movs	r3, #0
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	e009      	b.n	8004ee4 <_write+0x26>
        ITM_SendChar(*ptr++);
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	60ba      	str	r2, [r7, #8]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff ffc9 	bl	8004e70 <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	dbf1      	blt.n	8004ed0 <_write+0x12>
    }
    return len;
 8004eec:	687b      	ldr	r3, [r7, #4]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3718      	adds	r7, #24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004efa:	f001 f937 	bl	800616c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004efe:	f000 f815 	bl	8004f2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004f02:	f7ff fc2b 	bl	800475c <MX_GPIO_Init>
  MX_I2C1_Init();
 8004f06:	f7ff fdc5 	bl	8004a94 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8004f0a:	f001 f831 	bl	8005f70 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  MY_GPIO_Init();
 8004f0e:	f7ff fd93 	bl	8004a38 <MY_GPIO_Init>
  Init_Link();
 8004f12:	f7ff fe35 	bl	8004b80 <Init_Link>
  DHT11_Init();
 8004f16:	f7fe f889 	bl	800302c <DHT11_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8004f1a:	f004 ff47 	bl	8009dac <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8004f1e:	f7ff f99b 	bl	8004258 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004f22:	f004 ff67 	bl	8009df4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004f26:	bf00      	nop
 8004f28:	e7fd      	b.n	8004f26 <main+0x30>
	...

08004f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b094      	sub	sp, #80	@ 0x50
 8004f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004f32:	f107 0320 	add.w	r3, r7, #32
 8004f36:	2230      	movs	r2, #48	@ 0x30
 8004f38:	2100      	movs	r1, #0
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f008 fa5d 	bl	800d3fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004f40:	f107 030c 	add.w	r3, r7, #12
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	605a      	str	r2, [r3, #4]
 8004f4a:	609a      	str	r2, [r3, #8]
 8004f4c:	60da      	str	r2, [r3, #12]
 8004f4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f50:	2300      	movs	r3, #0
 8004f52:	60bb      	str	r3, [r7, #8]
 8004f54:	4b28      	ldr	r3, [pc, #160]	@ (8004ff8 <SystemClock_Config+0xcc>)
 8004f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f58:	4a27      	ldr	r2, [pc, #156]	@ (8004ff8 <SystemClock_Config+0xcc>)
 8004f5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f60:	4b25      	ldr	r3, [pc, #148]	@ (8004ff8 <SystemClock_Config+0xcc>)
 8004f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f68:	60bb      	str	r3, [r7, #8]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	607b      	str	r3, [r7, #4]
 8004f70:	4b22      	ldr	r3, [pc, #136]	@ (8004ffc <SystemClock_Config+0xd0>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a21      	ldr	r2, [pc, #132]	@ (8004ffc <SystemClock_Config+0xd0>)
 8004f76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	4b1f      	ldr	r3, [pc, #124]	@ (8004ffc <SystemClock_Config+0xd0>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f84:	607b      	str	r3, [r7, #4]
 8004f86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004f88:	2302      	movs	r3, #2
 8004f8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004f90:	2310      	movs	r3, #16
 8004f92:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f94:	2302      	movs	r3, #2
 8004f96:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004f9c:	2308      	movs	r3, #8
 8004f9e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004fa0:	2364      	movs	r3, #100	@ 0x64
 8004fa2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004fa8:	2307      	movs	r3, #7
 8004faa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004fac:	f107 0320 	add.w	r3, r7, #32
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f002 fe27 	bl	8007c04 <HAL_RCC_OscConfig>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004fbc:	f000 f832 	bl	8005024 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004fc0:	230f      	movs	r3, #15
 8004fc2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004fcc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004fd0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004fd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004fd6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004fd8:	f107 030c 	add.w	r3, r7, #12
 8004fdc:	2103      	movs	r1, #3
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f003 f888 	bl	80080f4 <HAL_RCC_ClockConfig>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004fea:	f000 f81b 	bl	8005024 <Error_Handler>
  }
}
 8004fee:	bf00      	nop
 8004ff0:	3750      	adds	r7, #80	@ 0x50
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	40023800 	.word	0x40023800
 8004ffc:	40007000 	.word	0x40007000

08005000 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a04      	ldr	r2, [pc, #16]	@ (8005020 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d101      	bne.n	8005016 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005012:	f001 f8cd 	bl	80061b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005016:	bf00      	nop
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	40000400 	.word	0x40000400

08005024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005028:	b672      	cpsid	i
}
 800502a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800502c:	bf00      	nop
 800502e:	e7fd      	b.n	800502c <Error_Handler+0x8>

08005030 <Get_Number_Len>:

EnvInfo preInfo = {0};
uint8_t curMenu = 0;  //record the number of current menu
TimeInfo preTime = {0};

uint8_t Get_Number_Len(uint16_t number){
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	4603      	mov	r3, r0
 8005038:	80fb      	strh	r3, [r7, #6]
	if(number == 0){
 800503a:	88fb      	ldrh	r3, [r7, #6]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <Get_Number_Len+0x14>
		return 1;
 8005040:	2301      	movs	r3, #1
 8005042:	e010      	b.n	8005066 <Get_Number_Len+0x36>
	}

	int len = 0;
 8005044:	2300      	movs	r3, #0
 8005046:	60fb      	str	r3, [r7, #12]

	while(number > 0){
 8005048:	e008      	b.n	800505c <Get_Number_Len+0x2c>
		len++;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	3301      	adds	r3, #1
 800504e:	60fb      	str	r3, [r7, #12]
		number /= 10;
 8005050:	88fb      	ldrh	r3, [r7, #6]
 8005052:	4a08      	ldr	r2, [pc, #32]	@ (8005074 <Get_Number_Len+0x44>)
 8005054:	fba2 2303 	umull	r2, r3, r2, r3
 8005058:	08db      	lsrs	r3, r3, #3
 800505a:	80fb      	strh	r3, [r7, #6]
	while(number > 0){
 800505c:	88fb      	ldrh	r3, [r7, #6]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1f3      	bne.n	800504a <Get_Number_Len+0x1a>
	}

	return len;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	b2db      	uxtb	r3, r3
}
 8005066:	4618      	mov	r0, r3
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	cccccccd 	.word	0xcccccccd

08005078 <Show_OLED_Light>:

void Show_OLED_Light(uint8_t level){   //adjust contrast according to the illumination
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	4603      	mov	r3, r0
 8005080:	71fb      	strb	r3, [r7, #7]
	OLED_WR_CMD(0x81); //send command to oled to adjust contrast
 8005082:	2081      	movs	r0, #129	@ 0x81
 8005084:	f7fe f914 	bl	80032b0 <OLED_WR_CMD>
	switch(level){  //set contrast 0x01-0xFF
 8005088:	79fb      	ldrb	r3, [r7, #7]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d002      	beq.n	8005094 <Show_OLED_Light+0x1c>
 800508e:	2b02      	cmp	r3, #2
 8005090:	d004      	beq.n	800509c <Show_OLED_Light+0x24>
 8005092:	e007      	b.n	80050a4 <Show_OLED_Light+0x2c>
	case 1:
		OLED_WR_CMD(0x0f);
 8005094:	200f      	movs	r0, #15
 8005096:	f7fe f90b 	bl	80032b0 <OLED_WR_CMD>
		break;
 800509a:	e007      	b.n	80050ac <Show_OLED_Light+0x34>
	case 2:
		OLED_WR_CMD(0x8f);
 800509c:	208f      	movs	r0, #143	@ 0x8f
 800509e:	f7fe f907 	bl	80032b0 <OLED_WR_CMD>
		break;
 80050a2:	e003      	b.n	80050ac <Show_OLED_Light+0x34>
	default:
		OLED_WR_CMD(0xff);
 80050a4:	20ff      	movs	r0, #255	@ 0xff
 80050a6:	f7fe f903 	bl	80032b0 <OLED_WR_CMD>
		break;
 80050aa:	bf00      	nop
	}

}
 80050ac:	bf00      	nop
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <Show_Environment>:


void Show_Environment(void){
 80050b4:	b590      	push	{r4, r7, lr}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af02      	add	r7, sp, #8
	//printf("show environment\r\n");

	uint8_t temp, humi, i;
	uint16_t light;

	xSemaphoreTake(semHandle, portMAX_DELAY);
 80050ba:	4b7d      	ldr	r3, [pc, #500]	@ (80052b0 <Show_Environment+0x1fc>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80050c2:	4618      	mov	r0, r3
 80050c4:	f005 fc1a 	bl	800a8fc <xQueueSemaphoreTake>
	temp = gInfo.temp;
 80050c8:	4b7a      	ldr	r3, [pc, #488]	@ (80052b4 <Show_Environment+0x200>)
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	71bb      	strb	r3, [r7, #6]
	humi = gInfo.humi;
 80050ce:	4b79      	ldr	r3, [pc, #484]	@ (80052b4 <Show_Environment+0x200>)
 80050d0:	785b      	ldrb	r3, [r3, #1]
 80050d2:	717b      	strb	r3, [r7, #5]
	light = gInfo.light;
 80050d4:	4b77      	ldr	r3, [pc, #476]	@ (80052b4 <Show_Environment+0x200>)
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	807b      	strh	r3, [r7, #2]
	xSemaphoreGive(semHandle);
 80050da:	4b75      	ldr	r3, [pc, #468]	@ (80052b0 <Show_Environment+0x1fc>)
 80050dc:	6818      	ldr	r0, [r3, #0]
 80050de:	2300      	movs	r3, #0
 80050e0:	2200      	movs	r2, #0
 80050e2:	2100      	movs	r1, #0
 80050e4:	f005 f988 	bl	800a3f8 <xQueueGenericSend>

	if(light < 20){
 80050e8:	887b      	ldrh	r3, [r7, #2]
 80050ea:	2b13      	cmp	r3, #19
 80050ec:	d803      	bhi.n	80050f6 <Show_Environment+0x42>
		Show_OLED_Light(1);
 80050ee:	2001      	movs	r0, #1
 80050f0:	f7ff ffc2 	bl	8005078 <Show_OLED_Light>
 80050f4:	e009      	b.n	800510a <Show_Environment+0x56>
	}
	else if(light < 40){
 80050f6:	887b      	ldrh	r3, [r7, #2]
 80050f8:	2b27      	cmp	r3, #39	@ 0x27
 80050fa:	d803      	bhi.n	8005104 <Show_Environment+0x50>
		Show_OLED_Light(2);
 80050fc:	2002      	movs	r0, #2
 80050fe:	f7ff ffbb 	bl	8005078 <Show_OLED_Light>
 8005102:	e002      	b.n	800510a <Show_Environment+0x56>
	}
	else{
		Show_OLED_Light(3);
 8005104:	2003      	movs	r0, #3
 8005106:	f7ff ffb7 	bl	8005078 <Show_OLED_Light>
	}

	if(gMenu != curMenu){
 800510a:	4b6b      	ldr	r3, [pc, #428]	@ (80052b8 <Show_Environment+0x204>)
 800510c:	781a      	ldrb	r2, [r3, #0]
 800510e:	4b6b      	ldr	r3, [pc, #428]	@ (80052bc <Show_Environment+0x208>)
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d021      	beq.n	800515a <Show_Environment+0xa6>
		for(i = 0; i < 16; i++){
 8005116:	2300      	movs	r3, #0
 8005118:	71fb      	strb	r3, [r7, #7]
 800511a:	e00a      	b.n	8005132 <Show_Environment+0x7e>
			OLED_ShowChar(i * 8, 4, '-', 16);   //show the line at the middle of the screen
 800511c:	79fb      	ldrb	r3, [r7, #7]
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	b2d8      	uxtb	r0, r3
 8005122:	2310      	movs	r3, #16
 8005124:	222d      	movs	r2, #45	@ 0x2d
 8005126:	2104      	movs	r1, #4
 8005128:	f7fe f986 	bl	8003438 <OLED_ShowChar>
		for(i = 0; i < 16; i++){
 800512c:	79fb      	ldrb	r3, [r7, #7]
 800512e:	3301      	adds	r3, #1
 8005130:	71fb      	strb	r3, [r7, #7]
 8005132:	79fb      	ldrb	r3, [r7, #7]
 8005134:	2b0f      	cmp	r3, #15
 8005136:	d9f1      	bls.n	800511c <Show_Environment+0x68>
		}
		OLED_Clearrow(6);
 8005138:	2006      	movs	r0, #6
 800513a:	f7fe f91c 	bl	8003376 <OLED_Clearrow>
		OLED_Clearrow(7);
 800513e:	2007      	movs	r0, #7
 8005140:	f7fe f919 	bl	8003376 <OLED_Clearrow>

		OLED_ShowChinese(40, 6, 10);  //show 'C' (the unit of temp)
 8005144:	220a      	movs	r2, #10
 8005146:	2106      	movs	r1, #6
 8005148:	2028      	movs	r0, #40	@ 0x28
 800514a:	f7fe fb89 	bl	8003860 <OLED_ShowChinese>
		OLED_ShowChar(90, 6, '%', 16);  //show '%' (the unit of humi)
 800514e:	2310      	movs	r3, #16
 8005150:	2225      	movs	r2, #37	@ 0x25
 8005152:	2106      	movs	r1, #6
 8005154:	205a      	movs	r0, #90	@ 0x5a
 8005156:	f7fe f96f 	bl	8003438 <OLED_ShowChar>


	}

	uint8_t len = Get_Number_Len(light);
 800515a:	887b      	ldrh	r3, [r7, #2]
 800515c:	4618      	mov	r0, r3
 800515e:	f7ff ff67 	bl	8005030 <Get_Number_Len>
 8005162:	4603      	mov	r3, r0
 8005164:	707b      	strb	r3, [r7, #1]

	if(light != preInfo.light || gMenu != curMenu){  //when the value of light changes, clear the screen for the new value
 8005166:	887a      	ldrh	r2, [r7, #2]
 8005168:	4b55      	ldr	r3, [pc, #340]	@ (80052c0 <Show_Environment+0x20c>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	429a      	cmp	r2, r3
 800516e:	d105      	bne.n	800517c <Show_Environment+0xc8>
 8005170:	4b51      	ldr	r3, [pc, #324]	@ (80052b8 <Show_Environment+0x204>)
 8005172:	781a      	ldrb	r2, [r3, #0]
 8005174:	4b51      	ldr	r3, [pc, #324]	@ (80052bc <Show_Environment+0x208>)
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	429a      	cmp	r2, r3
 800517a:	d00c      	beq.n	8005196 <Show_Environment+0xe2>
		for(i = 0; i < 4; i++){
 800517c:	2300      	movs	r3, #0
 800517e:	71fb      	strb	r3, [r7, #7]
 8005180:	e006      	b.n	8005190 <Show_Environment+0xdc>
			OLED_Clearrow(i);
 8005182:	79fb      	ldrb	r3, [r7, #7]
 8005184:	4618      	mov	r0, r3
 8005186:	f7fe f8f6 	bl	8003376 <OLED_Clearrow>
		for(i = 0; i < 4; i++){
 800518a:	79fb      	ldrb	r3, [r7, #7]
 800518c:	3301      	adds	r3, #1
 800518e:	71fb      	strb	r3, [r7, #7]
 8005190:	79fb      	ldrb	r3, [r7, #7]
 8005192:	2b03      	cmp	r3, #3
 8005194:	d9f5      	bls.n	8005182 <Show_Environment+0xce>
		}
	}

	if(len % 2){  //if the number of digits is odd
 8005196:	787b      	ldrb	r3, [r7, #1]
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d012      	beq.n	80051c8 <Show_Environment+0x114>
		OLED_ShowNum((8 - len) / 2 * 16 + 8, 0, light, len, 32);  //let the value of light be at the middle of the screen
 80051a2:	787b      	ldrb	r3, [r7, #1]
 80051a4:	f1c3 0308 	rsb	r3, r3, #8
 80051a8:	0fda      	lsrs	r2, r3, #31
 80051aa:	4413      	add	r3, r2
 80051ac:	105b      	asrs	r3, r3, #1
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	3308      	adds	r3, #8
 80051b6:	b2d8      	uxtb	r0, r3
 80051b8:	887a      	ldrh	r2, [r7, #2]
 80051ba:	787b      	ldrb	r3, [r7, #1]
 80051bc:	2120      	movs	r1, #32
 80051be:	9100      	str	r1, [sp, #0]
 80051c0:	2100      	movs	r1, #0
 80051c2:	f7fe fab7 	bl	8003734 <OLED_ShowNum>
 80051c6:	e00f      	b.n	80051e8 <Show_Environment+0x134>
	}
	else{ //if the number of digits is even
		OLED_ShowNum((8 - len) / 2 * 16, 0, light, len, 32);  //let the value of light be at the middle of the screen
 80051c8:	787b      	ldrb	r3, [r7, #1]
 80051ca:	f1c3 0308 	rsb	r3, r3, #8
 80051ce:	0fda      	lsrs	r2, r3, #31
 80051d0:	4413      	add	r3, r2
 80051d2:	105b      	asrs	r3, r3, #1
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	011b      	lsls	r3, r3, #4
 80051d8:	b2d8      	uxtb	r0, r3
 80051da:	887a      	ldrh	r2, [r7, #2]
 80051dc:	787b      	ldrb	r3, [r7, #1]
 80051de:	2120      	movs	r1, #32
 80051e0:	9100      	str	r1, [sp, #0]
 80051e2:	2100      	movs	r1, #0
 80051e4:	f7fe faa6 	bl	8003734 <OLED_ShowNum>
	}

	if(temp != preInfo.temp || gMenu != curMenu){
 80051e8:	4b35      	ldr	r3, [pc, #212]	@ (80052c0 <Show_Environment+0x20c>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	79ba      	ldrb	r2, [r7, #6]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d105      	bne.n	80051fe <Show_Environment+0x14a>
 80051f2:	4b31      	ldr	r3, [pc, #196]	@ (80052b8 <Show_Environment+0x204>)
 80051f4:	781a      	ldrb	r2, [r3, #0]
 80051f6:	4b31      	ldr	r3, [pc, #196]	@ (80052bc <Show_Environment+0x208>)
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d030      	beq.n	8005260 <Show_Environment+0x1ac>
		len = Get_Number_Len(temp);
 80051fe:	79bb      	ldrb	r3, [r7, #6]
 8005200:	b29b      	uxth	r3, r3
 8005202:	4618      	mov	r0, r3
 8005204:	f7ff ff14 	bl	8005030 <Get_Number_Len>
 8005208:	4603      	mov	r3, r0
 800520a:	707b      	strb	r3, [r7, #1]
		if(len == 1){  //if the number of digits of temp is odd
 800520c:	787b      	ldrb	r3, [r7, #1]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d116      	bne.n	8005240 <Show_Environment+0x18c>
			OLED_ShowString(20, 6, (uint8_t *)" ", 16);
 8005212:	2310      	movs	r3, #16
 8005214:	4a2b      	ldr	r2, [pc, #172]	@ (80052c4 <Show_Environment+0x210>)
 8005216:	2106      	movs	r1, #6
 8005218:	2014      	movs	r0, #20
 800521a:	f7fe faf1 	bl	8003800 <OLED_ShowString>
			OLED_ShowNum(28, 6, temp, Get_Number_Len(temp), 16);
 800521e:	79bc      	ldrb	r4, [r7, #6]
 8005220:	79bb      	ldrb	r3, [r7, #6]
 8005222:	b29b      	uxth	r3, r3
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff ff03 	bl	8005030 <Get_Number_Len>
 800522a:	4603      	mov	r3, r0
 800522c:	461a      	mov	r2, r3
 800522e:	2310      	movs	r3, #16
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	4613      	mov	r3, r2
 8005234:	4622      	mov	r2, r4
 8005236:	2106      	movs	r1, #6
 8005238:	201c      	movs	r0, #28
 800523a:	f7fe fa7b 	bl	8003734 <OLED_ShowNum>
 800523e:	e00f      	b.n	8005260 <Show_Environment+0x1ac>
		}
		else{
			OLED_ShowNum(20, 6, temp, Get_Number_Len(temp), 16);
 8005240:	79bc      	ldrb	r4, [r7, #6]
 8005242:	79bb      	ldrb	r3, [r7, #6]
 8005244:	b29b      	uxth	r3, r3
 8005246:	4618      	mov	r0, r3
 8005248:	f7ff fef2 	bl	8005030 <Get_Number_Len>
 800524c:	4603      	mov	r3, r0
 800524e:	461a      	mov	r2, r3
 8005250:	2310      	movs	r3, #16
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	4613      	mov	r3, r2
 8005256:	4622      	mov	r2, r4
 8005258:	2106      	movs	r1, #6
 800525a:	2014      	movs	r0, #20
 800525c:	f7fe fa6a 	bl	8003734 <OLED_ShowNum>
		}
	}

	if(humi != preInfo.humi || gMenu != curMenu){
 8005260:	4b17      	ldr	r3, [pc, #92]	@ (80052c0 <Show_Environment+0x20c>)
 8005262:	785b      	ldrb	r3, [r3, #1]
 8005264:	797a      	ldrb	r2, [r7, #5]
 8005266:	429a      	cmp	r2, r3
 8005268:	d105      	bne.n	8005276 <Show_Environment+0x1c2>
 800526a:	4b13      	ldr	r3, [pc, #76]	@ (80052b8 <Show_Environment+0x204>)
 800526c:	781a      	ldrb	r2, [r3, #0]
 800526e:	4b13      	ldr	r3, [pc, #76]	@ (80052bc <Show_Environment+0x208>)
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	429a      	cmp	r2, r3
 8005274:	d00e      	beq.n	8005294 <Show_Environment+0x1e0>
		len = Get_Number_Len(humi);
 8005276:	797b      	ldrb	r3, [r7, #5]
 8005278:	b29b      	uxth	r3, r3
 800527a:	4618      	mov	r0, r3
 800527c:	f7ff fed8 	bl	8005030 <Get_Number_Len>
 8005280:	4603      	mov	r3, r0
 8005282:	707b      	strb	r3, [r7, #1]
		OLED_ShowNum(70, 6, humi, len, 16);
 8005284:	797a      	ldrb	r2, [r7, #5]
 8005286:	787b      	ldrb	r3, [r7, #1]
 8005288:	2110      	movs	r1, #16
 800528a:	9100      	str	r1, [sp, #0]
 800528c:	2106      	movs	r1, #6
 800528e:	2046      	movs	r0, #70	@ 0x46
 8005290:	f7fe fa50 	bl	8003734 <OLED_ShowNum>
	}

	preInfo.humi = humi;
 8005294:	4a0a      	ldr	r2, [pc, #40]	@ (80052c0 <Show_Environment+0x20c>)
 8005296:	797b      	ldrb	r3, [r7, #5]
 8005298:	7053      	strb	r3, [r2, #1]
	preInfo.temp = temp;
 800529a:	4a09      	ldr	r2, [pc, #36]	@ (80052c0 <Show_Environment+0x20c>)
 800529c:	79bb      	ldrb	r3, [r7, #6]
 800529e:	7013      	strb	r3, [r2, #0]
	preInfo.light = light;
 80052a0:	887b      	ldrh	r3, [r7, #2]
 80052a2:	4a07      	ldr	r2, [pc, #28]	@ (80052c0 <Show_Environment+0x20c>)
 80052a4:	6053      	str	r3, [r2, #4]
}
 80052a6:	bf00      	nop
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd90      	pop	{r4, r7, pc}
 80052ae:	bf00      	nop
 80052b0:	20000348 	.word	0x20000348
 80052b4:	20000028 	.word	0x20000028
 80052b8:	20000038 	.word	0x20000038
 80052bc:	200004d8 	.word	0x200004d8
 80052c0:	200004c8 	.word	0x200004c8
 80052c4:	08010a10 	.word	0x08010a10

080052c8 <Show_Time>:

void Show_Time(void){
 80052c8:	b5b0      	push	{r4, r5, r7, lr}
 80052ca:	b092      	sub	sp, #72	@ 0x48
 80052cc:	af02      	add	r7, sp, #8
	if(curMenu != gMenu){
 80052ce:	4b96      	ldr	r3, [pc, #600]	@ (8005528 <Show_Time+0x260>)
 80052d0:	781a      	ldrb	r2, [r3, #0]
 80052d2:	4b96      	ldr	r3, [pc, #600]	@ (800552c <Show_Time+0x264>)
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d007      	beq.n	80052ea <Show_Time+0x22>
		OLED_Clear();
 80052da:	f7fe f822 	bl	8003322 <OLED_Clear>
		OLED_ShowString(30, 0, (uint8_t *)"DE(GMT+1)", 16);
 80052de:	2310      	movs	r3, #16
 80052e0:	4a93      	ldr	r2, [pc, #588]	@ (8005530 <Show_Time+0x268>)
 80052e2:	2100      	movs	r1, #0
 80052e4:	201e      	movs	r0, #30
 80052e6:	f7fe fa8b 	bl	8003800 <OLED_ShowString>
	}

	uint8_t x_pos = 16;
 80052ea:	2310      	movs	r3, #16
 80052ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	time_t curTime = gInfo.cur_time + 3600 * 1;
 80052f0:	4b90      	ldr	r3, [pc, #576]	@ (8005534 <Show_Time+0x26c>)
 80052f2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80052f6:	f512 6461 	adds.w	r4, r2, #3600	@ 0xe10
 80052fa:	f143 0500 	adc.w	r5, r3, #0
 80052fe:	e9c7 4508 	strd	r4, r5, [r7, #32]
	struct tm *t = localtime(&curTime);
 8005302:	f107 0320 	add.w	r3, r7, #32
 8005306:	4618      	mov	r0, r3
 8005308:	f008 f880 	bl	800d40c <localtime>
 800530c:	63b8      	str	r0, [r7, #56]	@ 0x38

	uint16_t year = t->tm_year + 1900;
 800530e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	b29b      	uxth	r3, r3
 8005314:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8005318:	86fb      	strh	r3, [r7, #54]	@ 0x36
	uint16_t month = t->tm_mon + 1;
 800531a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	b29b      	uxth	r3, r3
 8005320:	3301      	adds	r3, #1
 8005322:	86bb      	strh	r3, [r7, #52]	@ 0x34
	uint16_t day = t->tm_mday;
 8005324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	867b      	strh	r3, [r7, #50]	@ 0x32
	uint16_t hour = t->tm_hour;
 800532a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	863b      	strh	r3, [r7, #48]	@ 0x30
	uint16_t min = t->tm_min;
 8005330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint16_t sec = t->tm_sec;
 8005336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	uint16_t weekday = t->tm_wday;
 800533c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	857b      	strh	r3, [r7, #42]	@ 0x2a

	if(year != preTime.year || gMenu != curMenu){
 8005342:	4b7d      	ldr	r3, [pc, #500]	@ (8005538 <Show_Time+0x270>)
 8005344:	881b      	ldrh	r3, [r3, #0]
 8005346:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005348:	429a      	cmp	r2, r3
 800534a:	d105      	bne.n	8005358 <Show_Time+0x90>
 800534c:	4b77      	ldr	r3, [pc, #476]	@ (800552c <Show_Time+0x264>)
 800534e:	781a      	ldrb	r2, [r3, #0]
 8005350:	4b75      	ldr	r3, [pc, #468]	@ (8005528 <Show_Time+0x260>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	429a      	cmp	r2, r3
 8005356:	d008      	beq.n	800536a <Show_Time+0xa2>
		OLED_ShowNum(x_pos, 2, year, 4, 16);
 8005358:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800535a:	f897 003f 	ldrb.w	r0, [r7, #63]	@ 0x3f
 800535e:	2310      	movs	r3, #16
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	2304      	movs	r3, #4
 8005364:	2102      	movs	r1, #2
 8005366:	f7fe f9e5 	bl	8003734 <OLED_ShowNum>
	}
	x_pos += 32;
 800536a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800536e:	3320      	adds	r3, #32
 8005370:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if(gMenu != curMenu){
 8005374:	4b6d      	ldr	r3, [pc, #436]	@ (800552c <Show_Time+0x264>)
 8005376:	781a      	ldrb	r2, [r3, #0]
 8005378:	4b6b      	ldr	r3, [pc, #428]	@ (8005528 <Show_Time+0x260>)
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	429a      	cmp	r2, r3
 800537e:	d006      	beq.n	800538e <Show_Time+0xc6>
		OLED_ShowChar(x_pos, 2, '-', 16);
 8005380:	f897 003f 	ldrb.w	r0, [r7, #63]	@ 0x3f
 8005384:	2310      	movs	r3, #16
 8005386:	222d      	movs	r2, #45	@ 0x2d
 8005388:	2102      	movs	r1, #2
 800538a:	f7fe f855 	bl	8003438 <OLED_ShowChar>
	}
	x_pos += 8;
 800538e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005392:	3308      	adds	r3, #8
 8005394:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if(month != preTime.month || gMenu != curMenu){
 8005398:	4b67      	ldr	r3, [pc, #412]	@ (8005538 <Show_Time+0x270>)
 800539a:	885b      	ldrh	r3, [r3, #2]
 800539c:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800539e:	429a      	cmp	r2, r3
 80053a0:	d105      	bne.n	80053ae <Show_Time+0xe6>
 80053a2:	4b62      	ldr	r3, [pc, #392]	@ (800552c <Show_Time+0x264>)
 80053a4:	781a      	ldrb	r2, [r3, #0]
 80053a6:	4b60      	ldr	r3, [pc, #384]	@ (8005528 <Show_Time+0x260>)
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d00f      	beq.n	80053ce <Show_Time+0x106>
		OLED_ShowNum(x_pos, 2, month, Get_Number_Len(month), 16);
 80053ae:	8ebc      	ldrh	r4, [r7, #52]	@ 0x34
 80053b0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff fe3c 	bl	8005030 <Get_Number_Len>
 80053b8:	4603      	mov	r3, r0
 80053ba:	461a      	mov	r2, r3
 80053bc:	f897 003f 	ldrb.w	r0, [r7, #63]	@ 0x3f
 80053c0:	2310      	movs	r3, #16
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	4613      	mov	r3, r2
 80053c6:	4622      	mov	r2, r4
 80053c8:	2102      	movs	r1, #2
 80053ca:	f7fe f9b3 	bl	8003734 <OLED_ShowNum>
	}
	if(Get_Number_Len(month) == 1){
 80053ce:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7ff fe2d 	bl	8005030 <Get_Number_Len>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d105      	bne.n	80053e8 <Show_Time+0x120>
		x_pos += 8;
 80053dc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80053e0:	3308      	adds	r3, #8
 80053e2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80053e6:	e004      	b.n	80053f2 <Show_Time+0x12a>
	}
	else{
		x_pos += 16;
 80053e8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80053ec:	3310      	adds	r3, #16
 80053ee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}

	if(gMenu != curMenu){
 80053f2:	4b4e      	ldr	r3, [pc, #312]	@ (800552c <Show_Time+0x264>)
 80053f4:	781a      	ldrb	r2, [r3, #0]
 80053f6:	4b4c      	ldr	r3, [pc, #304]	@ (8005528 <Show_Time+0x260>)
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d006      	beq.n	800540c <Show_Time+0x144>
		OLED_ShowChar(x_pos, 2, '-', 16);
 80053fe:	f897 003f 	ldrb.w	r0, [r7, #63]	@ 0x3f
 8005402:	2310      	movs	r3, #16
 8005404:	222d      	movs	r2, #45	@ 0x2d
 8005406:	2102      	movs	r1, #2
 8005408:	f7fe f816 	bl	8003438 <OLED_ShowChar>
	}
	x_pos += 8;
 800540c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005410:	3308      	adds	r3, #8
 8005412:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if(day != preTime.day || gMenu != curMenu){
 8005416:	4b48      	ldr	r3, [pc, #288]	@ (8005538 <Show_Time+0x270>)
 8005418:	889b      	ldrh	r3, [r3, #4]
 800541a:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800541c:	429a      	cmp	r2, r3
 800541e:	d105      	bne.n	800542c <Show_Time+0x164>
 8005420:	4b42      	ldr	r3, [pc, #264]	@ (800552c <Show_Time+0x264>)
 8005422:	781a      	ldrb	r2, [r3, #0]
 8005424:	4b40      	ldr	r3, [pc, #256]	@ (8005528 <Show_Time+0x260>)
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	429a      	cmp	r2, r3
 800542a:	d00f      	beq.n	800544c <Show_Time+0x184>
		OLED_ShowNum(x_pos, 2, day, Get_Number_Len(day), 16);
 800542c:	8e7c      	ldrh	r4, [r7, #50]	@ 0x32
 800542e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff fdfd 	bl	8005030 <Get_Number_Len>
 8005436:	4603      	mov	r3, r0
 8005438:	461a      	mov	r2, r3
 800543a:	f897 003f 	ldrb.w	r0, [r7, #63]	@ 0x3f
 800543e:	2310      	movs	r3, #16
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	4613      	mov	r3, r2
 8005444:	4622      	mov	r2, r4
 8005446:	2102      	movs	r1, #2
 8005448:	f7fe f974 	bl	8003734 <OLED_ShowNum>
	}
	if(Get_Number_Len(day) == 1){
 800544c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800544e:	4618      	mov	r0, r3
 8005450:	f7ff fdee 	bl	8005030 <Get_Number_Len>
 8005454:	4603      	mov	r3, r0
 8005456:	2b01      	cmp	r3, #1
 8005458:	d105      	bne.n	8005466 <Show_Time+0x19e>
		x_pos += 8;
 800545a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800545e:	3308      	adds	r3, #8
 8005460:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8005464:	e004      	b.n	8005470 <Show_Time+0x1a8>
	}
	else{
		x_pos += 16;
 8005466:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800546a:	3310      	adds	r3, #16
 800546c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}

	if(weekday != preTime.weekday || gMenu != curMenu){
 8005470:	4b31      	ldr	r3, [pc, #196]	@ (8005538 <Show_Time+0x270>)
 8005472:	899b      	ldrh	r3, [r3, #12]
 8005474:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005476:	429a      	cmp	r2, r3
 8005478:	d105      	bne.n	8005486 <Show_Time+0x1be>
 800547a:	4b2c      	ldr	r3, [pc, #176]	@ (800552c <Show_Time+0x264>)
 800547c:	781a      	ldrb	r2, [r3, #0]
 800547e:	4b2a      	ldr	r3, [pc, #168]	@ (8005528 <Show_Time+0x260>)
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	429a      	cmp	r2, r3
 8005484:	d013      	beq.n	80054ae <Show_Time+0x1e6>
		const char *weekdays[] = {"SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"};
 8005486:	4b2d      	ldr	r3, [pc, #180]	@ (800553c <Show_Time+0x274>)
 8005488:	1d3c      	adds	r4, r7, #4
 800548a:	461d      	mov	r5, r3
 800548c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800548e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005490:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005494:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		OLED_ShowString(88, 2, (uint8_t *)weekdays[weekday], 16);
 8005498:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	3340      	adds	r3, #64	@ 0x40
 800549e:	443b      	add	r3, r7
 80054a0:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 80054a4:	2310      	movs	r3, #16
 80054a6:	2102      	movs	r1, #2
 80054a8:	2058      	movs	r0, #88	@ 0x58
 80054aa:	f7fe f9a9 	bl	8003800 <OLED_ShowString>
	}

	x_pos = 0;
 80054ae:	2300      	movs	r3, #0
 80054b0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if(hour != preTime.hour || gMenu != curMenu){
 80054b4:	4b20      	ldr	r3, [pc, #128]	@ (8005538 <Show_Time+0x270>)
 80054b6:	88db      	ldrh	r3, [r3, #6]
 80054b8:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d105      	bne.n	80054ca <Show_Time+0x202>
 80054be:	4b1b      	ldr	r3, [pc, #108]	@ (800552c <Show_Time+0x264>)
 80054c0:	781a      	ldrb	r2, [r3, #0]
 80054c2:	4b19      	ldr	r3, [pc, #100]	@ (8005528 <Show_Time+0x260>)
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d03a      	beq.n	8005540 <Show_Time+0x278>
		if(hour < 10){
 80054ca:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80054cc:	2b09      	cmp	r3, #9
 80054ce:	d81c      	bhi.n	800550a <Show_Time+0x242>
			OLED_ShowNum(x_pos, 4, 0, 1, 32);
 80054d0:	f897 003f 	ldrb.w	r0, [r7, #63]	@ 0x3f
 80054d4:	2320      	movs	r3, #32
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	2301      	movs	r3, #1
 80054da:	2200      	movs	r2, #0
 80054dc:	2104      	movs	r1, #4
 80054de:	f7fe f929 	bl	8003734 <OLED_ShowNum>
			x_pos += 16;
 80054e2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80054e6:	3310      	adds	r3, #16
 80054e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			OLED_ShowNum(x_pos, 4, hour, 1, 32);
 80054ec:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80054ee:	f897 003f 	ldrb.w	r0, [r7, #63]	@ 0x3f
 80054f2:	2320      	movs	r3, #32
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	2301      	movs	r3, #1
 80054f8:	2104      	movs	r1, #4
 80054fa:	f7fe f91b 	bl	8003734 <OLED_ShowNum>
			x_pos += 16;
 80054fe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005502:	3310      	adds	r3, #16
 8005504:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if(hour < 10){
 8005508:	e01f      	b.n	800554a <Show_Time+0x282>
		}
		else{
			OLED_ShowNum(x_pos, 4, hour, 2, 32);
 800550a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800550c:	f897 003f 	ldrb.w	r0, [r7, #63]	@ 0x3f
 8005510:	2320      	movs	r3, #32
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	2302      	movs	r3, #2
 8005516:	2104      	movs	r1, #4
 8005518:	f7fe f90c 	bl	8003734 <OLED_ShowNum>
			x_pos += 32;
 800551c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005520:	3320      	adds	r3, #32
 8005522:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if(hour < 10){
 8005526:	e010      	b.n	800554a <Show_Time+0x282>
 8005528:	200004d8 	.word	0x200004d8
 800552c:	20000038 	.word	0x20000038
 8005530:	08010a14 	.word	0x08010a14
 8005534:	20000028 	.word	0x20000028
 8005538:	200004dc 	.word	0x200004dc
 800553c:	08010a3c 	.word	0x08010a3c
		}
	}
	else{
		x_pos += 32;
 8005540:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005544:	3320      	adds	r3, #32
 8005546:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}

	if(gMenu != curMenu){
 800554a:	4b5d      	ldr	r3, [pc, #372]	@ (80056c0 <Show_Time+0x3f8>)
 800554c:	781a      	ldrb	r2, [r3, #0]
 800554e:	4b5d      	ldr	r3, [pc, #372]	@ (80056c4 <Show_Time+0x3fc>)
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d006      	beq.n	8005564 <Show_Time+0x29c>
		OLED_ShowChar(x_pos, 4, ':', 32);
 8005556:	f897 003f 	ldrb.w	r0, [r7, #63]	@ 0x3f
 800555a:	2320      	movs	r3, #32
 800555c:	223a      	movs	r2, #58	@ 0x3a
 800555e:	2104      	movs	r1, #4
 8005560:	f7fd ff6a 	bl	8003438 <OLED_ShowChar>
	}

	x_pos += 16;
 8005564:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005568:	3310      	adds	r3, #16
 800556a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if(min != preTime.min || gMenu != curMenu){
 800556e:	4b56      	ldr	r3, [pc, #344]	@ (80056c8 <Show_Time+0x400>)
 8005570:	891b      	ldrh	r3, [r3, #8]
 8005572:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005574:	429a      	cmp	r2, r3
 8005576:	d105      	bne.n	8005584 <Show_Time+0x2bc>
 8005578:	4b51      	ldr	r3, [pc, #324]	@ (80056c0 <Show_Time+0x3f8>)
 800557a:	781a      	ldrb	r2, [r3, #0]
 800557c:	4b51      	ldr	r3, [pc, #324]	@ (80056c4 <Show_Time+0x3fc>)
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	429a      	cmp	r2, r3
 8005582:	d02e      	beq.n	80055e2 <Show_Time+0x31a>
		if(min < 10){
 8005584:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005586:	2b09      	cmp	r3, #9
 8005588:	d81c      	bhi.n	80055c4 <Show_Time+0x2fc>
			OLED_ShowNum(x_pos, 4, 0, 1, 32);
 800558a:	f897 003f 	ldrb.w	r0, [r7, #63]	@ 0x3f
 800558e:	2320      	movs	r3, #32
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	2301      	movs	r3, #1
 8005594:	2200      	movs	r2, #0
 8005596:	2104      	movs	r1, #4
 8005598:	f7fe f8cc 	bl	8003734 <OLED_ShowNum>
			x_pos += 16;
 800559c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80055a0:	3310      	adds	r3, #16
 80055a2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			OLED_ShowNum(x_pos, 4, min, 1, 32);
 80055a6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80055a8:	f897 003f 	ldrb.w	r0, [r7, #63]	@ 0x3f
 80055ac:	2320      	movs	r3, #32
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	2301      	movs	r3, #1
 80055b2:	2104      	movs	r1, #4
 80055b4:	f7fe f8be 	bl	8003734 <OLED_ShowNum>
			x_pos += 16;
 80055b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80055bc:	3310      	adds	r3, #16
 80055be:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if(min < 10){
 80055c2:	e013      	b.n	80055ec <Show_Time+0x324>
		}
		else{
			OLED_ShowNum(x_pos, 4, min, 2, 32);
 80055c4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80055c6:	f897 003f 	ldrb.w	r0, [r7, #63]	@ 0x3f
 80055ca:	2320      	movs	r3, #32
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	2302      	movs	r3, #2
 80055d0:	2104      	movs	r1, #4
 80055d2:	f7fe f8af 	bl	8003734 <OLED_ShowNum>
			x_pos += 32;
 80055d6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80055da:	3320      	adds	r3, #32
 80055dc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if(min < 10){
 80055e0:	e004      	b.n	80055ec <Show_Time+0x324>
		}
	}
	else{
		x_pos += 32;
 80055e2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80055e6:	3320      	adds	r3, #32
 80055e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}

	if(gMenu != curMenu){
 80055ec:	4b34      	ldr	r3, [pc, #208]	@ (80056c0 <Show_Time+0x3f8>)
 80055ee:	781a      	ldrb	r2, [r3, #0]
 80055f0:	4b34      	ldr	r3, [pc, #208]	@ (80056c4 <Show_Time+0x3fc>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d006      	beq.n	8005606 <Show_Time+0x33e>
		OLED_ShowChar(x_pos, 4, ':', 32);
 80055f8:	f897 003f 	ldrb.w	r0, [r7, #63]	@ 0x3f
 80055fc:	2320      	movs	r3, #32
 80055fe:	223a      	movs	r2, #58	@ 0x3a
 8005600:	2104      	movs	r1, #4
 8005602:	f7fd ff19 	bl	8003438 <OLED_ShowChar>
	}

	x_pos += 16;
 8005606:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800560a:	3310      	adds	r3, #16
 800560c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if(sec != preTime.sec || gMenu != curMenu){
 8005610:	4b2d      	ldr	r3, [pc, #180]	@ (80056c8 <Show_Time+0x400>)
 8005612:	895b      	ldrh	r3, [r3, #10]
 8005614:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8005616:	429a      	cmp	r2, r3
 8005618:	d105      	bne.n	8005626 <Show_Time+0x35e>
 800561a:	4b29      	ldr	r3, [pc, #164]	@ (80056c0 <Show_Time+0x3f8>)
 800561c:	781a      	ldrb	r2, [r3, #0]
 800561e:	4b29      	ldr	r3, [pc, #164]	@ (80056c4 <Show_Time+0x3fc>)
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	429a      	cmp	r2, r3
 8005624:	d02e      	beq.n	8005684 <Show_Time+0x3bc>
		if(sec < 10){
 8005626:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005628:	2b09      	cmp	r3, #9
 800562a:	d81c      	bhi.n	8005666 <Show_Time+0x39e>
			OLED_ShowNum(x_pos, 4, 0, 1, 32);
 800562c:	f897 003f 	ldrb.w	r0, [r7, #63]	@ 0x3f
 8005630:	2320      	movs	r3, #32
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	2301      	movs	r3, #1
 8005636:	2200      	movs	r2, #0
 8005638:	2104      	movs	r1, #4
 800563a:	f7fe f87b 	bl	8003734 <OLED_ShowNum>
			x_pos += 16;
 800563e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005642:	3310      	adds	r3, #16
 8005644:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			OLED_ShowNum(x_pos, 4, sec, 1, 32);
 8005648:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800564a:	f897 003f 	ldrb.w	r0, [r7, #63]	@ 0x3f
 800564e:	2320      	movs	r3, #32
 8005650:	9300      	str	r3, [sp, #0]
 8005652:	2301      	movs	r3, #1
 8005654:	2104      	movs	r1, #4
 8005656:	f7fe f86d 	bl	8003734 <OLED_ShowNum>
			x_pos += 16;
 800565a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800565e:	3310      	adds	r3, #16
 8005660:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if(sec < 10){
 8005664:	e013      	b.n	800568e <Show_Time+0x3c6>
		}
		else{
			OLED_ShowNum(x_pos, 4, sec, 2, 32);
 8005666:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8005668:	f897 003f 	ldrb.w	r0, [r7, #63]	@ 0x3f
 800566c:	2320      	movs	r3, #32
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	2302      	movs	r3, #2
 8005672:	2104      	movs	r1, #4
 8005674:	f7fe f85e 	bl	8003734 <OLED_ShowNum>
			x_pos += 32;
 8005678:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800567c:	3320      	adds	r3, #32
 800567e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if(sec < 10){
 8005682:	e004      	b.n	800568e <Show_Time+0x3c6>
		}
	}
	else{
		x_pos += 32;
 8005684:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005688:	3320      	adds	r3, #32
 800568a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}

	preTime.year = year;
 800568e:	4a0e      	ldr	r2, [pc, #56]	@ (80056c8 <Show_Time+0x400>)
 8005690:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005692:	8013      	strh	r3, [r2, #0]
	preTime.month = month;
 8005694:	4a0c      	ldr	r2, [pc, #48]	@ (80056c8 <Show_Time+0x400>)
 8005696:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005698:	8053      	strh	r3, [r2, #2]
	preTime.day = day;
 800569a:	4a0b      	ldr	r2, [pc, #44]	@ (80056c8 <Show_Time+0x400>)
 800569c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800569e:	8093      	strh	r3, [r2, #4]
	preTime.hour = hour;
 80056a0:	4a09      	ldr	r2, [pc, #36]	@ (80056c8 <Show_Time+0x400>)
 80056a2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80056a4:	80d3      	strh	r3, [r2, #6]
	preTime.min = min;
 80056a6:	4a08      	ldr	r2, [pc, #32]	@ (80056c8 <Show_Time+0x400>)
 80056a8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80056aa:	8113      	strh	r3, [r2, #8]
	preTime.sec = sec;
 80056ac:	4a06      	ldr	r2, [pc, #24]	@ (80056c8 <Show_Time+0x400>)
 80056ae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80056b0:	8153      	strh	r3, [r2, #10]
	preTime.weekday = weekday;
 80056b2:	4a05      	ldr	r2, [pc, #20]	@ (80056c8 <Show_Time+0x400>)
 80056b4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80056b6:	8193      	strh	r3, [r2, #12]

}
 80056b8:	bf00      	nop
 80056ba:	3740      	adds	r7, #64	@ 0x40
 80056bc:	46bd      	mov	sp, r7
 80056be:	bdb0      	pop	{r4, r5, r7, pc}
 80056c0:	20000038 	.word	0x20000038
 80056c4:	200004d8 	.word	0x200004d8
 80056c8:	200004dc 	.word	0x200004dc

080056cc <Show_Alarm>:

//mosquitto_pub -h "18.185.92.160" -p 1883 -u test -P test -t "0001" -m "{\"cmd\":\"menu\", \"tab\":\"3\"}"
void Show_Alarm(void)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af02      	add	r7, sp, #8
	uint8_t hour, min, x_pos = 16;
 80056d2:	2310      	movs	r3, #16
 80056d4:	71fb      	strb	r3, [r7, #7]

	Link_Find_Alarm(&hour, &min);
 80056d6:	1d7a      	adds	r2, r7, #5
 80056d8:	1dbb      	adds	r3, r7, #6
 80056da:	4611      	mov	r1, r2
 80056dc:	4618      	mov	r0, r3
 80056de:	f7ff fab9 	bl	8004c54 <Link_Find_Alarm>

	if (gMenu != curMenu)
 80056e2:	4b4b      	ldr	r3, [pc, #300]	@ (8005810 <Show_Alarm+0x144>)
 80056e4:	781a      	ldrb	r2, [r3, #0]
 80056e6:	4b4b      	ldr	r3, [pc, #300]	@ (8005814 <Show_Alarm+0x148>)
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d007      	beq.n	80056fe <Show_Alarm+0x32>
	{
		OLED_Clear();
 80056ee:	f7fd fe18 	bl	8003322 <OLED_Clear>

		OLED_ShowString(46, 1, (uint8_t *)"ALARM", 16);
 80056f2:	2310      	movs	r3, #16
 80056f4:	4a48      	ldr	r2, [pc, #288]	@ (8005818 <Show_Alarm+0x14c>)
 80056f6:	2101      	movs	r1, #1
 80056f8:	202e      	movs	r0, #46	@ 0x2e
 80056fa:	f7fe f881 	bl	8003800 <OLED_ShowString>
	}

	if (gMenu != curMenu || hour != preTime.hour)
 80056fe:	4b44      	ldr	r3, [pc, #272]	@ (8005810 <Show_Alarm+0x144>)
 8005700:	781a      	ldrb	r2, [r3, #0]
 8005702:	4b44      	ldr	r3, [pc, #272]	@ (8005814 <Show_Alarm+0x148>)
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	429a      	cmp	r2, r3
 8005708:	d105      	bne.n	8005716 <Show_Alarm+0x4a>
 800570a:	79bb      	ldrb	r3, [r7, #6]
 800570c:	461a      	mov	r2, r3
 800570e:	4b43      	ldr	r3, [pc, #268]	@ (800581c <Show_Alarm+0x150>)
 8005710:	88db      	ldrh	r3, [r3, #6]
 8005712:	429a      	cmp	r2, r3
 8005714:	d027      	beq.n	8005766 <Show_Alarm+0x9a>
	{
		if (hour < 10)
 8005716:	79bb      	ldrb	r3, [r7, #6]
 8005718:	2b09      	cmp	r3, #9
 800571a:	d817      	bhi.n	800574c <Show_Alarm+0x80>
		{
			OLED_ShowNum(x_pos, 3, 0, 1, 40);
 800571c:	79f8      	ldrb	r0, [r7, #7]
 800571e:	2328      	movs	r3, #40	@ 0x28
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	2301      	movs	r3, #1
 8005724:	2200      	movs	r2, #0
 8005726:	2103      	movs	r1, #3
 8005728:	f7fe f804 	bl	8003734 <OLED_ShowNum>
			x_pos += 20;
 800572c:	79fb      	ldrb	r3, [r7, #7]
 800572e:	3314      	adds	r3, #20
 8005730:	71fb      	strb	r3, [r7, #7]
			OLED_ShowNum(x_pos, 3, hour, 1, 40);
 8005732:	79bb      	ldrb	r3, [r7, #6]
 8005734:	461a      	mov	r2, r3
 8005736:	79f8      	ldrb	r0, [r7, #7]
 8005738:	2328      	movs	r3, #40	@ 0x28
 800573a:	9300      	str	r3, [sp, #0]
 800573c:	2301      	movs	r3, #1
 800573e:	2103      	movs	r1, #3
 8005740:	f7fd fff8 	bl	8003734 <OLED_ShowNum>
			x_pos += 20;
 8005744:	79fb      	ldrb	r3, [r7, #7]
 8005746:	3314      	adds	r3, #20
 8005748:	71fb      	strb	r3, [r7, #7]
		if (hour < 10)
 800574a:	e00f      	b.n	800576c <Show_Alarm+0xa0>
		}
		else
		{
			OLED_ShowNum(x_pos, 3, hour, 2, 40);
 800574c:	79bb      	ldrb	r3, [r7, #6]
 800574e:	461a      	mov	r2, r3
 8005750:	79f8      	ldrb	r0, [r7, #7]
 8005752:	2328      	movs	r3, #40	@ 0x28
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	2302      	movs	r3, #2
 8005758:	2103      	movs	r1, #3
 800575a:	f7fd ffeb 	bl	8003734 <OLED_ShowNum>
			x_pos += 40;
 800575e:	79fb      	ldrb	r3, [r7, #7]
 8005760:	3328      	adds	r3, #40	@ 0x28
 8005762:	71fb      	strb	r3, [r7, #7]
		if (hour < 10)
 8005764:	e002      	b.n	800576c <Show_Alarm+0xa0>
		}
	}
	else
	{
		x_pos += 40;
 8005766:	79fb      	ldrb	r3, [r7, #7]
 8005768:	3328      	adds	r3, #40	@ 0x28
 800576a:	71fb      	strb	r3, [r7, #7]
	}

	if (gMenu != curMenu)
 800576c:	4b28      	ldr	r3, [pc, #160]	@ (8005810 <Show_Alarm+0x144>)
 800576e:	781a      	ldrb	r2, [r3, #0]
 8005770:	4b28      	ldr	r3, [pc, #160]	@ (8005814 <Show_Alarm+0x148>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	429a      	cmp	r2, r3
 8005776:	d005      	beq.n	8005784 <Show_Alarm+0xb8>
		OLED_ShowChar(x_pos, 3, ':', 40);
 8005778:	79f8      	ldrb	r0, [r7, #7]
 800577a:	2328      	movs	r3, #40	@ 0x28
 800577c:	223a      	movs	r2, #58	@ 0x3a
 800577e:	2103      	movs	r1, #3
 8005780:	f7fd fe5a 	bl	8003438 <OLED_ShowChar>

	x_pos += 20;
 8005784:	79fb      	ldrb	r3, [r7, #7]
 8005786:	3314      	adds	r3, #20
 8005788:	71fb      	strb	r3, [r7, #7]

	if (gMenu != curMenu || min != preTime.min)
 800578a:	4b21      	ldr	r3, [pc, #132]	@ (8005810 <Show_Alarm+0x144>)
 800578c:	781a      	ldrb	r2, [r3, #0]
 800578e:	4b21      	ldr	r3, [pc, #132]	@ (8005814 <Show_Alarm+0x148>)
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	429a      	cmp	r2, r3
 8005794:	d105      	bne.n	80057a2 <Show_Alarm+0xd6>
 8005796:	797b      	ldrb	r3, [r7, #5]
 8005798:	461a      	mov	r2, r3
 800579a:	4b20      	ldr	r3, [pc, #128]	@ (800581c <Show_Alarm+0x150>)
 800579c:	891b      	ldrh	r3, [r3, #8]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d027      	beq.n	80057f2 <Show_Alarm+0x126>
	{
		if (min < 10)
 80057a2:	797b      	ldrb	r3, [r7, #5]
 80057a4:	2b09      	cmp	r3, #9
 80057a6:	d817      	bhi.n	80057d8 <Show_Alarm+0x10c>
		{
			OLED_ShowNum(x_pos, 3, 0, 1, 40);
 80057a8:	79f8      	ldrb	r0, [r7, #7]
 80057aa:	2328      	movs	r3, #40	@ 0x28
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	2301      	movs	r3, #1
 80057b0:	2200      	movs	r2, #0
 80057b2:	2103      	movs	r1, #3
 80057b4:	f7fd ffbe 	bl	8003734 <OLED_ShowNum>
			x_pos += 20;
 80057b8:	79fb      	ldrb	r3, [r7, #7]
 80057ba:	3314      	adds	r3, #20
 80057bc:	71fb      	strb	r3, [r7, #7]
			OLED_ShowNum(x_pos, 3, min, 1, 40);
 80057be:	797b      	ldrb	r3, [r7, #5]
 80057c0:	461a      	mov	r2, r3
 80057c2:	79f8      	ldrb	r0, [r7, #7]
 80057c4:	2328      	movs	r3, #40	@ 0x28
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	2301      	movs	r3, #1
 80057ca:	2103      	movs	r1, #3
 80057cc:	f7fd ffb2 	bl	8003734 <OLED_ShowNum>
			x_pos += 20;
 80057d0:	79fb      	ldrb	r3, [r7, #7]
 80057d2:	3314      	adds	r3, #20
 80057d4:	71fb      	strb	r3, [r7, #7]
		if (min < 10)
 80057d6:	e00f      	b.n	80057f8 <Show_Alarm+0x12c>
		}
		else
		{
			OLED_ShowNum(x_pos, 3, min, 2, 40);
 80057d8:	797b      	ldrb	r3, [r7, #5]
 80057da:	461a      	mov	r2, r3
 80057dc:	79f8      	ldrb	r0, [r7, #7]
 80057de:	2328      	movs	r3, #40	@ 0x28
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	2302      	movs	r3, #2
 80057e4:	2103      	movs	r1, #3
 80057e6:	f7fd ffa5 	bl	8003734 <OLED_ShowNum>
			x_pos += 40;
 80057ea:	79fb      	ldrb	r3, [r7, #7]
 80057ec:	3328      	adds	r3, #40	@ 0x28
 80057ee:	71fb      	strb	r3, [r7, #7]
		if (min < 10)
 80057f0:	e002      	b.n	80057f8 <Show_Alarm+0x12c>
		}
	}
	else
	{
		x_pos += 40;
 80057f2:	79fb      	ldrb	r3, [r7, #7]
 80057f4:	3328      	adds	r3, #40	@ 0x28
 80057f6:	71fb      	strb	r3, [r7, #7]
	}

	preTime.hour = hour;
 80057f8:	79bb      	ldrb	r3, [r7, #6]
 80057fa:	461a      	mov	r2, r3
 80057fc:	4b07      	ldr	r3, [pc, #28]	@ (800581c <Show_Alarm+0x150>)
 80057fe:	80da      	strh	r2, [r3, #6]
	preTime.min = min;
 8005800:	797b      	ldrb	r3, [r7, #5]
 8005802:	461a      	mov	r2, r3
 8005804:	4b05      	ldr	r3, [pc, #20]	@ (800581c <Show_Alarm+0x150>)
 8005806:	811a      	strh	r2, [r3, #8]
}
 8005808:	bf00      	nop
 800580a:	3708      	adds	r7, #8
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	20000038 	.word	0x20000038
 8005814:	200004d8 	.word	0x200004d8
 8005818:	08010a58 	.word	0x08010a58
 800581c:	200004dc 	.word	0x200004dc

08005820 <Show_Note>:

void Show_Note(void)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b088      	sub	sp, #32
 8005824:	af02      	add	r7, sp, #8
	uint8_t hour = 0, min = 0, x_pos = 24;
 8005826:	2300      	movs	r3, #0
 8005828:	75bb      	strb	r3, [r7, #22]
 800582a:	2300      	movs	r3, #0
 800582c:	757b      	strb	r3, [r7, #21]
 800582e:	2318      	movs	r3, #24
 8005830:	75fb      	strb	r3, [r7, #23]
	char event[15] = {0};
 8005832:	2300      	movs	r3, #0
 8005834:	607b      	str	r3, [r7, #4]
 8005836:	f107 0308 	add.w	r3, r7, #8
 800583a:	2200      	movs	r2, #0
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	605a      	str	r2, [r3, #4]
 8005840:	f8c3 2007 	str.w	r2, [r3, #7]

	if (gMenu != curMenu)
 8005844:	4b6b      	ldr	r3, [pc, #428]	@ (80059f4 <Show_Note+0x1d4>)
 8005846:	781a      	ldrb	r2, [r3, #0]
 8005848:	4b6b      	ldr	r3, [pc, #428]	@ (80059f8 <Show_Note+0x1d8>)
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	429a      	cmp	r2, r3
 800584e:	d007      	beq.n	8005860 <Show_Note+0x40>
	{
		OLED_Clear();
 8005850:	f7fd fd67 	bl	8003322 <OLED_Clear>

		OLED_ShowString(36, 0, (uint8_t *)"Reminder", 16);
 8005854:	2310      	movs	r3, #16
 8005856:	4a69      	ldr	r2, [pc, #420]	@ (80059fc <Show_Note+0x1dc>)
 8005858:	2100      	movs	r1, #0
 800585a:	2024      	movs	r0, #36	@ 0x24
 800585c:	f7fd ffd0 	bl	8003800 <OLED_ShowString>
	}

	//Show the time of the event
	Link_Find_Note(&hour, &min, event);
 8005860:	1d3a      	adds	r2, r7, #4
 8005862:	f107 0115 	add.w	r1, r7, #21
 8005866:	f107 0316 	add.w	r3, r7, #22
 800586a:	4618      	mov	r0, r3
 800586c:	f7ff fad6 	bl	8004e1c <Link_Find_Note>

	if (gMenu != curMenu || hour != preTime.hour)
 8005870:	4b60      	ldr	r3, [pc, #384]	@ (80059f4 <Show_Note+0x1d4>)
 8005872:	781a      	ldrb	r2, [r3, #0]
 8005874:	4b60      	ldr	r3, [pc, #384]	@ (80059f8 <Show_Note+0x1d8>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	429a      	cmp	r2, r3
 800587a:	d105      	bne.n	8005888 <Show_Note+0x68>
 800587c:	7dbb      	ldrb	r3, [r7, #22]
 800587e:	461a      	mov	r2, r3
 8005880:	4b5f      	ldr	r3, [pc, #380]	@ (8005a00 <Show_Note+0x1e0>)
 8005882:	88db      	ldrh	r3, [r3, #6]
 8005884:	429a      	cmp	r2, r3
 8005886:	d027      	beq.n	80058d8 <Show_Note+0xb8>
	{
		if (hour < 10)
 8005888:	7dbb      	ldrb	r3, [r7, #22]
 800588a:	2b09      	cmp	r3, #9
 800588c:	d817      	bhi.n	80058be <Show_Note+0x9e>
		{
			OLED_ShowNum(x_pos, 2, 0, 1, 32);
 800588e:	7df8      	ldrb	r0, [r7, #23]
 8005890:	2320      	movs	r3, #32
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	2301      	movs	r3, #1
 8005896:	2200      	movs	r2, #0
 8005898:	2102      	movs	r1, #2
 800589a:	f7fd ff4b 	bl	8003734 <OLED_ShowNum>
			x_pos += 16;
 800589e:	7dfb      	ldrb	r3, [r7, #23]
 80058a0:	3310      	adds	r3, #16
 80058a2:	75fb      	strb	r3, [r7, #23]
			OLED_ShowNum(x_pos, 2, hour, 1, 32);
 80058a4:	7dbb      	ldrb	r3, [r7, #22]
 80058a6:	461a      	mov	r2, r3
 80058a8:	7df8      	ldrb	r0, [r7, #23]
 80058aa:	2320      	movs	r3, #32
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	2301      	movs	r3, #1
 80058b0:	2102      	movs	r1, #2
 80058b2:	f7fd ff3f 	bl	8003734 <OLED_ShowNum>
			x_pos += 16;
 80058b6:	7dfb      	ldrb	r3, [r7, #23]
 80058b8:	3310      	adds	r3, #16
 80058ba:	75fb      	strb	r3, [r7, #23]
		if (hour < 10)
 80058bc:	e00f      	b.n	80058de <Show_Note+0xbe>
		}
		else
		{
			OLED_ShowNum(x_pos, 2, hour, 2, 32);
 80058be:	7dbb      	ldrb	r3, [r7, #22]
 80058c0:	461a      	mov	r2, r3
 80058c2:	7df8      	ldrb	r0, [r7, #23]
 80058c4:	2320      	movs	r3, #32
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	2302      	movs	r3, #2
 80058ca:	2102      	movs	r1, #2
 80058cc:	f7fd ff32 	bl	8003734 <OLED_ShowNum>
			x_pos += 32;
 80058d0:	7dfb      	ldrb	r3, [r7, #23]
 80058d2:	3320      	adds	r3, #32
 80058d4:	75fb      	strb	r3, [r7, #23]
		if (hour < 10)
 80058d6:	e002      	b.n	80058de <Show_Note+0xbe>
		}
	}
	else
	{
		x_pos += 32;
 80058d8:	7dfb      	ldrb	r3, [r7, #23]
 80058da:	3320      	adds	r3, #32
 80058dc:	75fb      	strb	r3, [r7, #23]
	}

	OLED_ShowChar(x_pos, 2, ':', 32);
 80058de:	7df8      	ldrb	r0, [r7, #23]
 80058e0:	2320      	movs	r3, #32
 80058e2:	223a      	movs	r2, #58	@ 0x3a
 80058e4:	2102      	movs	r1, #2
 80058e6:	f7fd fda7 	bl	8003438 <OLED_ShowChar>

	x_pos += 16;
 80058ea:	7dfb      	ldrb	r3, [r7, #23]
 80058ec:	3310      	adds	r3, #16
 80058ee:	75fb      	strb	r3, [r7, #23]

	if (gMenu != curMenu || min != preTime.min)
 80058f0:	4b40      	ldr	r3, [pc, #256]	@ (80059f4 <Show_Note+0x1d4>)
 80058f2:	781a      	ldrb	r2, [r3, #0]
 80058f4:	4b40      	ldr	r3, [pc, #256]	@ (80059f8 <Show_Note+0x1d8>)
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d105      	bne.n	8005908 <Show_Note+0xe8>
 80058fc:	7d7b      	ldrb	r3, [r7, #21]
 80058fe:	461a      	mov	r2, r3
 8005900:	4b3f      	ldr	r3, [pc, #252]	@ (8005a00 <Show_Note+0x1e0>)
 8005902:	891b      	ldrh	r3, [r3, #8]
 8005904:	429a      	cmp	r2, r3
 8005906:	d027      	beq.n	8005958 <Show_Note+0x138>
	{
		if (min < 10)
 8005908:	7d7b      	ldrb	r3, [r7, #21]
 800590a:	2b09      	cmp	r3, #9
 800590c:	d817      	bhi.n	800593e <Show_Note+0x11e>
		{
			OLED_ShowNum(x_pos, 2, 0, 1, 32);
 800590e:	7df8      	ldrb	r0, [r7, #23]
 8005910:	2320      	movs	r3, #32
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	2301      	movs	r3, #1
 8005916:	2200      	movs	r2, #0
 8005918:	2102      	movs	r1, #2
 800591a:	f7fd ff0b 	bl	8003734 <OLED_ShowNum>
			x_pos += 16;
 800591e:	7dfb      	ldrb	r3, [r7, #23]
 8005920:	3310      	adds	r3, #16
 8005922:	75fb      	strb	r3, [r7, #23]
			OLED_ShowNum(x_pos, 2, min, 1, 32);
 8005924:	7d7b      	ldrb	r3, [r7, #21]
 8005926:	461a      	mov	r2, r3
 8005928:	7df8      	ldrb	r0, [r7, #23]
 800592a:	2320      	movs	r3, #32
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	2301      	movs	r3, #1
 8005930:	2102      	movs	r1, #2
 8005932:	f7fd feff 	bl	8003734 <OLED_ShowNum>
			x_pos += 16;
 8005936:	7dfb      	ldrb	r3, [r7, #23]
 8005938:	3310      	adds	r3, #16
 800593a:	75fb      	strb	r3, [r7, #23]
		if (min < 10)
 800593c:	e00f      	b.n	800595e <Show_Note+0x13e>
		}
		else
		{
			OLED_ShowNum(x_pos, 2, min, 2, 32);
 800593e:	7d7b      	ldrb	r3, [r7, #21]
 8005940:	461a      	mov	r2, r3
 8005942:	7df8      	ldrb	r0, [r7, #23]
 8005944:	2320      	movs	r3, #32
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	2302      	movs	r3, #2
 800594a:	2102      	movs	r1, #2
 800594c:	f7fd fef2 	bl	8003734 <OLED_ShowNum>
			x_pos += 32;
 8005950:	7dfb      	ldrb	r3, [r7, #23]
 8005952:	3320      	adds	r3, #32
 8005954:	75fb      	strb	r3, [r7, #23]
		if (min < 10)
 8005956:	e002      	b.n	800595e <Show_Note+0x13e>
		}
	}
	else
	{
		x_pos += 32;
 8005958:	7dfb      	ldrb	r3, [r7, #23]
 800595a:	3320      	adds	r3, #32
 800595c:	75fb      	strb	r3, [r7, #23]
	}

	if (event[0] == 0)
 800595e:	793b      	ldrb	r3, [r7, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d113      	bne.n	800598c <Show_Note+0x16c>
	{
		OLED_Clearrow(6);
 8005964:	2006      	movs	r0, #6
 8005966:	f7fd fd06 	bl	8003376 <OLED_Clearrow>
		OLED_Clearrow(7);
 800596a:	2007      	movs	r0, #7
 800596c:	f7fd fd03 	bl	8003376 <OLED_Clearrow>

		preTime.hour = hour;
 8005970:	7dbb      	ldrb	r3, [r7, #22]
 8005972:	461a      	mov	r2, r3
 8005974:	4b22      	ldr	r3, [pc, #136]	@ (8005a00 <Show_Note+0x1e0>)
 8005976:	80da      	strh	r2, [r3, #6]
		preTime.min = min;
 8005978:	7d7b      	ldrb	r3, [r7, #21]
 800597a:	461a      	mov	r2, r3
 800597c:	4b20      	ldr	r3, [pc, #128]	@ (8005a00 <Show_Note+0x1e0>)
 800597e:	811a      	strh	r2, [r3, #8]
		strcpy(preTime.event, event);
 8005980:	1d3b      	adds	r3, r7, #4
 8005982:	4619      	mov	r1, r3
 8005984:	481f      	ldr	r0, [pc, #124]	@ (8005a04 <Show_Note+0x1e4>)
 8005986:	f008 f9d2 	bl	800dd2e <strcpy>
 800598a:	e02f      	b.n	80059ec <Show_Note+0x1cc>

		return;
	}

	if (curMenu != gMenu || strcmp(preTime.event, event))
 800598c:	4b1a      	ldr	r3, [pc, #104]	@ (80059f8 <Show_Note+0x1d8>)
 800598e:	781a      	ldrb	r2, [r3, #0]
 8005990:	4b18      	ldr	r3, [pc, #96]	@ (80059f4 <Show_Note+0x1d4>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	429a      	cmp	r2, r3
 8005996:	d107      	bne.n	80059a8 <Show_Note+0x188>
 8005998:	1d3b      	adds	r3, r7, #4
 800599a:	4619      	mov	r1, r3
 800599c:	4819      	ldr	r0, [pc, #100]	@ (8005a04 <Show_Note+0x1e4>)
 800599e:	f7fa fc1f 	bl	80001e0 <strcmp>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d005      	beq.n	80059b4 <Show_Note+0x194>
	{
		OLED_Clearrow(6);
 80059a8:	2006      	movs	r0, #6
 80059aa:	f7fd fce4 	bl	8003376 <OLED_Clearrow>
		OLED_Clearrow(7);
 80059ae:	2007      	movs	r0, #7
 80059b0:	f7fd fce1 	bl	8003376 <OLED_Clearrow>
	}

	OLED_ShowString((128 - 8*strlen(event))/2, 6, (uint8_t *)event, 16);
 80059b4:	1d3b      	adds	r3, r7, #4
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fa fc0a 	bl	80001d0 <strlen>
 80059bc:	4603      	mov	r3, r0
 80059be:	f1c3 0310 	rsb	r3, r3, #16
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	085b      	lsrs	r3, r3, #1
 80059c6:	b2d8      	uxtb	r0, r3
 80059c8:	1d3a      	adds	r2, r7, #4
 80059ca:	2310      	movs	r3, #16
 80059cc:	2106      	movs	r1, #6
 80059ce:	f7fd ff17 	bl	8003800 <OLED_ShowString>

	preTime.hour = hour;
 80059d2:	7dbb      	ldrb	r3, [r7, #22]
 80059d4:	461a      	mov	r2, r3
 80059d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005a00 <Show_Note+0x1e0>)
 80059d8:	80da      	strh	r2, [r3, #6]
	preTime.min = min;
 80059da:	7d7b      	ldrb	r3, [r7, #21]
 80059dc:	461a      	mov	r2, r3
 80059de:	4b08      	ldr	r3, [pc, #32]	@ (8005a00 <Show_Note+0x1e0>)
 80059e0:	811a      	strh	r2, [r3, #8]
	strcpy(preTime.event, event);
 80059e2:	1d3b      	adds	r3, r7, #4
 80059e4:	4619      	mov	r1, r3
 80059e6:	4807      	ldr	r0, [pc, #28]	@ (8005a04 <Show_Note+0x1e4>)
 80059e8:	f008 f9a1 	bl	800dd2e <strcpy>
}
 80059ec:	3718      	adds	r7, #24
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	20000038 	.word	0x20000038
 80059f8:	200004d8 	.word	0x200004d8
 80059fc:	08010a60 	.word	0x08010a60
 8005a00:	200004dc 	.word	0x200004dc
 8005a04:	200004ea 	.word	0x200004ea

08005a08 <OLED_Show_Menu>:

void OLED_Show_Menu(void){
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
	OLED_Clear();
 8005a0e:	f7fd fc88 	bl	8003322 <OLED_Clear>
	uint8_t light;

	while(1){
		xSemaphoreTake(semHandle, portMAX_DELAY);
 8005a12:	4b29      	ldr	r3, [pc, #164]	@ (8005ab8 <OLED_Show_Menu+0xb0>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f004 ff6e 	bl	800a8fc <xQueueSemaphoreTake>
		light = gInfo.light;
 8005a20:	4b26      	ldr	r3, [pc, #152]	@ (8005abc <OLED_Show_Menu+0xb4>)
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	71fb      	strb	r3, [r7, #7]
		xSemaphoreGive(semHandle);
 8005a26:	4b24      	ldr	r3, [pc, #144]	@ (8005ab8 <OLED_Show_Menu+0xb0>)
 8005a28:	6818      	ldr	r0, [r3, #0]
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	2100      	movs	r1, #0
 8005a30:	f004 fce2 	bl	800a3f8 <xQueueGenericSend>

		if (light < 20)
 8005a34:	79fb      	ldrb	r3, [r7, #7]
 8005a36:	2b13      	cmp	r3, #19
 8005a38:	d803      	bhi.n	8005a42 <OLED_Show_Menu+0x3a>
			Show_OLED_Light(1);
 8005a3a:	2001      	movs	r0, #1
 8005a3c:	f7ff fb1c 	bl	8005078 <Show_OLED_Light>
 8005a40:	e009      	b.n	8005a56 <OLED_Show_Menu+0x4e>
		else if (light < 40)
 8005a42:	79fb      	ldrb	r3, [r7, #7]
 8005a44:	2b27      	cmp	r3, #39	@ 0x27
 8005a46:	d803      	bhi.n	8005a50 <OLED_Show_Menu+0x48>
			Show_OLED_Light(2);
 8005a48:	2002      	movs	r0, #2
 8005a4a:	f7ff fb15 	bl	8005078 <Show_OLED_Light>
 8005a4e:	e002      	b.n	8005a56 <OLED_Show_Menu+0x4e>
		else
			Show_OLED_Light(3);
 8005a50:	2003      	movs	r0, #3
 8005a52:	f7ff fb11 	bl	8005078 <Show_OLED_Light>

		if (gMenu == 1)
 8005a56:	4b1a      	ldr	r3, [pc, #104]	@ (8005ac0 <OLED_Show_Menu+0xb8>)
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d106      	bne.n	8005a6c <OLED_Show_Menu+0x64>
		{
			Show_Environment();
 8005a5e:	f7ff fb29 	bl	80050b4 <Show_Environment>
			curMenu = gMenu;
 8005a62:	4b17      	ldr	r3, [pc, #92]	@ (8005ac0 <OLED_Show_Menu+0xb8>)
 8005a64:	781a      	ldrb	r2, [r3, #0]
 8005a66:	4b17      	ldr	r3, [pc, #92]	@ (8005ac4 <OLED_Show_Menu+0xbc>)
 8005a68:	701a      	strb	r2, [r3, #0]
 8005a6a:	e01f      	b.n	8005aac <OLED_Show_Menu+0xa4>
		}
		else if (gMenu == 2)
 8005a6c:	4b14      	ldr	r3, [pc, #80]	@ (8005ac0 <OLED_Show_Menu+0xb8>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d106      	bne.n	8005a82 <OLED_Show_Menu+0x7a>
		{
			Show_Time();
 8005a74:	f7ff fc28 	bl	80052c8 <Show_Time>
			curMenu = gMenu;
 8005a78:	4b11      	ldr	r3, [pc, #68]	@ (8005ac0 <OLED_Show_Menu+0xb8>)
 8005a7a:	781a      	ldrb	r2, [r3, #0]
 8005a7c:	4b11      	ldr	r3, [pc, #68]	@ (8005ac4 <OLED_Show_Menu+0xbc>)
 8005a7e:	701a      	strb	r2, [r3, #0]
 8005a80:	e014      	b.n	8005aac <OLED_Show_Menu+0xa4>
		}
		else if (gMenu == 3)
 8005a82:	4b0f      	ldr	r3, [pc, #60]	@ (8005ac0 <OLED_Show_Menu+0xb8>)
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	d106      	bne.n	8005a98 <OLED_Show_Menu+0x90>
		{
			Show_Alarm();
 8005a8a:	f7ff fe1f 	bl	80056cc <Show_Alarm>
			curMenu = gMenu;
 8005a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005ac0 <OLED_Show_Menu+0xb8>)
 8005a90:	781a      	ldrb	r2, [r3, #0]
 8005a92:	4b0c      	ldr	r3, [pc, #48]	@ (8005ac4 <OLED_Show_Menu+0xbc>)
 8005a94:	701a      	strb	r2, [r3, #0]
 8005a96:	e009      	b.n	8005aac <OLED_Show_Menu+0xa4>
		}
		else if (gMenu == 4)
 8005a98:	4b09      	ldr	r3, [pc, #36]	@ (8005ac0 <OLED_Show_Menu+0xb8>)
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	2b04      	cmp	r3, #4
 8005a9e:	d105      	bne.n	8005aac <OLED_Show_Menu+0xa4>
		{
			Show_Note();
 8005aa0:	f7ff febe 	bl	8005820 <Show_Note>
			curMenu = gMenu;
 8005aa4:	4b06      	ldr	r3, [pc, #24]	@ (8005ac0 <OLED_Show_Menu+0xb8>)
 8005aa6:	781a      	ldrb	r2, [r3, #0]
 8005aa8:	4b06      	ldr	r3, [pc, #24]	@ (8005ac4 <OLED_Show_Menu+0xbc>)
 8005aaa:	701a      	strb	r2, [r3, #0]
		}
		osDelay(500);
 8005aac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005ab0:	f004 fa58 	bl	8009f64 <osDelay>
		xSemaphoreTake(semHandle, portMAX_DELAY);
 8005ab4:	e7ad      	b.n	8005a12 <OLED_Show_Menu+0xa>
 8005ab6:	bf00      	nop
 8005ab8:	20000348 	.word	0x20000348
 8005abc:	20000028 	.word	0x20000028
 8005ac0:	20000038 	.word	0x20000038
 8005ac4:	200004d8 	.word	0x200004d8

08005ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ace:	2300      	movs	r3, #0
 8005ad0:	607b      	str	r3, [r7, #4]
 8005ad2:	4b12      	ldr	r3, [pc, #72]	@ (8005b1c <HAL_MspInit+0x54>)
 8005ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ad6:	4a11      	ldr	r2, [pc, #68]	@ (8005b1c <HAL_MspInit+0x54>)
 8005ad8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005adc:	6453      	str	r3, [r2, #68]	@ 0x44
 8005ade:	4b0f      	ldr	r3, [pc, #60]	@ (8005b1c <HAL_MspInit+0x54>)
 8005ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ae2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ae6:	607b      	str	r3, [r7, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005aea:	2300      	movs	r3, #0
 8005aec:	603b      	str	r3, [r7, #0]
 8005aee:	4b0b      	ldr	r3, [pc, #44]	@ (8005b1c <HAL_MspInit+0x54>)
 8005af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af2:	4a0a      	ldr	r2, [pc, #40]	@ (8005b1c <HAL_MspInit+0x54>)
 8005af4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005af8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005afa:	4b08      	ldr	r3, [pc, #32]	@ (8005b1c <HAL_MspInit+0x54>)
 8005afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b02:	603b      	str	r3, [r7, #0]
 8005b04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005b06:	2200      	movs	r2, #0
 8005b08:	210f      	movs	r1, #15
 8005b0a:	f06f 0001 	mvn.w	r0, #1
 8005b0e:	f000 fc4b 	bl	80063a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b12:	bf00      	nop
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	40023800 	.word	0x40023800

08005b20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b08e      	sub	sp, #56	@ 0x38
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8005b30:	2300      	movs	r3, #0
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	4b33      	ldr	r3, [pc, #204]	@ (8005c04 <HAL_InitTick+0xe4>)
 8005b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b38:	4a32      	ldr	r2, [pc, #200]	@ (8005c04 <HAL_InitTick+0xe4>)
 8005b3a:	f043 0302 	orr.w	r3, r3, #2
 8005b3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b40:	4b30      	ldr	r3, [pc, #192]	@ (8005c04 <HAL_InitTick+0xe4>)
 8005b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005b4c:	f107 0210 	add.w	r2, r7, #16
 8005b50:	f107 0314 	add.w	r3, r7, #20
 8005b54:	4611      	mov	r1, r2
 8005b56:	4618      	mov	r0, r3
 8005b58:	f002 fcec 	bl	8008534 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d103      	bne.n	8005b6e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005b66:	f002 fcbd 	bl	80084e4 <HAL_RCC_GetPCLK1Freq>
 8005b6a:	6378      	str	r0, [r7, #52]	@ 0x34
 8005b6c:	e004      	b.n	8005b78 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005b6e:	f002 fcb9 	bl	80084e4 <HAL_RCC_GetPCLK1Freq>
 8005b72:	4603      	mov	r3, r0
 8005b74:	005b      	lsls	r3, r3, #1
 8005b76:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b7a:	4a23      	ldr	r2, [pc, #140]	@ (8005c08 <HAL_InitTick+0xe8>)
 8005b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b80:	0c9b      	lsrs	r3, r3, #18
 8005b82:	3b01      	subs	r3, #1
 8005b84:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8005b86:	4b21      	ldr	r3, [pc, #132]	@ (8005c0c <HAL_InitTick+0xec>)
 8005b88:	4a21      	ldr	r2, [pc, #132]	@ (8005c10 <HAL_InitTick+0xf0>)
 8005b8a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8005b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8005c0c <HAL_InitTick+0xec>)
 8005b8e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005b92:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8005b94:	4a1d      	ldr	r2, [pc, #116]	@ (8005c0c <HAL_InitTick+0xec>)
 8005b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b98:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8005b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8005c0c <HAL_InitTick+0xec>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8005c0c <HAL_InitTick+0xec>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ba6:	4b19      	ldr	r3, [pc, #100]	@ (8005c0c <HAL_InitTick+0xec>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8005bac:	4817      	ldr	r0, [pc, #92]	@ (8005c0c <HAL_InitTick+0xec>)
 8005bae:	f002 fcf3 	bl	8008598 <HAL_TIM_Base_Init>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8005bb8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d11b      	bne.n	8005bf8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8005bc0:	4812      	ldr	r0, [pc, #72]	@ (8005c0c <HAL_InitTick+0xec>)
 8005bc2:	f002 fd43 	bl	800864c <HAL_TIM_Base_Start_IT>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8005bcc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d111      	bne.n	8005bf8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005bd4:	201d      	movs	r0, #29
 8005bd6:	f000 fc03 	bl	80063e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b0f      	cmp	r3, #15
 8005bde:	d808      	bhi.n	8005bf2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8005be0:	2200      	movs	r2, #0
 8005be2:	6879      	ldr	r1, [r7, #4]
 8005be4:	201d      	movs	r0, #29
 8005be6:	f000 fbdf 	bl	80063a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005bea:	4a0a      	ldr	r2, [pc, #40]	@ (8005c14 <HAL_InitTick+0xf4>)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6013      	str	r3, [r2, #0]
 8005bf0:	e002      	b.n	8005bf8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005bf8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3738      	adds	r7, #56	@ 0x38
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	40023800 	.word	0x40023800
 8005c08:	431bde83 	.word	0x431bde83
 8005c0c:	200004fc 	.word	0x200004fc
 8005c10:	40000400 	.word	0x40000400
 8005c14:	20000044 	.word	0x20000044

08005c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005c1c:	bf00      	nop
 8005c1e:	e7fd      	b.n	8005c1c <NMI_Handler+0x4>

08005c20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005c20:	b480      	push	{r7}
 8005c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005c24:	bf00      	nop
 8005c26:	e7fd      	b.n	8005c24 <HardFault_Handler+0x4>

08005c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c2c:	bf00      	nop
 8005c2e:	e7fd      	b.n	8005c2c <MemManage_Handler+0x4>

08005c30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c30:	b480      	push	{r7}
 8005c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c34:	bf00      	nop
 8005c36:	e7fd      	b.n	8005c34 <BusFault_Handler+0x4>

08005c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005c3c:	bf00      	nop
 8005c3e:	e7fd      	b.n	8005c3c <UsageFault_Handler+0x4>

08005c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c40:	b480      	push	{r7}
 8005c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005c44:	bf00      	nop
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
	...

08005c50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005c54:	4802      	ldr	r0, [pc, #8]	@ (8005c60 <TIM3_IRQHandler+0x10>)
 8005c56:	f002 fd69 	bl	800872c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005c5a:	bf00      	nop
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	200004fc 	.word	0x200004fc

08005c64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005c64:	b480      	push	{r7}
 8005c66:	af00      	add	r7, sp, #0
  return 1;
 8005c68:	2301      	movs	r3, #1
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <_kill>:

int _kill(int pid, int sig)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005c7e:	f008 f819 	bl	800dcb4 <__errno>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2216      	movs	r2, #22
 8005c86:	601a      	str	r2, [r3, #0]
  return -1;
 8005c88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <_exit>:

void _exit (int status)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005c9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7ff ffe7 	bl	8005c74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005ca6:	bf00      	nop
 8005ca8:	e7fd      	b.n	8005ca6 <_exit+0x12>

08005caa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b086      	sub	sp, #24
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	617b      	str	r3, [r7, #20]
 8005cba:	e00a      	b.n	8005cd2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005cbc:	f3af 8000 	nop.w
 8005cc0:	4601      	mov	r1, r0
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	1c5a      	adds	r2, r3, #1
 8005cc6:	60ba      	str	r2, [r7, #8]
 8005cc8:	b2ca      	uxtb	r2, r1
 8005cca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	617b      	str	r3, [r7, #20]
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	dbf0      	blt.n	8005cbc <_read+0x12>
  }

  return len;
 8005cda:	687b      	ldr	r3, [r7, #4]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3718      	adds	r7, #24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005cec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005d0c:	605a      	str	r2, [r3, #4]
  return 0;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <_isatty>:

int _isatty(int file)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005d24:	2301      	movs	r3, #1
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b085      	sub	sp, #20
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	60f8      	str	r0, [r7, #12]
 8005d3a:	60b9      	str	r1, [r7, #8]
 8005d3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005d54:	4a14      	ldr	r2, [pc, #80]	@ (8005da8 <_sbrk+0x5c>)
 8005d56:	4b15      	ldr	r3, [pc, #84]	@ (8005dac <_sbrk+0x60>)
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005d60:	4b13      	ldr	r3, [pc, #76]	@ (8005db0 <_sbrk+0x64>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d102      	bne.n	8005d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005d68:	4b11      	ldr	r3, [pc, #68]	@ (8005db0 <_sbrk+0x64>)
 8005d6a:	4a12      	ldr	r2, [pc, #72]	@ (8005db4 <_sbrk+0x68>)
 8005d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005d6e:	4b10      	ldr	r3, [pc, #64]	@ (8005db0 <_sbrk+0x64>)
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4413      	add	r3, r2
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d207      	bcs.n	8005d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005d7c:	f007 ff9a 	bl	800dcb4 <__errno>
 8005d80:	4603      	mov	r3, r0
 8005d82:	220c      	movs	r2, #12
 8005d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005d86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005d8a:	e009      	b.n	8005da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005d8c:	4b08      	ldr	r3, [pc, #32]	@ (8005db0 <_sbrk+0x64>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005d92:	4b07      	ldr	r3, [pc, #28]	@ (8005db0 <_sbrk+0x64>)
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4413      	add	r3, r2
 8005d9a:	4a05      	ldr	r2, [pc, #20]	@ (8005db0 <_sbrk+0x64>)
 8005d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3718      	adds	r7, #24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	20020000 	.word	0x20020000
 8005dac:	00000400 	.word	0x00000400
 8005db0:	20000548 	.word	0x20000548
 8005db4:	200050f0 	.word	0x200050f0

08005db8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005db8:	b480      	push	{r7}
 8005dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005dbc:	4b06      	ldr	r3, [pc, #24]	@ (8005dd8 <SystemInit+0x20>)
 8005dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc2:	4a05      	ldr	r2, [pc, #20]	@ (8005dd8 <SystemInit+0x20>)
 8005dc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005dc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005dcc:	bf00      	nop
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	e000ed00 	.word	0xe000ed00

08005ddc <UploadHandle>:

extern SemaphoreHandle_t semHandle;
extern EnvInfo gInfo;

void UploadHandle(void)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b0c6      	sub	sp, #280	@ 0x118
 8005de0:	af00      	add	r7, sp, #0
	xSemaphoreTake(semHandle, portMAX_DELAY);
 8005de2:	4b5d      	ldr	r3, [pc, #372]	@ (8005f58 <UploadHandle+0x17c>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005dea:	4618      	mov	r0, r3
 8005dec:	f004 fd86 	bl	800a8fc <xQueueSemaphoreTake>
	//printf("Semaphore taken in Task upload\n");
	uint16_t light = gInfo.light;
 8005df0:	4b5a      	ldr	r3, [pc, #360]	@ (8005f5c <UploadHandle+0x180>)
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
	uint8_t temp = gInfo.temp;
 8005df8:	4b58      	ldr	r3, [pc, #352]	@ (8005f5c <UploadHandle+0x180>)
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
	uint8_t humi = gInfo.humi;
 8005e00:	4b56      	ldr	r3, [pc, #344]	@ (8005f5c <UploadHandle+0x180>)
 8005e02:	785b      	ldrb	r3, [r3, #1]
 8005e04:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
	xSemaphoreGive(semHandle);
 8005e08:	4b53      	ldr	r3, [pc, #332]	@ (8005f58 <UploadHandle+0x17c>)
 8005e0a:	6818      	ldr	r0, [r3, #0]
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	2200      	movs	r2, #0
 8005e10:	2100      	movs	r1, #0
 8005e12:	f004 faf1 	bl	800a3f8 <xQueueGenericSend>
	//printf("Semaphore given in Task upload\n");

	//create json object
	cJSON *sendObject = cJSON_CreateObject();
 8005e16:	f7fd f8ba 	bl	8002f8e <cJSON_CreateObject>
 8005e1a:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108

	//add key/value
	cJSON_AddNumberToObject(sendObject, "light", light);
 8005e1e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7fa fb7e 	bl	8000524 <__aeabi_ui2d>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	ec43 2b10 	vmov	d0, r2, r3
 8005e30:	f7fd f88e 	bl	8002f50 <cJSON_CreateNumber>
 8005e34:	4603      	mov	r3, r0
 8005e36:	461a      	mov	r2, r3
 8005e38:	4949      	ldr	r1, [pc, #292]	@ (8005f60 <UploadHandle+0x184>)
 8005e3a:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8005e3e:	f7fd f863 	bl	8002f08 <cJSON_AddItemToObject>
	cJSON_AddNumberToObject(sendObject, "temp", temp);
 8005e42:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7fa fb6c 	bl	8000524 <__aeabi_ui2d>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	ec43 2b10 	vmov	d0, r2, r3
 8005e54:	f7fd f87c 	bl	8002f50 <cJSON_CreateNumber>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	4941      	ldr	r1, [pc, #260]	@ (8005f64 <UploadHandle+0x188>)
 8005e5e:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8005e62:	f7fd f851 	bl	8002f08 <cJSON_AddItemToObject>
	cJSON_AddNumberToObject(sendObject, "humi", humi);
 8005e66:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7fa fb5a 	bl	8000524 <__aeabi_ui2d>
 8005e70:	4602      	mov	r2, r0
 8005e72:	460b      	mov	r3, r1
 8005e74:	ec43 2b10 	vmov	d0, r2, r3
 8005e78:	f7fd f86a 	bl	8002f50 <cJSON_CreateNumber>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	461a      	mov	r2, r3
 8005e80:	4939      	ldr	r1, [pc, #228]	@ (8005f68 <UploadHandle+0x18c>)
 8005e82:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8005e86:	f7fd f83f 	bl	8002f08 <cJSON_AddItemToObject>

	//convert Json object to string
	char *sendStr = cJSON_Print(sendObject);
 8005e8a:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8005e8e:	f7fc f8e5 	bl	800205c <cJSON_Print>
 8005e92:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

	char *p = sendStr;
 8005e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e9a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	char output[256] = {0};
 8005e9e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005ea2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	601a      	str	r2, [r3, #0]
 8005eaa:	3304      	adds	r3, #4
 8005eac:	22fc      	movs	r2, #252	@ 0xfc
 8005eae:	2100      	movs	r1, #0
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f007 faa2 	bl	800d3fa <memset>
	int i = 0;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110


	//add \\ before " and ,
	while (*p != '\0')
 8005ebc:	e034      	b.n	8005f28 <UploadHandle+0x14c>
	{
		if (*p == '"' || *p == ',')
 8005ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	2b22      	cmp	r3, #34	@ 0x22
 8005ec6:	d004      	beq.n	8005ed2 <UploadHandle+0xf6>
 8005ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	2b2c      	cmp	r3, #44	@ 0x2c
 8005ed0:	d118      	bne.n	8005f04 <UploadHandle+0x128>
		{
			output[i++] = '\\';
 8005ed2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	f8c7 2110 	str.w	r2, [r7, #272]	@ 0x110
 8005edc:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8005ee0:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8005ee4:	215c      	movs	r1, #92	@ 0x5c
 8005ee6:	54d1      	strb	r1, [r2, r3]
			output[i++] = *p;
 8005ee8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	f8c7 2110 	str.w	r2, [r7, #272]	@ 0x110
 8005ef2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8005ef6:	7811      	ldrb	r1, [r2, #0]
 8005ef8:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8005efc:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8005f00:	54d1      	strb	r1, [r2, r3]
 8005f02:	e00c      	b.n	8005f1e <UploadHandle+0x142>
		}
		else
			output[i++] = *p;
 8005f04:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005f08:	1c5a      	adds	r2, r3, #1
 8005f0a:	f8c7 2110 	str.w	r2, [r7, #272]	@ 0x110
 8005f0e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8005f12:	7811      	ldrb	r1, [r2, #0]
 8005f14:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8005f18:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8005f1c:	54d1      	strb	r1, [r2, r3]

		p++;
 8005f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f22:	3301      	adds	r3, #1
 8005f24:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	while (*p != '\0')
 8005f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1c5      	bne.n	8005ebe <UploadHandle+0xe2>
	}
	ESP8266_Publish("0001upload", output);
 8005f32:	1d3b      	adds	r3, r7, #4
 8005f34:	4619      	mov	r1, r3
 8005f36:	480d      	ldr	r0, [pc, #52]	@ (8005f6c <UploadHandle+0x190>)
 8005f38:	f7fe f924 	bl	8004184 <ESP8266_Publish>
	cJSON_Delete(sendObject);
 8005f3c:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8005f40:	f7fb f922 	bl	8001188 <cJSON_Delete>
	vPortFree(sendStr);
 8005f44:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 8005f48:	f006 fe7e 	bl	800cc48 <vPortFree>
}
 8005f4c:	bf00      	nop
 8005f4e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20000348 	.word	0x20000348
 8005f5c:	20000028 	.word	0x20000028
 8005f60:	08010a6c 	.word	0x08010a6c
 8005f64:	08010a74 	.word	0x08010a74
 8005f68:	08010a7c 	.word	0x08010a7c
 8005f6c:	08010a84 	.word	0x08010a84

08005f70 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005f74:	4b10      	ldr	r3, [pc, #64]	@ (8005fb8 <MX_USART3_UART_Init+0x48>)
 8005f76:	4a11      	ldr	r2, [pc, #68]	@ (8005fbc <MX_USART3_UART_Init+0x4c>)
 8005f78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 74880;
 8005f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8005fb8 <MX_USART3_UART_Init+0x48>)
 8005f7c:	4a10      	ldr	r2, [pc, #64]	@ (8005fc0 <MX_USART3_UART_Init+0x50>)
 8005f7e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005f80:	4b0d      	ldr	r3, [pc, #52]	@ (8005fb8 <MX_USART3_UART_Init+0x48>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005f86:	4b0c      	ldr	r3, [pc, #48]	@ (8005fb8 <MX_USART3_UART_Init+0x48>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005fb8 <MX_USART3_UART_Init+0x48>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005f92:	4b09      	ldr	r3, [pc, #36]	@ (8005fb8 <MX_USART3_UART_Init+0x48>)
 8005f94:	220c      	movs	r2, #12
 8005f96:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f98:	4b07      	ldr	r3, [pc, #28]	@ (8005fb8 <MX_USART3_UART_Init+0x48>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f9e:	4b06      	ldr	r3, [pc, #24]	@ (8005fb8 <MX_USART3_UART_Init+0x48>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005fa4:	4804      	ldr	r0, [pc, #16]	@ (8005fb8 <MX_USART3_UART_Init+0x48>)
 8005fa6:	f002 fd99 	bl	8008adc <HAL_UART_Init>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d001      	beq.n	8005fb4 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8005fb0:	f7ff f838 	bl	8005024 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005fb4:	bf00      	nop
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	2000054c 	.word	0x2000054c
 8005fbc:	40004800 	.word	0x40004800
 8005fc0:	00012480 	.word	0x00012480

08005fc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b08a      	sub	sp, #40	@ 0x28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fcc:	f107 0314 	add.w	r3, r7, #20
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	605a      	str	r2, [r3, #4]
 8005fd6:	609a      	str	r2, [r3, #8]
 8005fd8:	60da      	str	r2, [r3, #12]
 8005fda:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a2d      	ldr	r2, [pc, #180]	@ (8006098 <HAL_UART_MspInit+0xd4>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d153      	bne.n	800608e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	613b      	str	r3, [r7, #16]
 8005fea:	4b2c      	ldr	r3, [pc, #176]	@ (800609c <HAL_UART_MspInit+0xd8>)
 8005fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fee:	4a2b      	ldr	r2, [pc, #172]	@ (800609c <HAL_UART_MspInit+0xd8>)
 8005ff0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ff4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ff6:	4b29      	ldr	r3, [pc, #164]	@ (800609c <HAL_UART_MspInit+0xd8>)
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ffe:	613b      	str	r3, [r7, #16]
 8006000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006002:	2300      	movs	r3, #0
 8006004:	60fb      	str	r3, [r7, #12]
 8006006:	4b25      	ldr	r3, [pc, #148]	@ (800609c <HAL_UART_MspInit+0xd8>)
 8006008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800600a:	4a24      	ldr	r2, [pc, #144]	@ (800609c <HAL_UART_MspInit+0xd8>)
 800600c:	f043 0302 	orr.w	r3, r3, #2
 8006010:	6313      	str	r3, [r2, #48]	@ 0x30
 8006012:	4b22      	ldr	r3, [pc, #136]	@ (800609c <HAL_UART_MspInit+0xd8>)
 8006014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800601e:	2300      	movs	r3, #0
 8006020:	60bb      	str	r3, [r7, #8]
 8006022:	4b1e      	ldr	r3, [pc, #120]	@ (800609c <HAL_UART_MspInit+0xd8>)
 8006024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006026:	4a1d      	ldr	r2, [pc, #116]	@ (800609c <HAL_UART_MspInit+0xd8>)
 8006028:	f043 0308 	orr.w	r3, r3, #8
 800602c:	6313      	str	r3, [r2, #48]	@ 0x30
 800602e:	4b1b      	ldr	r3, [pc, #108]	@ (800609c <HAL_UART_MspInit+0xd8>)
 8006030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006032:	f003 0308 	and.w	r3, r3, #8
 8006036:	60bb      	str	r3, [r7, #8]
 8006038:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800603a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800603e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006040:	2302      	movs	r3, #2
 8006042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006044:	2300      	movs	r3, #0
 8006046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006048:	2303      	movs	r3, #3
 800604a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800604c:	2307      	movs	r3, #7
 800604e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006050:	f107 0314 	add.w	r3, r7, #20
 8006054:	4619      	mov	r1, r3
 8006056:	4812      	ldr	r0, [pc, #72]	@ (80060a0 <HAL_UART_MspInit+0xdc>)
 8006058:	f000 fa62 	bl	8006520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800605c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006062:	2302      	movs	r3, #2
 8006064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006066:	2300      	movs	r3, #0
 8006068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800606a:	2303      	movs	r3, #3
 800606c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800606e:	2307      	movs	r3, #7
 8006070:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006072:	f107 0314 	add.w	r3, r7, #20
 8006076:	4619      	mov	r1, r3
 8006078:	480a      	ldr	r0, [pc, #40]	@ (80060a4 <HAL_UART_MspInit+0xe0>)
 800607a:	f000 fa51 	bl	8006520 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */
    HAL_NVIC_SetPriority(USART3_IRQn, 6, 0); //6 is priority, let it lower than the priority of systemcall (5)
 800607e:	2200      	movs	r2, #0
 8006080:	2106      	movs	r1, #6
 8006082:	2027      	movs	r0, #39	@ 0x27
 8006084:	f000 f990 	bl	80063a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006088:	2027      	movs	r0, #39	@ 0x27
 800608a:	f000 f9a9 	bl	80063e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART3_MspInit 1 */
  }
}
 800608e:	bf00      	nop
 8006090:	3728      	adds	r7, #40	@ 0x28
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	40004800 	.word	0x40004800
 800609c:	40023800 	.word	0x40023800
 80060a0:	40020400 	.word	0x40020400
 80060a4:	40020c00 	.word	0x40020c00

080060a8 <USART3_IRQHandler>:
  }
}

/* USER CODE BEGIN 1 */
void USART3_IRQHandler(void)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart3);
 80060ac:	4804      	ldr	r0, [pc, #16]	@ (80060c0 <USART3_IRQHandler+0x18>)
 80060ae:	f002 fee5 	bl	8008e7c <HAL_UART_IRQHandler>

	HAL_UARTEx_ReceiveToIdle_IT(&huart3, gUartBuf, sizeof(gUartBuf));
 80060b2:	2280      	movs	r2, #128	@ 0x80
 80060b4:	4903      	ldr	r1, [pc, #12]	@ (80060c4 <USART3_IRQHandler+0x1c>)
 80060b6:	4802      	ldr	r0, [pc, #8]	@ (80060c0 <USART3_IRQHandler+0x18>)
 80060b8:	f002 fe82 	bl	8008dc0 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80060bc:	bf00      	nop
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	2000054c 	.word	0x2000054c
 80060c4:	20000358 	.word	0x20000358

080060c8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	460b      	mov	r3, r1
 80060d2:	807b      	strh	r3, [r7, #2]
	printf("%s\r\n", gUartBuf);
 80060d4:	490d      	ldr	r1, [pc, #52]	@ (800610c <HAL_UARTEx_RxEventCallback+0x44>)
 80060d6:	480e      	ldr	r0, [pc, #56]	@ (8006110 <HAL_UARTEx_RxEventCallback+0x48>)
 80060d8:	f007 f900 	bl	800d2dc <iprintf>

	if (strlen((char *)gUartBuf) < 30)
 80060dc:	480b      	ldr	r0, [pc, #44]	@ (800610c <HAL_UARTEx_RxEventCallback+0x44>)
 80060de:	f7fa f877 	bl	80001d0 <strlen>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b1d      	cmp	r3, #29
 80060e6:	d90c      	bls.n	8006102 <HAL_UARTEx_RxEventCallback+0x3a>
		return;

	xQueueSendFromISR(uartHandle, gUartBuf, NULL);
 80060e8:	4b0a      	ldr	r3, [pc, #40]	@ (8006114 <HAL_UARTEx_RxEventCallback+0x4c>)
 80060ea:	6818      	ldr	r0, [r3, #0]
 80060ec:	2300      	movs	r3, #0
 80060ee:	2200      	movs	r2, #0
 80060f0:	4906      	ldr	r1, [pc, #24]	@ (800610c <HAL_UARTEx_RxEventCallback+0x44>)
 80060f2:	f004 fa83 	bl	800a5fc <xQueueGenericSendFromISR>

	memset(gUartBuf, 0, sizeof(gUartBuf));
 80060f6:	2280      	movs	r2, #128	@ 0x80
 80060f8:	2100      	movs	r1, #0
 80060fa:	4804      	ldr	r0, [pc, #16]	@ (800610c <HAL_UARTEx_RxEventCallback+0x44>)
 80060fc:	f007 f97d 	bl	800d3fa <memset>
 8006100:	e000      	b.n	8006104 <HAL_UARTEx_RxEventCallback+0x3c>
		return;
 8006102:	bf00      	nop
}
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	20000358 	.word	0x20000358
 8006110:	08010a90 	.word	0x08010a90
 8006114:	20000344 	.word	0x20000344

08006118 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006118:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006150 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800611c:	f7ff fe4c 	bl	8005db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006120:	480c      	ldr	r0, [pc, #48]	@ (8006154 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006122:	490d      	ldr	r1, [pc, #52]	@ (8006158 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006124:	4a0d      	ldr	r2, [pc, #52]	@ (800615c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006128:	e002      	b.n	8006130 <LoopCopyDataInit>

0800612a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800612a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800612c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800612e:	3304      	adds	r3, #4

08006130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006134:	d3f9      	bcc.n	800612a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006136:	4a0a      	ldr	r2, [pc, #40]	@ (8006160 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006138:	4c0a      	ldr	r4, [pc, #40]	@ (8006164 <LoopFillZerobss+0x22>)
  movs r3, #0
 800613a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800613c:	e001      	b.n	8006142 <LoopFillZerobss>

0800613e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800613e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006140:	3204      	adds	r2, #4

08006142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006144:	d3fb      	bcc.n	800613e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006146:	f007 fdbb 	bl	800dcc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800614a:	f7fe fed4 	bl	8004ef6 <main>
  bx  lr    
 800614e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006150:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006158:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 800615c:	08012e08 	.word	0x08012e08
  ldr r2, =_sbss
 8006160:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8006164:	200050f0 	.word	0x200050f0

08006168 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006168:	e7fe      	b.n	8006168 <ADC_IRQHandler>
	...

0800616c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006170:	4b0e      	ldr	r3, [pc, #56]	@ (80061ac <HAL_Init+0x40>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a0d      	ldr	r2, [pc, #52]	@ (80061ac <HAL_Init+0x40>)
 8006176:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800617a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800617c:	4b0b      	ldr	r3, [pc, #44]	@ (80061ac <HAL_Init+0x40>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a0a      	ldr	r2, [pc, #40]	@ (80061ac <HAL_Init+0x40>)
 8006182:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006186:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006188:	4b08      	ldr	r3, [pc, #32]	@ (80061ac <HAL_Init+0x40>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a07      	ldr	r2, [pc, #28]	@ (80061ac <HAL_Init+0x40>)
 800618e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006192:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006194:	2003      	movs	r0, #3
 8006196:	f000 f8fc 	bl	8006392 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800619a:	200f      	movs	r0, #15
 800619c:	f7ff fcc0 	bl	8005b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80061a0:	f7ff fc92 	bl	8005ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	40023c00 	.word	0x40023c00

080061b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80061b0:	b480      	push	{r7}
 80061b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80061b4:	4b06      	ldr	r3, [pc, #24]	@ (80061d0 <HAL_IncTick+0x20>)
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	461a      	mov	r2, r3
 80061ba:	4b06      	ldr	r3, [pc, #24]	@ (80061d4 <HAL_IncTick+0x24>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4413      	add	r3, r2
 80061c0:	4a04      	ldr	r2, [pc, #16]	@ (80061d4 <HAL_IncTick+0x24>)
 80061c2:	6013      	str	r3, [r2, #0]
}
 80061c4:	bf00      	nop
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	20000048 	.word	0x20000048
 80061d4:	20000594 	.word	0x20000594

080061d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80061d8:	b480      	push	{r7}
 80061da:	af00      	add	r7, sp, #0
  return uwTick;
 80061dc:	4b03      	ldr	r3, [pc, #12]	@ (80061ec <HAL_GetTick+0x14>)
 80061de:	681b      	ldr	r3, [r3, #0]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	20000594 	.word	0x20000594

080061f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80061f8:	f7ff ffee 	bl	80061d8 <HAL_GetTick>
 80061fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006208:	d005      	beq.n	8006216 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800620a:	4b0a      	ldr	r3, [pc, #40]	@ (8006234 <HAL_Delay+0x44>)
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	461a      	mov	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	4413      	add	r3, r2
 8006214:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006216:	bf00      	nop
 8006218:	f7ff ffde 	bl	80061d8 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	429a      	cmp	r2, r3
 8006226:	d8f7      	bhi.n	8006218 <HAL_Delay+0x28>
  {
  }
}
 8006228:	bf00      	nop
 800622a:	bf00      	nop
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	20000048 	.word	0x20000048

08006238 <__NVIC_SetPriorityGrouping>:
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f003 0307 	and.w	r3, r3, #7
 8006246:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006248:	4b0c      	ldr	r3, [pc, #48]	@ (800627c <__NVIC_SetPriorityGrouping+0x44>)
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006254:	4013      	ands	r3, r2
 8006256:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006260:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006264:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800626a:	4a04      	ldr	r2, [pc, #16]	@ (800627c <__NVIC_SetPriorityGrouping+0x44>)
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	60d3      	str	r3, [r2, #12]
}
 8006270:	bf00      	nop
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	e000ed00 	.word	0xe000ed00

08006280 <__NVIC_GetPriorityGrouping>:
{
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006284:	4b04      	ldr	r3, [pc, #16]	@ (8006298 <__NVIC_GetPriorityGrouping+0x18>)
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	0a1b      	lsrs	r3, r3, #8
 800628a:	f003 0307 	and.w	r3, r3, #7
}
 800628e:	4618      	mov	r0, r3
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	e000ed00 	.word	0xe000ed00

0800629c <__NVIC_EnableIRQ>:
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	4603      	mov	r3, r0
 80062a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	db0b      	blt.n	80062c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062ae:	79fb      	ldrb	r3, [r7, #7]
 80062b0:	f003 021f 	and.w	r2, r3, #31
 80062b4:	4907      	ldr	r1, [pc, #28]	@ (80062d4 <__NVIC_EnableIRQ+0x38>)
 80062b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062ba:	095b      	lsrs	r3, r3, #5
 80062bc:	2001      	movs	r0, #1
 80062be:	fa00 f202 	lsl.w	r2, r0, r2
 80062c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80062c6:	bf00      	nop
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	e000e100 	.word	0xe000e100

080062d8 <__NVIC_SetPriority>:
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	4603      	mov	r3, r0
 80062e0:	6039      	str	r1, [r7, #0]
 80062e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	db0a      	blt.n	8006302 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	490c      	ldr	r1, [pc, #48]	@ (8006324 <__NVIC_SetPriority+0x4c>)
 80062f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062f6:	0112      	lsls	r2, r2, #4
 80062f8:	b2d2      	uxtb	r2, r2
 80062fa:	440b      	add	r3, r1
 80062fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006300:	e00a      	b.n	8006318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	b2da      	uxtb	r2, r3
 8006306:	4908      	ldr	r1, [pc, #32]	@ (8006328 <__NVIC_SetPriority+0x50>)
 8006308:	79fb      	ldrb	r3, [r7, #7]
 800630a:	f003 030f 	and.w	r3, r3, #15
 800630e:	3b04      	subs	r3, #4
 8006310:	0112      	lsls	r2, r2, #4
 8006312:	b2d2      	uxtb	r2, r2
 8006314:	440b      	add	r3, r1
 8006316:	761a      	strb	r2, [r3, #24]
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	e000e100 	.word	0xe000e100
 8006328:	e000ed00 	.word	0xe000ed00

0800632c <NVIC_EncodePriority>:
{
 800632c:	b480      	push	{r7}
 800632e:	b089      	sub	sp, #36	@ 0x24
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f003 0307 	and.w	r3, r3, #7
 800633e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	f1c3 0307 	rsb	r3, r3, #7
 8006346:	2b04      	cmp	r3, #4
 8006348:	bf28      	it	cs
 800634a:	2304      	movcs	r3, #4
 800634c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	3304      	adds	r3, #4
 8006352:	2b06      	cmp	r3, #6
 8006354:	d902      	bls.n	800635c <NVIC_EncodePriority+0x30>
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	3b03      	subs	r3, #3
 800635a:	e000      	b.n	800635e <NVIC_EncodePriority+0x32>
 800635c:	2300      	movs	r3, #0
 800635e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006360:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	fa02 f303 	lsl.w	r3, r2, r3
 800636a:	43da      	mvns	r2, r3
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	401a      	ands	r2, r3
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006374:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	fa01 f303 	lsl.w	r3, r1, r3
 800637e:	43d9      	mvns	r1, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006384:	4313      	orrs	r3, r2
}
 8006386:	4618      	mov	r0, r3
 8006388:	3724      	adds	r7, #36	@ 0x24
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b082      	sub	sp, #8
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7ff ff4c 	bl	8006238 <__NVIC_SetPriorityGrouping>
}
 80063a0:	bf00      	nop
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	4603      	mov	r3, r0
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
 80063b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80063b6:	2300      	movs	r3, #0
 80063b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80063ba:	f7ff ff61 	bl	8006280 <__NVIC_GetPriorityGrouping>
 80063be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	68b9      	ldr	r1, [r7, #8]
 80063c4:	6978      	ldr	r0, [r7, #20]
 80063c6:	f7ff ffb1 	bl	800632c <NVIC_EncodePriority>
 80063ca:	4602      	mov	r2, r0
 80063cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063d0:	4611      	mov	r1, r2
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7ff ff80 	bl	80062d8 <__NVIC_SetPriority>
}
 80063d8:	bf00      	nop
 80063da:	3718      	adds	r7, #24
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	4603      	mov	r3, r0
 80063e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80063ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7ff ff54 	bl	800629c <__NVIC_EnableIRQ>
}
 80063f4:	bf00      	nop
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006408:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800640a:	f7ff fee5 	bl	80061d8 <HAL_GetTick>
 800640e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b02      	cmp	r3, #2
 800641a:	d008      	beq.n	800642e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2280      	movs	r2, #128	@ 0x80
 8006420:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e052      	b.n	80064d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 0216 	bic.w	r2, r2, #22
 800643c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	695a      	ldr	r2, [r3, #20]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800644c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006452:	2b00      	cmp	r3, #0
 8006454:	d103      	bne.n	800645e <HAL_DMA_Abort+0x62>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800645a:	2b00      	cmp	r3, #0
 800645c:	d007      	beq.n	800646e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 0208 	bic.w	r2, r2, #8
 800646c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 0201 	bic.w	r2, r2, #1
 800647c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800647e:	e013      	b.n	80064a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006480:	f7ff feaa 	bl	80061d8 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	2b05      	cmp	r3, #5
 800648c:	d90c      	bls.n	80064a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2220      	movs	r2, #32
 8006492:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2203      	movs	r2, #3
 8006498:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e015      	b.n	80064d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1e4      	bne.n	8006480 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064ba:	223f      	movs	r2, #63	@ 0x3f
 80064bc:	409a      	lsls	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d004      	beq.n	80064fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2280      	movs	r2, #128	@ 0x80
 80064f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e00c      	b.n	8006514 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2205      	movs	r2, #5
 80064fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 0201 	bic.w	r2, r2, #1
 8006510:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006520:	b480      	push	{r7}
 8006522:	b089      	sub	sp, #36	@ 0x24
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800652a:	2300      	movs	r3, #0
 800652c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800652e:	2300      	movs	r3, #0
 8006530:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006532:	2300      	movs	r3, #0
 8006534:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006536:	2300      	movs	r3, #0
 8006538:	61fb      	str	r3, [r7, #28]
 800653a:	e16b      	b.n	8006814 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800653c:	2201      	movs	r2, #1
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	fa02 f303 	lsl.w	r3, r2, r3
 8006544:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	4013      	ands	r3, r2
 800654e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	429a      	cmp	r2, r3
 8006556:	f040 815a 	bne.w	800680e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f003 0303 	and.w	r3, r3, #3
 8006562:	2b01      	cmp	r3, #1
 8006564:	d005      	beq.n	8006572 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800656e:	2b02      	cmp	r3, #2
 8006570:	d130      	bne.n	80065d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	005b      	lsls	r3, r3, #1
 800657c:	2203      	movs	r2, #3
 800657e:	fa02 f303 	lsl.w	r3, r2, r3
 8006582:	43db      	mvns	r3, r3
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	4013      	ands	r3, r2
 8006588:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	68da      	ldr	r2, [r3, #12]
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	005b      	lsls	r3, r3, #1
 8006592:	fa02 f303 	lsl.w	r3, r2, r3
 8006596:	69ba      	ldr	r2, [r7, #24]
 8006598:	4313      	orrs	r3, r2
 800659a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	69ba      	ldr	r2, [r7, #24]
 80065a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80065a8:	2201      	movs	r2, #1
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	fa02 f303 	lsl.w	r3, r2, r3
 80065b0:	43db      	mvns	r3, r3
 80065b2:	69ba      	ldr	r2, [r7, #24]
 80065b4:	4013      	ands	r3, r2
 80065b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	091b      	lsrs	r3, r3, #4
 80065be:	f003 0201 	and.w	r2, r3, #1
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	fa02 f303 	lsl.w	r3, r2, r3
 80065c8:	69ba      	ldr	r2, [r7, #24]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	69ba      	ldr	r2, [r7, #24]
 80065d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f003 0303 	and.w	r3, r3, #3
 80065dc:	2b03      	cmp	r3, #3
 80065de:	d017      	beq.n	8006610 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	005b      	lsls	r3, r3, #1
 80065ea:	2203      	movs	r2, #3
 80065ec:	fa02 f303 	lsl.w	r3, r2, r3
 80065f0:	43db      	mvns	r3, r3
 80065f2:	69ba      	ldr	r2, [r7, #24]
 80065f4:	4013      	ands	r3, r2
 80065f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	689a      	ldr	r2, [r3, #8]
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	005b      	lsls	r3, r3, #1
 8006600:	fa02 f303 	lsl.w	r3, r2, r3
 8006604:	69ba      	ldr	r2, [r7, #24]
 8006606:	4313      	orrs	r3, r2
 8006608:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	69ba      	ldr	r2, [r7, #24]
 800660e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f003 0303 	and.w	r3, r3, #3
 8006618:	2b02      	cmp	r3, #2
 800661a:	d123      	bne.n	8006664 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	08da      	lsrs	r2, r3, #3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	3208      	adds	r2, #8
 8006624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006628:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	f003 0307 	and.w	r3, r3, #7
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	220f      	movs	r2, #15
 8006634:	fa02 f303 	lsl.w	r3, r2, r3
 8006638:	43db      	mvns	r3, r3
 800663a:	69ba      	ldr	r2, [r7, #24]
 800663c:	4013      	ands	r3, r2
 800663e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	691a      	ldr	r2, [r3, #16]
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	f003 0307 	and.w	r3, r3, #7
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	fa02 f303 	lsl.w	r3, r2, r3
 8006650:	69ba      	ldr	r2, [r7, #24]
 8006652:	4313      	orrs	r3, r2
 8006654:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	08da      	lsrs	r2, r3, #3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	3208      	adds	r2, #8
 800665e:	69b9      	ldr	r1, [r7, #24]
 8006660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	005b      	lsls	r3, r3, #1
 800666e:	2203      	movs	r2, #3
 8006670:	fa02 f303 	lsl.w	r3, r2, r3
 8006674:	43db      	mvns	r3, r3
 8006676:	69ba      	ldr	r2, [r7, #24]
 8006678:	4013      	ands	r3, r2
 800667a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f003 0203 	and.w	r2, r3, #3
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	005b      	lsls	r3, r3, #1
 8006688:	fa02 f303 	lsl.w	r3, r2, r3
 800668c:	69ba      	ldr	r2, [r7, #24]
 800668e:	4313      	orrs	r3, r2
 8006690:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f000 80b4 	beq.w	800680e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066a6:	2300      	movs	r3, #0
 80066a8:	60fb      	str	r3, [r7, #12]
 80066aa:	4b60      	ldr	r3, [pc, #384]	@ (800682c <HAL_GPIO_Init+0x30c>)
 80066ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ae:	4a5f      	ldr	r2, [pc, #380]	@ (800682c <HAL_GPIO_Init+0x30c>)
 80066b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80066b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80066b6:	4b5d      	ldr	r3, [pc, #372]	@ (800682c <HAL_GPIO_Init+0x30c>)
 80066b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066be:	60fb      	str	r3, [r7, #12]
 80066c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80066c2:	4a5b      	ldr	r2, [pc, #364]	@ (8006830 <HAL_GPIO_Init+0x310>)
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	089b      	lsrs	r3, r3, #2
 80066c8:	3302      	adds	r3, #2
 80066ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	f003 0303 	and.w	r3, r3, #3
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	220f      	movs	r2, #15
 80066da:	fa02 f303 	lsl.w	r3, r2, r3
 80066de:	43db      	mvns	r3, r3
 80066e0:	69ba      	ldr	r2, [r7, #24]
 80066e2:	4013      	ands	r3, r2
 80066e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a52      	ldr	r2, [pc, #328]	@ (8006834 <HAL_GPIO_Init+0x314>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d02b      	beq.n	8006746 <HAL_GPIO_Init+0x226>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a51      	ldr	r2, [pc, #324]	@ (8006838 <HAL_GPIO_Init+0x318>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d025      	beq.n	8006742 <HAL_GPIO_Init+0x222>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a50      	ldr	r2, [pc, #320]	@ (800683c <HAL_GPIO_Init+0x31c>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d01f      	beq.n	800673e <HAL_GPIO_Init+0x21e>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a4f      	ldr	r2, [pc, #316]	@ (8006840 <HAL_GPIO_Init+0x320>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d019      	beq.n	800673a <HAL_GPIO_Init+0x21a>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a4e      	ldr	r2, [pc, #312]	@ (8006844 <HAL_GPIO_Init+0x324>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d013      	beq.n	8006736 <HAL_GPIO_Init+0x216>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a4d      	ldr	r2, [pc, #308]	@ (8006848 <HAL_GPIO_Init+0x328>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d00d      	beq.n	8006732 <HAL_GPIO_Init+0x212>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a4c      	ldr	r2, [pc, #304]	@ (800684c <HAL_GPIO_Init+0x32c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d007      	beq.n	800672e <HAL_GPIO_Init+0x20e>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a4b      	ldr	r2, [pc, #300]	@ (8006850 <HAL_GPIO_Init+0x330>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d101      	bne.n	800672a <HAL_GPIO_Init+0x20a>
 8006726:	2307      	movs	r3, #7
 8006728:	e00e      	b.n	8006748 <HAL_GPIO_Init+0x228>
 800672a:	2308      	movs	r3, #8
 800672c:	e00c      	b.n	8006748 <HAL_GPIO_Init+0x228>
 800672e:	2306      	movs	r3, #6
 8006730:	e00a      	b.n	8006748 <HAL_GPIO_Init+0x228>
 8006732:	2305      	movs	r3, #5
 8006734:	e008      	b.n	8006748 <HAL_GPIO_Init+0x228>
 8006736:	2304      	movs	r3, #4
 8006738:	e006      	b.n	8006748 <HAL_GPIO_Init+0x228>
 800673a:	2303      	movs	r3, #3
 800673c:	e004      	b.n	8006748 <HAL_GPIO_Init+0x228>
 800673e:	2302      	movs	r3, #2
 8006740:	e002      	b.n	8006748 <HAL_GPIO_Init+0x228>
 8006742:	2301      	movs	r3, #1
 8006744:	e000      	b.n	8006748 <HAL_GPIO_Init+0x228>
 8006746:	2300      	movs	r3, #0
 8006748:	69fa      	ldr	r2, [r7, #28]
 800674a:	f002 0203 	and.w	r2, r2, #3
 800674e:	0092      	lsls	r2, r2, #2
 8006750:	4093      	lsls	r3, r2
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	4313      	orrs	r3, r2
 8006756:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006758:	4935      	ldr	r1, [pc, #212]	@ (8006830 <HAL_GPIO_Init+0x310>)
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	089b      	lsrs	r3, r3, #2
 800675e:	3302      	adds	r3, #2
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006766:	4b3b      	ldr	r3, [pc, #236]	@ (8006854 <HAL_GPIO_Init+0x334>)
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	43db      	mvns	r3, r3
 8006770:	69ba      	ldr	r2, [r7, #24]
 8006772:	4013      	ands	r3, r2
 8006774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d003      	beq.n	800678a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006782:	69ba      	ldr	r2, [r7, #24]
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	4313      	orrs	r3, r2
 8006788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800678a:	4a32      	ldr	r2, [pc, #200]	@ (8006854 <HAL_GPIO_Init+0x334>)
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006790:	4b30      	ldr	r3, [pc, #192]	@ (8006854 <HAL_GPIO_Init+0x334>)
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	43db      	mvns	r3, r3
 800679a:	69ba      	ldr	r2, [r7, #24]
 800679c:	4013      	ands	r3, r2
 800679e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d003      	beq.n	80067b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80067b4:	4a27      	ldr	r2, [pc, #156]	@ (8006854 <HAL_GPIO_Init+0x334>)
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80067ba:	4b26      	ldr	r3, [pc, #152]	@ (8006854 <HAL_GPIO_Init+0x334>)
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	43db      	mvns	r3, r3
 80067c4:	69ba      	ldr	r2, [r7, #24]
 80067c6:	4013      	ands	r3, r2
 80067c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d003      	beq.n	80067de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80067d6:	69ba      	ldr	r2, [r7, #24]
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	4313      	orrs	r3, r2
 80067dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80067de:	4a1d      	ldr	r2, [pc, #116]	@ (8006854 <HAL_GPIO_Init+0x334>)
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80067e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006854 <HAL_GPIO_Init+0x334>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	43db      	mvns	r3, r3
 80067ee:	69ba      	ldr	r2, [r7, #24]
 80067f0:	4013      	ands	r3, r2
 80067f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	4313      	orrs	r3, r2
 8006806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006808:	4a12      	ldr	r2, [pc, #72]	@ (8006854 <HAL_GPIO_Init+0x334>)
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	3301      	adds	r3, #1
 8006812:	61fb      	str	r3, [r7, #28]
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	2b0f      	cmp	r3, #15
 8006818:	f67f ae90 	bls.w	800653c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800681c:	bf00      	nop
 800681e:	bf00      	nop
 8006820:	3724      	adds	r7, #36	@ 0x24
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	40023800 	.word	0x40023800
 8006830:	40013800 	.word	0x40013800
 8006834:	40020000 	.word	0x40020000
 8006838:	40020400 	.word	0x40020400
 800683c:	40020800 	.word	0x40020800
 8006840:	40020c00 	.word	0x40020c00
 8006844:	40021000 	.word	0x40021000
 8006848:	40021400 	.word	0x40021400
 800684c:	40021800 	.word	0x40021800
 8006850:	40021c00 	.word	0x40021c00
 8006854:	40013c00 	.word	0x40013c00

08006858 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	460b      	mov	r3, r1
 8006862:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	691a      	ldr	r2, [r3, #16]
 8006868:	887b      	ldrh	r3, [r7, #2]
 800686a:	4013      	ands	r3, r2
 800686c:	2b00      	cmp	r3, #0
 800686e:	d002      	beq.n	8006876 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006870:	2301      	movs	r3, #1
 8006872:	73fb      	strb	r3, [r7, #15]
 8006874:	e001      	b.n	800687a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006876:	2300      	movs	r3, #0
 8006878:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800687a:	7bfb      	ldrb	r3, [r7, #15]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	460b      	mov	r3, r1
 8006892:	807b      	strh	r3, [r7, #2]
 8006894:	4613      	mov	r3, r2
 8006896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006898:	787b      	ldrb	r3, [r7, #1]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d003      	beq.n	80068a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800689e:	887a      	ldrh	r2, [r7, #2]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80068a4:	e003      	b.n	80068ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80068a6:	887b      	ldrh	r3, [r7, #2]
 80068a8:	041a      	lsls	r2, r3, #16
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	619a      	str	r2, [r3, #24]
}
 80068ae:	bf00      	nop
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b085      	sub	sp, #20
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	460b      	mov	r3, r1
 80068c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80068cc:	887a      	ldrh	r2, [r7, #2]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	4013      	ands	r3, r2
 80068d2:	041a      	lsls	r2, r3, #16
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	43d9      	mvns	r1, r3
 80068d8:	887b      	ldrh	r3, [r7, #2]
 80068da:	400b      	ands	r3, r1
 80068dc:	431a      	orrs	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	619a      	str	r2, [r3, #24]
}
 80068e2:	bf00      	nop
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
	...

080068f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d101      	bne.n	8006902 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e12b      	b.n	8006b5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d106      	bne.n	800691c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f7fe f8ea 	bl	8004af0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2224      	movs	r2, #36	@ 0x24
 8006920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f022 0201 	bic.w	r2, r2, #1
 8006932:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006942:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006952:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006954:	f001 fdc6 	bl	80084e4 <HAL_RCC_GetPCLK1Freq>
 8006958:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	4a81      	ldr	r2, [pc, #516]	@ (8006b64 <HAL_I2C_Init+0x274>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d807      	bhi.n	8006974 <HAL_I2C_Init+0x84>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4a80      	ldr	r2, [pc, #512]	@ (8006b68 <HAL_I2C_Init+0x278>)
 8006968:	4293      	cmp	r3, r2
 800696a:	bf94      	ite	ls
 800696c:	2301      	movls	r3, #1
 800696e:	2300      	movhi	r3, #0
 8006970:	b2db      	uxtb	r3, r3
 8006972:	e006      	b.n	8006982 <HAL_I2C_Init+0x92>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	4a7d      	ldr	r2, [pc, #500]	@ (8006b6c <HAL_I2C_Init+0x27c>)
 8006978:	4293      	cmp	r3, r2
 800697a:	bf94      	ite	ls
 800697c:	2301      	movls	r3, #1
 800697e:	2300      	movhi	r3, #0
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e0e7      	b.n	8006b5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	4a78      	ldr	r2, [pc, #480]	@ (8006b70 <HAL_I2C_Init+0x280>)
 800698e:	fba2 2303 	umull	r2, r3, r2, r3
 8006992:	0c9b      	lsrs	r3, r3, #18
 8006994:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6a1b      	ldr	r3, [r3, #32]
 80069b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	4a6a      	ldr	r2, [pc, #424]	@ (8006b64 <HAL_I2C_Init+0x274>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d802      	bhi.n	80069c4 <HAL_I2C_Init+0xd4>
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	3301      	adds	r3, #1
 80069c2:	e009      	b.n	80069d8 <HAL_I2C_Init+0xe8>
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80069ca:	fb02 f303 	mul.w	r3, r2, r3
 80069ce:	4a69      	ldr	r2, [pc, #420]	@ (8006b74 <HAL_I2C_Init+0x284>)
 80069d0:	fba2 2303 	umull	r2, r3, r2, r3
 80069d4:	099b      	lsrs	r3, r3, #6
 80069d6:	3301      	adds	r3, #1
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	6812      	ldr	r2, [r2, #0]
 80069dc:	430b      	orrs	r3, r1
 80069de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80069ea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	495c      	ldr	r1, [pc, #368]	@ (8006b64 <HAL_I2C_Init+0x274>)
 80069f4:	428b      	cmp	r3, r1
 80069f6:	d819      	bhi.n	8006a2c <HAL_I2C_Init+0x13c>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	1e59      	subs	r1, r3, #1
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	005b      	lsls	r3, r3, #1
 8006a02:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a06:	1c59      	adds	r1, r3, #1
 8006a08:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006a0c:	400b      	ands	r3, r1
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00a      	beq.n	8006a28 <HAL_I2C_Init+0x138>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	1e59      	subs	r1, r3, #1
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	005b      	lsls	r3, r3, #1
 8006a1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a20:	3301      	adds	r3, #1
 8006a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a26:	e051      	b.n	8006acc <HAL_I2C_Init+0x1dc>
 8006a28:	2304      	movs	r3, #4
 8006a2a:	e04f      	b.n	8006acc <HAL_I2C_Init+0x1dc>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d111      	bne.n	8006a58 <HAL_I2C_Init+0x168>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	1e58      	subs	r0, r3, #1
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6859      	ldr	r1, [r3, #4]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	005b      	lsls	r3, r3, #1
 8006a40:	440b      	add	r3, r1
 8006a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a46:	3301      	adds	r3, #1
 8006a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	bf0c      	ite	eq
 8006a50:	2301      	moveq	r3, #1
 8006a52:	2300      	movne	r3, #0
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	e012      	b.n	8006a7e <HAL_I2C_Init+0x18e>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	1e58      	subs	r0, r3, #1
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6859      	ldr	r1, [r3, #4]
 8006a60:	460b      	mov	r3, r1
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	440b      	add	r3, r1
 8006a66:	0099      	lsls	r1, r3, #2
 8006a68:	440b      	add	r3, r1
 8006a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a6e:	3301      	adds	r3, #1
 8006a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	bf0c      	ite	eq
 8006a78:	2301      	moveq	r3, #1
 8006a7a:	2300      	movne	r3, #0
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d001      	beq.n	8006a86 <HAL_I2C_Init+0x196>
 8006a82:	2301      	movs	r3, #1
 8006a84:	e022      	b.n	8006acc <HAL_I2C_Init+0x1dc>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10e      	bne.n	8006aac <HAL_I2C_Init+0x1bc>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	1e58      	subs	r0, r3, #1
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6859      	ldr	r1, [r3, #4]
 8006a96:	460b      	mov	r3, r1
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	440b      	add	r3, r1
 8006a9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aaa:	e00f      	b.n	8006acc <HAL_I2C_Init+0x1dc>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	1e58      	subs	r0, r3, #1
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6859      	ldr	r1, [r3, #4]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	440b      	add	r3, r1
 8006aba:	0099      	lsls	r1, r3, #2
 8006abc:	440b      	add	r3, r1
 8006abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ac8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006acc:	6879      	ldr	r1, [r7, #4]
 8006ace:	6809      	ldr	r1, [r1, #0]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	69da      	ldr	r2, [r3, #28]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	431a      	orrs	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	430a      	orrs	r2, r1
 8006aee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006afa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	6911      	ldr	r1, [r2, #16]
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	68d2      	ldr	r2, [r2, #12]
 8006b06:	4311      	orrs	r1, r2
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	6812      	ldr	r2, [r2, #0]
 8006b0c:	430b      	orrs	r3, r1
 8006b0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	695a      	ldr	r2, [r3, #20]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	431a      	orrs	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f042 0201 	orr.w	r2, r2, #1
 8006b3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2220      	movs	r2, #32
 8006b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	000186a0 	.word	0x000186a0
 8006b68:	001e847f 	.word	0x001e847f
 8006b6c:	003d08ff 	.word	0x003d08ff
 8006b70:	431bde83 	.word	0x431bde83
 8006b74:	10624dd3 	.word	0x10624dd3

08006b78 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b088      	sub	sp, #32
 8006b7c:	af02      	add	r7, sp, #8
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	607a      	str	r2, [r7, #4]
 8006b82:	461a      	mov	r2, r3
 8006b84:	460b      	mov	r3, r1
 8006b86:	817b      	strh	r3, [r7, #10]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b8c:	f7ff fb24 	bl	80061d8 <HAL_GetTick>
 8006b90:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b20      	cmp	r3, #32
 8006b9c:	f040 80e0 	bne.w	8006d60 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	2319      	movs	r3, #25
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	4970      	ldr	r1, [pc, #448]	@ (8006d6c <HAL_I2C_Master_Transmit+0x1f4>)
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f000 fdf4 	bl	8007798 <I2C_WaitOnFlagUntilTimeout>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	e0d3      	b.n	8006d62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d101      	bne.n	8006bc8 <HAL_I2C_Master_Transmit+0x50>
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	e0cc      	b.n	8006d62 <HAL_I2C_Master_Transmit+0x1ea>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d007      	beq.n	8006bee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f042 0201 	orr.w	r2, r2, #1
 8006bec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006bfc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2221      	movs	r2, #33	@ 0x21
 8006c02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2210      	movs	r2, #16
 8006c0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	893a      	ldrh	r2, [r7, #8]
 8006c1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	4a50      	ldr	r2, [pc, #320]	@ (8006d70 <HAL_I2C_Master_Transmit+0x1f8>)
 8006c2e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006c30:	8979      	ldrh	r1, [r7, #10]
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	6a3a      	ldr	r2, [r7, #32]
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f000 fbc8 	bl	80073cc <I2C_MasterRequestWrite>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d001      	beq.n	8006c46 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e08d      	b.n	8006d62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c46:	2300      	movs	r3, #0
 8006c48:	613b      	str	r3, [r7, #16]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	613b      	str	r3, [r7, #16]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	613b      	str	r3, [r7, #16]
 8006c5a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006c5c:	e066      	b.n	8006d2c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	6a39      	ldr	r1, [r7, #32]
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f000 feb2 	bl	80079cc <I2C_WaitOnTXEFlagUntilTimeout>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00d      	beq.n	8006c8a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c72:	2b04      	cmp	r3, #4
 8006c74:	d107      	bne.n	8006c86 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e06b      	b.n	8006d62 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c8e:	781a      	ldrb	r2, [r3, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c9a:	1c5a      	adds	r2, r3, #1
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	f003 0304 	and.w	r3, r3, #4
 8006cc4:	2b04      	cmp	r3, #4
 8006cc6:	d11b      	bne.n	8006d00 <HAL_I2C_Master_Transmit+0x188>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d017      	beq.n	8006d00 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd4:	781a      	ldrb	r2, [r3, #0]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce0:	1c5a      	adds	r2, r3, #1
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	3b01      	subs	r3, #1
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	6a39      	ldr	r1, [r7, #32]
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f000 fea9 	bl	8007a5c <I2C_WaitOnBTFFlagUntilTimeout>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00d      	beq.n	8006d2c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d14:	2b04      	cmp	r3, #4
 8006d16:	d107      	bne.n	8006d28 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d26:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e01a      	b.n	8006d62 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d194      	bne.n	8006c5e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2220      	movs	r2, #32
 8006d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	e000      	b.n	8006d62 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006d60:	2302      	movs	r3, #2
  }
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3718      	adds	r7, #24
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	00100002 	.word	0x00100002
 8006d70:	ffff0000 	.word	0xffff0000

08006d74 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b08c      	sub	sp, #48	@ 0x30
 8006d78:	af02      	add	r7, sp, #8
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	607a      	str	r2, [r7, #4]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	460b      	mov	r3, r1
 8006d82:	817b      	strh	r3, [r7, #10]
 8006d84:	4613      	mov	r3, r2
 8006d86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d88:	f7ff fa26 	bl	80061d8 <HAL_GetTick>
 8006d8c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b20      	cmp	r3, #32
 8006d98:	f040 8217 	bne.w	80071ca <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	2319      	movs	r3, #25
 8006da2:	2201      	movs	r2, #1
 8006da4:	497c      	ldr	r1, [pc, #496]	@ (8006f98 <HAL_I2C_Master_Receive+0x224>)
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 fcf6 	bl	8007798 <I2C_WaitOnFlagUntilTimeout>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d001      	beq.n	8006db6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006db2:	2302      	movs	r3, #2
 8006db4:	e20a      	b.n	80071cc <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d101      	bne.n	8006dc4 <HAL_I2C_Master_Receive+0x50>
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	e203      	b.n	80071cc <HAL_I2C_Master_Receive+0x458>
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d007      	beq.n	8006dea <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f042 0201 	orr.w	r2, r2, #1
 8006de8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006df8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2222      	movs	r2, #34	@ 0x22
 8006dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2210      	movs	r2, #16
 8006e06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	893a      	ldrh	r2, [r7, #8]
 8006e1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	4a5c      	ldr	r2, [pc, #368]	@ (8006f9c <HAL_I2C_Master_Receive+0x228>)
 8006e2a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006e2c:	8979      	ldrh	r1, [r7, #10]
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f000 fb4c 	bl	80074d0 <I2C_MasterRequestRead>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e1c4      	b.n	80071cc <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d113      	bne.n	8006e72 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	623b      	str	r3, [r7, #32]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	623b      	str	r3, [r7, #32]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	623b      	str	r3, [r7, #32]
 8006e5e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e6e:	601a      	str	r2, [r3, #0]
 8006e70:	e198      	b.n	80071a4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d11b      	bne.n	8006eb2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	61fb      	str	r3, [r7, #28]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	61fb      	str	r3, [r7, #28]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	61fb      	str	r3, [r7, #28]
 8006e9e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006eae:	601a      	str	r2, [r3, #0]
 8006eb0:	e178      	b.n	80071a4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d11b      	bne.n	8006ef2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ec8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ed8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006eda:	2300      	movs	r3, #0
 8006edc:	61bb      	str	r3, [r7, #24]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	61bb      	str	r3, [r7, #24]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	61bb      	str	r3, [r7, #24]
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	e158      	b.n	80071a4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006f00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f02:	2300      	movs	r3, #0
 8006f04:	617b      	str	r3, [r7, #20]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	695b      	ldr	r3, [r3, #20]
 8006f0c:	617b      	str	r3, [r7, #20]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	617b      	str	r3, [r7, #20]
 8006f16:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006f18:	e144      	b.n	80071a4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	f200 80f1 	bhi.w	8007106 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d123      	bne.n	8006f74 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f2e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f000 fddb 	bl	8007aec <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d001      	beq.n	8006f40 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e145      	b.n	80071cc <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	691a      	ldr	r2, [r3, #16]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f4a:	b2d2      	uxtb	r2, r2
 8006f4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f52:	1c5a      	adds	r2, r3, #1
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	b29a      	uxth	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006f72:	e117      	b.n	80071a4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d14e      	bne.n	800701a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f82:	2200      	movs	r2, #0
 8006f84:	4906      	ldr	r1, [pc, #24]	@ (8006fa0 <HAL_I2C_Master_Receive+0x22c>)
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f000 fc06 	bl	8007798 <I2C_WaitOnFlagUntilTimeout>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d008      	beq.n	8006fa4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e11a      	b.n	80071cc <HAL_I2C_Master_Receive+0x458>
 8006f96:	bf00      	nop
 8006f98:	00100002 	.word	0x00100002
 8006f9c:	ffff0000 	.word	0xffff0000
 8006fa0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	691a      	ldr	r2, [r3, #16]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fbe:	b2d2      	uxtb	r2, r2
 8006fc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fc6:	1c5a      	adds	r2, r3, #1
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	691a      	ldr	r2, [r3, #16]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff0:	b2d2      	uxtb	r2, r2
 8006ff2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff8:	1c5a      	adds	r2, r3, #1
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007002:	3b01      	subs	r3, #1
 8007004:	b29a      	uxth	r2, r3
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800700e:	b29b      	uxth	r3, r3
 8007010:	3b01      	subs	r3, #1
 8007012:	b29a      	uxth	r2, r3
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007018:	e0c4      	b.n	80071a4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800701a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007020:	2200      	movs	r2, #0
 8007022:	496c      	ldr	r1, [pc, #432]	@ (80071d4 <HAL_I2C_Master_Receive+0x460>)
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f000 fbb7 	bl	8007798 <I2C_WaitOnFlagUntilTimeout>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d001      	beq.n	8007034 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e0cb      	b.n	80071cc <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007042:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	691a      	ldr	r2, [r3, #16]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800704e:	b2d2      	uxtb	r2, r2
 8007050:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007056:	1c5a      	adds	r2, r3, #1
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007060:	3b01      	subs	r3, #1
 8007062:	b29a      	uxth	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800706c:	b29b      	uxth	r3, r3
 800706e:	3b01      	subs	r3, #1
 8007070:	b29a      	uxth	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707c:	2200      	movs	r2, #0
 800707e:	4955      	ldr	r1, [pc, #340]	@ (80071d4 <HAL_I2C_Master_Receive+0x460>)
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f000 fb89 	bl	8007798 <I2C_WaitOnFlagUntilTimeout>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d001      	beq.n	8007090 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e09d      	b.n	80071cc <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800709e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	691a      	ldr	r2, [r3, #16]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070aa:	b2d2      	uxtb	r2, r2
 80070ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b2:	1c5a      	adds	r2, r3, #1
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070bc:	3b01      	subs	r3, #1
 80070be:	b29a      	uxth	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	3b01      	subs	r3, #1
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	691a      	ldr	r2, [r3, #16]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070dc:	b2d2      	uxtb	r2, r2
 80070de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e4:	1c5a      	adds	r2, r3, #1
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070ee:	3b01      	subs	r3, #1
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	3b01      	subs	r3, #1
 80070fe:	b29a      	uxth	r2, r3
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007104:	e04e      	b.n	80071a4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007108:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f000 fcee 	bl	8007aec <I2C_WaitOnRXNEFlagUntilTimeout>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d001      	beq.n	800711a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e058      	b.n	80071cc <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	691a      	ldr	r2, [r3, #16]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007124:	b2d2      	uxtb	r2, r2
 8007126:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800712c:	1c5a      	adds	r2, r3, #1
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007136:	3b01      	subs	r3, #1
 8007138:	b29a      	uxth	r2, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007142:	b29b      	uxth	r3, r3
 8007144:	3b01      	subs	r3, #1
 8007146:	b29a      	uxth	r2, r3
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	f003 0304 	and.w	r3, r3, #4
 8007156:	2b04      	cmp	r3, #4
 8007158:	d124      	bne.n	80071a4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800715e:	2b03      	cmp	r3, #3
 8007160:	d107      	bne.n	8007172 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007170:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	691a      	ldr	r2, [r3, #16]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800717c:	b2d2      	uxtb	r2, r2
 800717e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007184:	1c5a      	adds	r2, r3, #1
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800718e:	3b01      	subs	r3, #1
 8007190:	b29a      	uxth	r2, r3
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800719a:	b29b      	uxth	r3, r3
 800719c:	3b01      	subs	r3, #1
 800719e:	b29a      	uxth	r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f47f aeb6 	bne.w	8006f1a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2220      	movs	r2, #32
 80071b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80071c6:	2300      	movs	r3, #0
 80071c8:	e000      	b.n	80071cc <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80071ca:	2302      	movs	r3, #2
  }
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3728      	adds	r7, #40	@ 0x28
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	00010004 	.word	0x00010004

080071d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b088      	sub	sp, #32
 80071dc:	af02      	add	r7, sp, #8
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	4608      	mov	r0, r1
 80071e2:	4611      	mov	r1, r2
 80071e4:	461a      	mov	r2, r3
 80071e6:	4603      	mov	r3, r0
 80071e8:	817b      	strh	r3, [r7, #10]
 80071ea:	460b      	mov	r3, r1
 80071ec:	813b      	strh	r3, [r7, #8]
 80071ee:	4613      	mov	r3, r2
 80071f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80071f2:	f7fe fff1 	bl	80061d8 <HAL_GetTick>
 80071f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	2b20      	cmp	r3, #32
 8007202:	f040 80d9 	bne.w	80073b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	2319      	movs	r3, #25
 800720c:	2201      	movs	r2, #1
 800720e:	496d      	ldr	r1, [pc, #436]	@ (80073c4 <HAL_I2C_Mem_Write+0x1ec>)
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f000 fac1 	bl	8007798 <I2C_WaitOnFlagUntilTimeout>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d001      	beq.n	8007220 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800721c:	2302      	movs	r3, #2
 800721e:	e0cc      	b.n	80073ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007226:	2b01      	cmp	r3, #1
 8007228:	d101      	bne.n	800722e <HAL_I2C_Mem_Write+0x56>
 800722a:	2302      	movs	r3, #2
 800722c:	e0c5      	b.n	80073ba <HAL_I2C_Mem_Write+0x1e2>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0301 	and.w	r3, r3, #1
 8007240:	2b01      	cmp	r3, #1
 8007242:	d007      	beq.n	8007254 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f042 0201 	orr.w	r2, r2, #1
 8007252:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007262:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2221      	movs	r2, #33	@ 0x21
 8007268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2240      	movs	r2, #64	@ 0x40
 8007270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6a3a      	ldr	r2, [r7, #32]
 800727e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007284:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800728a:	b29a      	uxth	r2, r3
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4a4d      	ldr	r2, [pc, #308]	@ (80073c8 <HAL_I2C_Mem_Write+0x1f0>)
 8007294:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007296:	88f8      	ldrh	r0, [r7, #6]
 8007298:	893a      	ldrh	r2, [r7, #8]
 800729a:	8979      	ldrh	r1, [r7, #10]
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	9301      	str	r3, [sp, #4]
 80072a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	4603      	mov	r3, r0
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f000 f9e0 	bl	800766c <I2C_RequestMemoryWrite>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d052      	beq.n	8007358 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e081      	b.n	80073ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f000 fb86 	bl	80079cc <I2C_WaitOnTXEFlagUntilTimeout>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00d      	beq.n	80072e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ca:	2b04      	cmp	r3, #4
 80072cc:	d107      	bne.n	80072de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e06b      	b.n	80073ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e6:	781a      	ldrb	r2, [r3, #0]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f2:	1c5a      	adds	r2, r3, #1
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072fc:	3b01      	subs	r3, #1
 80072fe:	b29a      	uxth	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007308:	b29b      	uxth	r3, r3
 800730a:	3b01      	subs	r3, #1
 800730c:	b29a      	uxth	r2, r3
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	f003 0304 	and.w	r3, r3, #4
 800731c:	2b04      	cmp	r3, #4
 800731e:	d11b      	bne.n	8007358 <HAL_I2C_Mem_Write+0x180>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007324:	2b00      	cmp	r3, #0
 8007326:	d017      	beq.n	8007358 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800732c:	781a      	ldrb	r2, [r3, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007338:	1c5a      	adds	r2, r3, #1
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007342:	3b01      	subs	r3, #1
 8007344:	b29a      	uxth	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800734e:	b29b      	uxth	r3, r3
 8007350:	3b01      	subs	r3, #1
 8007352:	b29a      	uxth	r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1aa      	bne.n	80072b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007360:	697a      	ldr	r2, [r7, #20]
 8007362:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f000 fb79 	bl	8007a5c <I2C_WaitOnBTFFlagUntilTimeout>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00d      	beq.n	800738c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007374:	2b04      	cmp	r3, #4
 8007376:	d107      	bne.n	8007388 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007386:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	e016      	b.n	80073ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800739a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2220      	movs	r2, #32
 80073a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80073b4:	2300      	movs	r3, #0
 80073b6:	e000      	b.n	80073ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80073b8:	2302      	movs	r3, #2
  }
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3718      	adds	r7, #24
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	00100002 	.word	0x00100002
 80073c8:	ffff0000 	.word	0xffff0000

080073cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b088      	sub	sp, #32
 80073d0:	af02      	add	r7, sp, #8
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	607a      	str	r2, [r7, #4]
 80073d6:	603b      	str	r3, [r7, #0]
 80073d8:	460b      	mov	r3, r1
 80073da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	2b08      	cmp	r3, #8
 80073e6:	d006      	beq.n	80073f6 <I2C_MasterRequestWrite+0x2a>
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d003      	beq.n	80073f6 <I2C_MasterRequestWrite+0x2a>
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80073f4:	d108      	bne.n	8007408 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	e00b      	b.n	8007420 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800740c:	2b12      	cmp	r3, #18
 800740e:	d107      	bne.n	8007420 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800741e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f000 f9b3 	bl	8007798 <I2C_WaitOnFlagUntilTimeout>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00d      	beq.n	8007454 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007446:	d103      	bne.n	8007450 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800744e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007450:	2303      	movs	r3, #3
 8007452:	e035      	b.n	80074c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800745c:	d108      	bne.n	8007470 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800745e:	897b      	ldrh	r3, [r7, #10]
 8007460:	b2db      	uxtb	r3, r3
 8007462:	461a      	mov	r2, r3
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800746c:	611a      	str	r2, [r3, #16]
 800746e:	e01b      	b.n	80074a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007470:	897b      	ldrh	r3, [r7, #10]
 8007472:	11db      	asrs	r3, r3, #7
 8007474:	b2db      	uxtb	r3, r3
 8007476:	f003 0306 	and.w	r3, r3, #6
 800747a:	b2db      	uxtb	r3, r3
 800747c:	f063 030f 	orn	r3, r3, #15
 8007480:	b2da      	uxtb	r2, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	490e      	ldr	r1, [pc, #56]	@ (80074c8 <I2C_MasterRequestWrite+0xfc>)
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f000 f9fc 	bl	800788c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d001      	beq.n	800749e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e010      	b.n	80074c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800749e:	897b      	ldrh	r3, [r7, #10]
 80074a0:	b2da      	uxtb	r2, r3
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	4907      	ldr	r1, [pc, #28]	@ (80074cc <I2C_MasterRequestWrite+0x100>)
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f000 f9ec 	bl	800788c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d001      	beq.n	80074be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e000      	b.n	80074c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3718      	adds	r7, #24
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	00010008 	.word	0x00010008
 80074cc:	00010002 	.word	0x00010002

080074d0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b088      	sub	sp, #32
 80074d4:	af02      	add	r7, sp, #8
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	607a      	str	r2, [r7, #4]
 80074da:	603b      	str	r3, [r7, #0]
 80074dc:	460b      	mov	r3, r1
 80074de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80074f4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2b08      	cmp	r3, #8
 80074fa:	d006      	beq.n	800750a <I2C_MasterRequestRead+0x3a>
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d003      	beq.n	800750a <I2C_MasterRequestRead+0x3a>
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007508:	d108      	bne.n	800751c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	e00b      	b.n	8007534 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007520:	2b11      	cmp	r3, #17
 8007522:	d107      	bne.n	8007534 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007532:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 f929 	bl	8007798 <I2C_WaitOnFlagUntilTimeout>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00d      	beq.n	8007568 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007556:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800755a:	d103      	bne.n	8007564 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007562:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007564:	2303      	movs	r3, #3
 8007566:	e079      	b.n	800765c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007570:	d108      	bne.n	8007584 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007572:	897b      	ldrh	r3, [r7, #10]
 8007574:	b2db      	uxtb	r3, r3
 8007576:	f043 0301 	orr.w	r3, r3, #1
 800757a:	b2da      	uxtb	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	611a      	str	r2, [r3, #16]
 8007582:	e05f      	b.n	8007644 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007584:	897b      	ldrh	r3, [r7, #10]
 8007586:	11db      	asrs	r3, r3, #7
 8007588:	b2db      	uxtb	r3, r3
 800758a:	f003 0306 	and.w	r3, r3, #6
 800758e:	b2db      	uxtb	r3, r3
 8007590:	f063 030f 	orn	r3, r3, #15
 8007594:	b2da      	uxtb	r2, r3
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	4930      	ldr	r1, [pc, #192]	@ (8007664 <I2C_MasterRequestRead+0x194>)
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f000 f972 	bl	800788c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e054      	b.n	800765c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80075b2:	897b      	ldrh	r3, [r7, #10]
 80075b4:	b2da      	uxtb	r2, r3
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	4929      	ldr	r1, [pc, #164]	@ (8007668 <I2C_MasterRequestRead+0x198>)
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 f962 	bl	800788c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e044      	b.n	800765c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075d2:	2300      	movs	r3, #0
 80075d4:	613b      	str	r3, [r7, #16]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	613b      	str	r3, [r7, #16]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	613b      	str	r3, [r7, #16]
 80075e6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80075f6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	9300      	str	r3, [sp, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f000 f8c7 	bl	8007798 <I2C_WaitOnFlagUntilTimeout>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00d      	beq.n	800762c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800761a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800761e:	d103      	bne.n	8007628 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007626:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8007628:	2303      	movs	r3, #3
 800762a:	e017      	b.n	800765c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800762c:	897b      	ldrh	r3, [r7, #10]
 800762e:	11db      	asrs	r3, r3, #7
 8007630:	b2db      	uxtb	r3, r3
 8007632:	f003 0306 	and.w	r3, r3, #6
 8007636:	b2db      	uxtb	r3, r3
 8007638:	f063 030e 	orn	r3, r3, #14
 800763c:	b2da      	uxtb	r2, r3
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	4907      	ldr	r1, [pc, #28]	@ (8007668 <I2C_MasterRequestRead+0x198>)
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f000 f91e 	bl	800788c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e000      	b.n	800765c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3718      	adds	r7, #24
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	00010008 	.word	0x00010008
 8007668:	00010002 	.word	0x00010002

0800766c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b088      	sub	sp, #32
 8007670:	af02      	add	r7, sp, #8
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	4608      	mov	r0, r1
 8007676:	4611      	mov	r1, r2
 8007678:	461a      	mov	r2, r3
 800767a:	4603      	mov	r3, r0
 800767c:	817b      	strh	r3, [r7, #10]
 800767e:	460b      	mov	r3, r1
 8007680:	813b      	strh	r3, [r7, #8]
 8007682:	4613      	mov	r3, r2
 8007684:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007694:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	2200      	movs	r2, #0
 800769e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f000 f878 	bl	8007798 <I2C_WaitOnFlagUntilTimeout>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00d      	beq.n	80076ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076bc:	d103      	bne.n	80076c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80076c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e05f      	b.n	800778a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80076ca:	897b      	ldrh	r3, [r7, #10]
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	461a      	mov	r2, r3
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80076d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80076da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076dc:	6a3a      	ldr	r2, [r7, #32]
 80076de:	492d      	ldr	r1, [pc, #180]	@ (8007794 <I2C_RequestMemoryWrite+0x128>)
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 f8d3 	bl	800788c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e04c      	b.n	800778a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076f0:	2300      	movs	r3, #0
 80076f2:	617b      	str	r3, [r7, #20]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	617b      	str	r3, [r7, #20]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	617b      	str	r3, [r7, #20]
 8007704:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007708:	6a39      	ldr	r1, [r7, #32]
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f000 f95e 	bl	80079cc <I2C_WaitOnTXEFlagUntilTimeout>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00d      	beq.n	8007732 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800771a:	2b04      	cmp	r3, #4
 800771c:	d107      	bne.n	800772e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800772c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e02b      	b.n	800778a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007732:	88fb      	ldrh	r3, [r7, #6]
 8007734:	2b01      	cmp	r3, #1
 8007736:	d105      	bne.n	8007744 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007738:	893b      	ldrh	r3, [r7, #8]
 800773a:	b2da      	uxtb	r2, r3
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	611a      	str	r2, [r3, #16]
 8007742:	e021      	b.n	8007788 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007744:	893b      	ldrh	r3, [r7, #8]
 8007746:	0a1b      	lsrs	r3, r3, #8
 8007748:	b29b      	uxth	r3, r3
 800774a:	b2da      	uxtb	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007752:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007754:	6a39      	ldr	r1, [r7, #32]
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	f000 f938 	bl	80079cc <I2C_WaitOnTXEFlagUntilTimeout>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00d      	beq.n	800777e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007766:	2b04      	cmp	r3, #4
 8007768:	d107      	bne.n	800777a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007778:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e005      	b.n	800778a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800777e:	893b      	ldrh	r3, [r7, #8]
 8007780:	b2da      	uxtb	r2, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3718      	adds	r7, #24
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	00010002 	.word	0x00010002

08007798 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	603b      	str	r3, [r7, #0]
 80077a4:	4613      	mov	r3, r2
 80077a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80077a8:	e048      	b.n	800783c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077b0:	d044      	beq.n	800783c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077b2:	f7fe fd11 	bl	80061d8 <HAL_GetTick>
 80077b6:	4602      	mov	r2, r0
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	683a      	ldr	r2, [r7, #0]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d302      	bcc.n	80077c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d139      	bne.n	800783c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	0c1b      	lsrs	r3, r3, #16
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d10d      	bne.n	80077ee <I2C_WaitOnFlagUntilTimeout+0x56>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	695b      	ldr	r3, [r3, #20]
 80077d8:	43da      	mvns	r2, r3
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	4013      	ands	r3, r2
 80077de:	b29b      	uxth	r3, r3
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	bf0c      	ite	eq
 80077e4:	2301      	moveq	r3, #1
 80077e6:	2300      	movne	r3, #0
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	461a      	mov	r2, r3
 80077ec:	e00c      	b.n	8007808 <I2C_WaitOnFlagUntilTimeout+0x70>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	43da      	mvns	r2, r3
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	4013      	ands	r3, r2
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	bf0c      	ite	eq
 8007800:	2301      	moveq	r3, #1
 8007802:	2300      	movne	r3, #0
 8007804:	b2db      	uxtb	r3, r3
 8007806:	461a      	mov	r2, r3
 8007808:	79fb      	ldrb	r3, [r7, #7]
 800780a:	429a      	cmp	r2, r3
 800780c:	d116      	bne.n	800783c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2200      	movs	r2, #0
 8007812:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2220      	movs	r2, #32
 8007818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007828:	f043 0220 	orr.w	r2, r3, #32
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e023      	b.n	8007884 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	0c1b      	lsrs	r3, r3, #16
 8007840:	b2db      	uxtb	r3, r3
 8007842:	2b01      	cmp	r3, #1
 8007844:	d10d      	bne.n	8007862 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	695b      	ldr	r3, [r3, #20]
 800784c:	43da      	mvns	r2, r3
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	4013      	ands	r3, r2
 8007852:	b29b      	uxth	r3, r3
 8007854:	2b00      	cmp	r3, #0
 8007856:	bf0c      	ite	eq
 8007858:	2301      	moveq	r3, #1
 800785a:	2300      	movne	r3, #0
 800785c:	b2db      	uxtb	r3, r3
 800785e:	461a      	mov	r2, r3
 8007860:	e00c      	b.n	800787c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	43da      	mvns	r2, r3
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	4013      	ands	r3, r2
 800786e:	b29b      	uxth	r3, r3
 8007870:	2b00      	cmp	r3, #0
 8007872:	bf0c      	ite	eq
 8007874:	2301      	moveq	r3, #1
 8007876:	2300      	movne	r3, #0
 8007878:	b2db      	uxtb	r3, r3
 800787a:	461a      	mov	r2, r3
 800787c:	79fb      	ldrb	r3, [r7, #7]
 800787e:	429a      	cmp	r2, r3
 8007880:	d093      	beq.n	80077aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	607a      	str	r2, [r7, #4]
 8007898:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800789a:	e071      	b.n	8007980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	695b      	ldr	r3, [r3, #20]
 80078a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078aa:	d123      	bne.n	80078f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80078c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2220      	movs	r2, #32
 80078d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e0:	f043 0204 	orr.w	r2, r3, #4
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e067      	b.n	80079c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80078fa:	d041      	beq.n	8007980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078fc:	f7fe fc6c 	bl	80061d8 <HAL_GetTick>
 8007900:	4602      	mov	r2, r0
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	429a      	cmp	r2, r3
 800790a:	d302      	bcc.n	8007912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d136      	bne.n	8007980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	0c1b      	lsrs	r3, r3, #16
 8007916:	b2db      	uxtb	r3, r3
 8007918:	2b01      	cmp	r3, #1
 800791a:	d10c      	bne.n	8007936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	695b      	ldr	r3, [r3, #20]
 8007922:	43da      	mvns	r2, r3
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	4013      	ands	r3, r2
 8007928:	b29b      	uxth	r3, r3
 800792a:	2b00      	cmp	r3, #0
 800792c:	bf14      	ite	ne
 800792e:	2301      	movne	r3, #1
 8007930:	2300      	moveq	r3, #0
 8007932:	b2db      	uxtb	r3, r3
 8007934:	e00b      	b.n	800794e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	699b      	ldr	r3, [r3, #24]
 800793c:	43da      	mvns	r2, r3
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	4013      	ands	r3, r2
 8007942:	b29b      	uxth	r3, r3
 8007944:	2b00      	cmp	r3, #0
 8007946:	bf14      	ite	ne
 8007948:	2301      	movne	r3, #1
 800794a:	2300      	moveq	r3, #0
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d016      	beq.n	8007980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2220      	movs	r2, #32
 800795c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800796c:	f043 0220 	orr.w	r2, r3, #32
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	e021      	b.n	80079c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	0c1b      	lsrs	r3, r3, #16
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b01      	cmp	r3, #1
 8007988:	d10c      	bne.n	80079a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	43da      	mvns	r2, r3
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	4013      	ands	r3, r2
 8007996:	b29b      	uxth	r3, r3
 8007998:	2b00      	cmp	r3, #0
 800799a:	bf14      	ite	ne
 800799c:	2301      	movne	r3, #1
 800799e:	2300      	moveq	r3, #0
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	e00b      	b.n	80079bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	43da      	mvns	r2, r3
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	4013      	ands	r3, r2
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	bf14      	ite	ne
 80079b6:	2301      	movne	r3, #1
 80079b8:	2300      	moveq	r3, #0
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f47f af6d 	bne.w	800789c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80079d8:	e034      	b.n	8007a44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	f000 f8e3 	bl	8007ba6 <I2C_IsAcknowledgeFailed>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e034      	b.n	8007a54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079f0:	d028      	beq.n	8007a44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079f2:	f7fe fbf1 	bl	80061d8 <HAL_GetTick>
 80079f6:	4602      	mov	r2, r0
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	1ad3      	subs	r3, r2, r3
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d302      	bcc.n	8007a08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d11d      	bne.n	8007a44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a12:	2b80      	cmp	r3, #128	@ 0x80
 8007a14:	d016      	beq.n	8007a44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a30:	f043 0220 	orr.w	r2, r3, #32
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e007      	b.n	8007a54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a4e:	2b80      	cmp	r3, #128	@ 0x80
 8007a50:	d1c3      	bne.n	80079da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3710      	adds	r7, #16
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007a68:	e034      	b.n	8007ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f000 f89b 	bl	8007ba6 <I2C_IsAcknowledgeFailed>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d001      	beq.n	8007a7a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e034      	b.n	8007ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a80:	d028      	beq.n	8007ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a82:	f7fe fba9 	bl	80061d8 <HAL_GetTick>
 8007a86:	4602      	mov	r2, r0
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d302      	bcc.n	8007a98 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d11d      	bne.n	8007ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	f003 0304 	and.w	r3, r3, #4
 8007aa2:	2b04      	cmp	r3, #4
 8007aa4:	d016      	beq.n	8007ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2220      	movs	r2, #32
 8007ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ac0:	f043 0220 	orr.w	r2, r3, #32
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e007      	b.n	8007ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	f003 0304 	and.w	r3, r3, #4
 8007ade:	2b04      	cmp	r3, #4
 8007ae0:	d1c3      	bne.n	8007a6a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007af8:	e049      	b.n	8007b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	695b      	ldr	r3, [r3, #20]
 8007b00:	f003 0310 	and.w	r3, r3, #16
 8007b04:	2b10      	cmp	r3, #16
 8007b06:	d119      	bne.n	8007b3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f06f 0210 	mvn.w	r2, #16
 8007b10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2220      	movs	r2, #32
 8007b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e030      	b.n	8007b9e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b3c:	f7fe fb4c 	bl	80061d8 <HAL_GetTick>
 8007b40:	4602      	mov	r2, r0
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	68ba      	ldr	r2, [r7, #8]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d302      	bcc.n	8007b52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d11d      	bne.n	8007b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	695b      	ldr	r3, [r3, #20]
 8007b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b5c:	2b40      	cmp	r3, #64	@ 0x40
 8007b5e:	d016      	beq.n	8007b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2220      	movs	r2, #32
 8007b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b7a:	f043 0220 	orr.w	r2, r3, #32
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e007      	b.n	8007b9e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	695b      	ldr	r3, [r3, #20]
 8007b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b98:	2b40      	cmp	r3, #64	@ 0x40
 8007b9a:	d1ae      	bne.n	8007afa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b083      	sub	sp, #12
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	695b      	ldr	r3, [r3, #20]
 8007bb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bbc:	d11b      	bne.n	8007bf6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007bc6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2220      	movs	r2, #32
 8007bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007be2:	f043 0204 	orr.w	r2, r3, #4
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e000      	b.n	8007bf8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b086      	sub	sp, #24
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d101      	bne.n	8007c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e267      	b.n	80080e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d075      	beq.n	8007d0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007c22:	4b88      	ldr	r3, [pc, #544]	@ (8007e44 <HAL_RCC_OscConfig+0x240>)
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	f003 030c 	and.w	r3, r3, #12
 8007c2a:	2b04      	cmp	r3, #4
 8007c2c:	d00c      	beq.n	8007c48 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c2e:	4b85      	ldr	r3, [pc, #532]	@ (8007e44 <HAL_RCC_OscConfig+0x240>)
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007c36:	2b08      	cmp	r3, #8
 8007c38:	d112      	bne.n	8007c60 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c3a:	4b82      	ldr	r3, [pc, #520]	@ (8007e44 <HAL_RCC_OscConfig+0x240>)
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c46:	d10b      	bne.n	8007c60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c48:	4b7e      	ldr	r3, [pc, #504]	@ (8007e44 <HAL_RCC_OscConfig+0x240>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d05b      	beq.n	8007d0c <HAL_RCC_OscConfig+0x108>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d157      	bne.n	8007d0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e242      	b.n	80080e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c68:	d106      	bne.n	8007c78 <HAL_RCC_OscConfig+0x74>
 8007c6a:	4b76      	ldr	r3, [pc, #472]	@ (8007e44 <HAL_RCC_OscConfig+0x240>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a75      	ldr	r2, [pc, #468]	@ (8007e44 <HAL_RCC_OscConfig+0x240>)
 8007c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c74:	6013      	str	r3, [r2, #0]
 8007c76:	e01d      	b.n	8007cb4 <HAL_RCC_OscConfig+0xb0>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c80:	d10c      	bne.n	8007c9c <HAL_RCC_OscConfig+0x98>
 8007c82:	4b70      	ldr	r3, [pc, #448]	@ (8007e44 <HAL_RCC_OscConfig+0x240>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a6f      	ldr	r2, [pc, #444]	@ (8007e44 <HAL_RCC_OscConfig+0x240>)
 8007c88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007c8c:	6013      	str	r3, [r2, #0]
 8007c8e:	4b6d      	ldr	r3, [pc, #436]	@ (8007e44 <HAL_RCC_OscConfig+0x240>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a6c      	ldr	r2, [pc, #432]	@ (8007e44 <HAL_RCC_OscConfig+0x240>)
 8007c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c98:	6013      	str	r3, [r2, #0]
 8007c9a:	e00b      	b.n	8007cb4 <HAL_RCC_OscConfig+0xb0>
 8007c9c:	4b69      	ldr	r3, [pc, #420]	@ (8007e44 <HAL_RCC_OscConfig+0x240>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a68      	ldr	r2, [pc, #416]	@ (8007e44 <HAL_RCC_OscConfig+0x240>)
 8007ca2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ca6:	6013      	str	r3, [r2, #0]
 8007ca8:	4b66      	ldr	r3, [pc, #408]	@ (8007e44 <HAL_RCC_OscConfig+0x240>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a65      	ldr	r2, [pc, #404]	@ (8007e44 <HAL_RCC_OscConfig+0x240>)
 8007cae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d013      	beq.n	8007ce4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cbc:	f7fe fa8c 	bl	80061d8 <HAL_GetTick>
 8007cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cc2:	e008      	b.n	8007cd6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007cc4:	f7fe fa88 	bl	80061d8 <HAL_GetTick>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	2b64      	cmp	r3, #100	@ 0x64
 8007cd0:	d901      	bls.n	8007cd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e207      	b.n	80080e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cd6:	4b5b      	ldr	r3, [pc, #364]	@ (8007e44 <HAL_RCC_OscConfig+0x240>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d0f0      	beq.n	8007cc4 <HAL_RCC_OscConfig+0xc0>
 8007ce2:	e014      	b.n	8007d0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ce4:	f7fe fa78 	bl	80061d8 <HAL_GetTick>
 8007ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007cea:	e008      	b.n	8007cfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007cec:	f7fe fa74 	bl	80061d8 <HAL_GetTick>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	2b64      	cmp	r3, #100	@ 0x64
 8007cf8:	d901      	bls.n	8007cfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e1f3      	b.n	80080e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007cfe:	4b51      	ldr	r3, [pc, #324]	@ (8007e44 <HAL_RCC_OscConfig+0x240>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1f0      	bne.n	8007cec <HAL_RCC_OscConfig+0xe8>
 8007d0a:	e000      	b.n	8007d0e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 0302 	and.w	r3, r3, #2
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d063      	beq.n	8007de2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007d1a:	4b4a      	ldr	r3, [pc, #296]	@ (8007e44 <HAL_RCC_OscConfig+0x240>)
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	f003 030c 	and.w	r3, r3, #12
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00b      	beq.n	8007d3e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d26:	4b47      	ldr	r3, [pc, #284]	@ (8007e44 <HAL_RCC_OscConfig+0x240>)
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007d2e:	2b08      	cmp	r3, #8
 8007d30:	d11c      	bne.n	8007d6c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d32:	4b44      	ldr	r3, [pc, #272]	@ (8007e44 <HAL_RCC_OscConfig+0x240>)
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d116      	bne.n	8007d6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d3e:	4b41      	ldr	r3, [pc, #260]	@ (8007e44 <HAL_RCC_OscConfig+0x240>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0302 	and.w	r3, r3, #2
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d005      	beq.n	8007d56 <HAL_RCC_OscConfig+0x152>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d001      	beq.n	8007d56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e1c7      	b.n	80080e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d56:	4b3b      	ldr	r3, [pc, #236]	@ (8007e44 <HAL_RCC_OscConfig+0x240>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	00db      	lsls	r3, r3, #3
 8007d64:	4937      	ldr	r1, [pc, #220]	@ (8007e44 <HAL_RCC_OscConfig+0x240>)
 8007d66:	4313      	orrs	r3, r2
 8007d68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d6a:	e03a      	b.n	8007de2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d020      	beq.n	8007db6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d74:	4b34      	ldr	r3, [pc, #208]	@ (8007e48 <HAL_RCC_OscConfig+0x244>)
 8007d76:	2201      	movs	r2, #1
 8007d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d7a:	f7fe fa2d 	bl	80061d8 <HAL_GetTick>
 8007d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d80:	e008      	b.n	8007d94 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d82:	f7fe fa29 	bl	80061d8 <HAL_GetTick>
 8007d86:	4602      	mov	r2, r0
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d901      	bls.n	8007d94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007d90:	2303      	movs	r3, #3
 8007d92:	e1a8      	b.n	80080e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d94:	4b2b      	ldr	r3, [pc, #172]	@ (8007e44 <HAL_RCC_OscConfig+0x240>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 0302 	and.w	r3, r3, #2
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d0f0      	beq.n	8007d82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007da0:	4b28      	ldr	r3, [pc, #160]	@ (8007e44 <HAL_RCC_OscConfig+0x240>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	00db      	lsls	r3, r3, #3
 8007dae:	4925      	ldr	r1, [pc, #148]	@ (8007e44 <HAL_RCC_OscConfig+0x240>)
 8007db0:	4313      	orrs	r3, r2
 8007db2:	600b      	str	r3, [r1, #0]
 8007db4:	e015      	b.n	8007de2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007db6:	4b24      	ldr	r3, [pc, #144]	@ (8007e48 <HAL_RCC_OscConfig+0x244>)
 8007db8:	2200      	movs	r2, #0
 8007dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dbc:	f7fe fa0c 	bl	80061d8 <HAL_GetTick>
 8007dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007dc2:	e008      	b.n	8007dd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007dc4:	f7fe fa08 	bl	80061d8 <HAL_GetTick>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d901      	bls.n	8007dd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	e187      	b.n	80080e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8007e44 <HAL_RCC_OscConfig+0x240>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 0302 	and.w	r3, r3, #2
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1f0      	bne.n	8007dc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f003 0308 	and.w	r3, r3, #8
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d036      	beq.n	8007e5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	695b      	ldr	r3, [r3, #20]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d016      	beq.n	8007e24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007df6:	4b15      	ldr	r3, [pc, #84]	@ (8007e4c <HAL_RCC_OscConfig+0x248>)
 8007df8:	2201      	movs	r2, #1
 8007dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dfc:	f7fe f9ec 	bl	80061d8 <HAL_GetTick>
 8007e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e02:	e008      	b.n	8007e16 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e04:	f7fe f9e8 	bl	80061d8 <HAL_GetTick>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d901      	bls.n	8007e16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e167      	b.n	80080e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e16:	4b0b      	ldr	r3, [pc, #44]	@ (8007e44 <HAL_RCC_OscConfig+0x240>)
 8007e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e1a:	f003 0302 	and.w	r3, r3, #2
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d0f0      	beq.n	8007e04 <HAL_RCC_OscConfig+0x200>
 8007e22:	e01b      	b.n	8007e5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e24:	4b09      	ldr	r3, [pc, #36]	@ (8007e4c <HAL_RCC_OscConfig+0x248>)
 8007e26:	2200      	movs	r2, #0
 8007e28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e2a:	f7fe f9d5 	bl	80061d8 <HAL_GetTick>
 8007e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e30:	e00e      	b.n	8007e50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e32:	f7fe f9d1 	bl	80061d8 <HAL_GetTick>
 8007e36:	4602      	mov	r2, r0
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	1ad3      	subs	r3, r2, r3
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d907      	bls.n	8007e50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007e40:	2303      	movs	r3, #3
 8007e42:	e150      	b.n	80080e6 <HAL_RCC_OscConfig+0x4e2>
 8007e44:	40023800 	.word	0x40023800
 8007e48:	42470000 	.word	0x42470000
 8007e4c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e50:	4b88      	ldr	r3, [pc, #544]	@ (8008074 <HAL_RCC_OscConfig+0x470>)
 8007e52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e54:	f003 0302 	and.w	r3, r3, #2
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1ea      	bne.n	8007e32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 0304 	and.w	r3, r3, #4
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	f000 8097 	beq.w	8007f98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e6e:	4b81      	ldr	r3, [pc, #516]	@ (8008074 <HAL_RCC_OscConfig+0x470>)
 8007e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10f      	bne.n	8007e9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	60bb      	str	r3, [r7, #8]
 8007e7e:	4b7d      	ldr	r3, [pc, #500]	@ (8008074 <HAL_RCC_OscConfig+0x470>)
 8007e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e82:	4a7c      	ldr	r2, [pc, #496]	@ (8008074 <HAL_RCC_OscConfig+0x470>)
 8007e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e88:	6413      	str	r3, [r2, #64]	@ 0x40
 8007e8a:	4b7a      	ldr	r3, [pc, #488]	@ (8008074 <HAL_RCC_OscConfig+0x470>)
 8007e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e92:	60bb      	str	r3, [r7, #8]
 8007e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e96:	2301      	movs	r3, #1
 8007e98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e9a:	4b77      	ldr	r3, [pc, #476]	@ (8008078 <HAL_RCC_OscConfig+0x474>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d118      	bne.n	8007ed8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ea6:	4b74      	ldr	r3, [pc, #464]	@ (8008078 <HAL_RCC_OscConfig+0x474>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a73      	ldr	r2, [pc, #460]	@ (8008078 <HAL_RCC_OscConfig+0x474>)
 8007eac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007eb2:	f7fe f991 	bl	80061d8 <HAL_GetTick>
 8007eb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007eb8:	e008      	b.n	8007ecc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007eba:	f7fe f98d 	bl	80061d8 <HAL_GetTick>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d901      	bls.n	8007ecc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	e10c      	b.n	80080e6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ecc:	4b6a      	ldr	r3, [pc, #424]	@ (8008078 <HAL_RCC_OscConfig+0x474>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d0f0      	beq.n	8007eba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d106      	bne.n	8007eee <HAL_RCC_OscConfig+0x2ea>
 8007ee0:	4b64      	ldr	r3, [pc, #400]	@ (8008074 <HAL_RCC_OscConfig+0x470>)
 8007ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ee4:	4a63      	ldr	r2, [pc, #396]	@ (8008074 <HAL_RCC_OscConfig+0x470>)
 8007ee6:	f043 0301 	orr.w	r3, r3, #1
 8007eea:	6713      	str	r3, [r2, #112]	@ 0x70
 8007eec:	e01c      	b.n	8007f28 <HAL_RCC_OscConfig+0x324>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	2b05      	cmp	r3, #5
 8007ef4:	d10c      	bne.n	8007f10 <HAL_RCC_OscConfig+0x30c>
 8007ef6:	4b5f      	ldr	r3, [pc, #380]	@ (8008074 <HAL_RCC_OscConfig+0x470>)
 8007ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007efa:	4a5e      	ldr	r2, [pc, #376]	@ (8008074 <HAL_RCC_OscConfig+0x470>)
 8007efc:	f043 0304 	orr.w	r3, r3, #4
 8007f00:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f02:	4b5c      	ldr	r3, [pc, #368]	@ (8008074 <HAL_RCC_OscConfig+0x470>)
 8007f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f06:	4a5b      	ldr	r2, [pc, #364]	@ (8008074 <HAL_RCC_OscConfig+0x470>)
 8007f08:	f043 0301 	orr.w	r3, r3, #1
 8007f0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f0e:	e00b      	b.n	8007f28 <HAL_RCC_OscConfig+0x324>
 8007f10:	4b58      	ldr	r3, [pc, #352]	@ (8008074 <HAL_RCC_OscConfig+0x470>)
 8007f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f14:	4a57      	ldr	r2, [pc, #348]	@ (8008074 <HAL_RCC_OscConfig+0x470>)
 8007f16:	f023 0301 	bic.w	r3, r3, #1
 8007f1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f1c:	4b55      	ldr	r3, [pc, #340]	@ (8008074 <HAL_RCC_OscConfig+0x470>)
 8007f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f20:	4a54      	ldr	r2, [pc, #336]	@ (8008074 <HAL_RCC_OscConfig+0x470>)
 8007f22:	f023 0304 	bic.w	r3, r3, #4
 8007f26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d015      	beq.n	8007f5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f30:	f7fe f952 	bl	80061d8 <HAL_GetTick>
 8007f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f36:	e00a      	b.n	8007f4e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f38:	f7fe f94e 	bl	80061d8 <HAL_GetTick>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d901      	bls.n	8007f4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	e0cb      	b.n	80080e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f4e:	4b49      	ldr	r3, [pc, #292]	@ (8008074 <HAL_RCC_OscConfig+0x470>)
 8007f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f52:	f003 0302 	and.w	r3, r3, #2
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d0ee      	beq.n	8007f38 <HAL_RCC_OscConfig+0x334>
 8007f5a:	e014      	b.n	8007f86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f5c:	f7fe f93c 	bl	80061d8 <HAL_GetTick>
 8007f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f62:	e00a      	b.n	8007f7a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f64:	f7fe f938 	bl	80061d8 <HAL_GetTick>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	1ad3      	subs	r3, r2, r3
 8007f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d901      	bls.n	8007f7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007f76:	2303      	movs	r3, #3
 8007f78:	e0b5      	b.n	80080e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f7a:	4b3e      	ldr	r3, [pc, #248]	@ (8008074 <HAL_RCC_OscConfig+0x470>)
 8007f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f7e:	f003 0302 	and.w	r3, r3, #2
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1ee      	bne.n	8007f64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007f86:	7dfb      	ldrb	r3, [r7, #23]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d105      	bne.n	8007f98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f8c:	4b39      	ldr	r3, [pc, #228]	@ (8008074 <HAL_RCC_OscConfig+0x470>)
 8007f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f90:	4a38      	ldr	r2, [pc, #224]	@ (8008074 <HAL_RCC_OscConfig+0x470>)
 8007f92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f000 80a1 	beq.w	80080e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007fa2:	4b34      	ldr	r3, [pc, #208]	@ (8008074 <HAL_RCC_OscConfig+0x470>)
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	f003 030c 	and.w	r3, r3, #12
 8007faa:	2b08      	cmp	r3, #8
 8007fac:	d05c      	beq.n	8008068 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d141      	bne.n	800803a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fb6:	4b31      	ldr	r3, [pc, #196]	@ (800807c <HAL_RCC_OscConfig+0x478>)
 8007fb8:	2200      	movs	r2, #0
 8007fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fbc:	f7fe f90c 	bl	80061d8 <HAL_GetTick>
 8007fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fc2:	e008      	b.n	8007fd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fc4:	f7fe f908 	bl	80061d8 <HAL_GetTick>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d901      	bls.n	8007fd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e087      	b.n	80080e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fd6:	4b27      	ldr	r3, [pc, #156]	@ (8008074 <HAL_RCC_OscConfig+0x470>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1f0      	bne.n	8007fc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	69da      	ldr	r2, [r3, #28]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	431a      	orrs	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ff0:	019b      	lsls	r3, r3, #6
 8007ff2:	431a      	orrs	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ff8:	085b      	lsrs	r3, r3, #1
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	041b      	lsls	r3, r3, #16
 8007ffe:	431a      	orrs	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008004:	061b      	lsls	r3, r3, #24
 8008006:	491b      	ldr	r1, [pc, #108]	@ (8008074 <HAL_RCC_OscConfig+0x470>)
 8008008:	4313      	orrs	r3, r2
 800800a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800800c:	4b1b      	ldr	r3, [pc, #108]	@ (800807c <HAL_RCC_OscConfig+0x478>)
 800800e:	2201      	movs	r2, #1
 8008010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008012:	f7fe f8e1 	bl	80061d8 <HAL_GetTick>
 8008016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008018:	e008      	b.n	800802c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800801a:	f7fe f8dd 	bl	80061d8 <HAL_GetTick>
 800801e:	4602      	mov	r2, r0
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	2b02      	cmp	r3, #2
 8008026:	d901      	bls.n	800802c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008028:	2303      	movs	r3, #3
 800802a:	e05c      	b.n	80080e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800802c:	4b11      	ldr	r3, [pc, #68]	@ (8008074 <HAL_RCC_OscConfig+0x470>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008034:	2b00      	cmp	r3, #0
 8008036:	d0f0      	beq.n	800801a <HAL_RCC_OscConfig+0x416>
 8008038:	e054      	b.n	80080e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800803a:	4b10      	ldr	r3, [pc, #64]	@ (800807c <HAL_RCC_OscConfig+0x478>)
 800803c:	2200      	movs	r2, #0
 800803e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008040:	f7fe f8ca 	bl	80061d8 <HAL_GetTick>
 8008044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008046:	e008      	b.n	800805a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008048:	f7fe f8c6 	bl	80061d8 <HAL_GetTick>
 800804c:	4602      	mov	r2, r0
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	1ad3      	subs	r3, r2, r3
 8008052:	2b02      	cmp	r3, #2
 8008054:	d901      	bls.n	800805a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008056:	2303      	movs	r3, #3
 8008058:	e045      	b.n	80080e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800805a:	4b06      	ldr	r3, [pc, #24]	@ (8008074 <HAL_RCC_OscConfig+0x470>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1f0      	bne.n	8008048 <HAL_RCC_OscConfig+0x444>
 8008066:	e03d      	b.n	80080e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	699b      	ldr	r3, [r3, #24]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d107      	bne.n	8008080 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	e038      	b.n	80080e6 <HAL_RCC_OscConfig+0x4e2>
 8008074:	40023800 	.word	0x40023800
 8008078:	40007000 	.word	0x40007000
 800807c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008080:	4b1b      	ldr	r3, [pc, #108]	@ (80080f0 <HAL_RCC_OscConfig+0x4ec>)
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	699b      	ldr	r3, [r3, #24]
 800808a:	2b01      	cmp	r3, #1
 800808c:	d028      	beq.n	80080e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008098:	429a      	cmp	r2, r3
 800809a:	d121      	bne.n	80080e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d11a      	bne.n	80080e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80080b0:	4013      	ands	r3, r2
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80080b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d111      	bne.n	80080e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c6:	085b      	lsrs	r3, r3, #1
 80080c8:	3b01      	subs	r3, #1
 80080ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d107      	bne.n	80080e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80080dc:	429a      	cmp	r2, r3
 80080de:	d001      	beq.n	80080e4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	e000      	b.n	80080e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3718      	adds	r7, #24
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	40023800 	.word	0x40023800

080080f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d101      	bne.n	8008108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	e0cc      	b.n	80082a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008108:	4b68      	ldr	r3, [pc, #416]	@ (80082ac <HAL_RCC_ClockConfig+0x1b8>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 0307 	and.w	r3, r3, #7
 8008110:	683a      	ldr	r2, [r7, #0]
 8008112:	429a      	cmp	r2, r3
 8008114:	d90c      	bls.n	8008130 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008116:	4b65      	ldr	r3, [pc, #404]	@ (80082ac <HAL_RCC_ClockConfig+0x1b8>)
 8008118:	683a      	ldr	r2, [r7, #0]
 800811a:	b2d2      	uxtb	r2, r2
 800811c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800811e:	4b63      	ldr	r3, [pc, #396]	@ (80082ac <HAL_RCC_ClockConfig+0x1b8>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 0307 	and.w	r3, r3, #7
 8008126:	683a      	ldr	r2, [r7, #0]
 8008128:	429a      	cmp	r2, r3
 800812a:	d001      	beq.n	8008130 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	e0b8      	b.n	80082a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 0302 	and.w	r3, r3, #2
 8008138:	2b00      	cmp	r3, #0
 800813a:	d020      	beq.n	800817e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f003 0304 	and.w	r3, r3, #4
 8008144:	2b00      	cmp	r3, #0
 8008146:	d005      	beq.n	8008154 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008148:	4b59      	ldr	r3, [pc, #356]	@ (80082b0 <HAL_RCC_ClockConfig+0x1bc>)
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	4a58      	ldr	r2, [pc, #352]	@ (80082b0 <HAL_RCC_ClockConfig+0x1bc>)
 800814e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008152:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 0308 	and.w	r3, r3, #8
 800815c:	2b00      	cmp	r3, #0
 800815e:	d005      	beq.n	800816c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008160:	4b53      	ldr	r3, [pc, #332]	@ (80082b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	4a52      	ldr	r2, [pc, #328]	@ (80082b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008166:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800816a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800816c:	4b50      	ldr	r3, [pc, #320]	@ (80082b0 <HAL_RCC_ClockConfig+0x1bc>)
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	494d      	ldr	r1, [pc, #308]	@ (80082b0 <HAL_RCC_ClockConfig+0x1bc>)
 800817a:	4313      	orrs	r3, r2
 800817c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	2b00      	cmp	r3, #0
 8008188:	d044      	beq.n	8008214 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	2b01      	cmp	r3, #1
 8008190:	d107      	bne.n	80081a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008192:	4b47      	ldr	r3, [pc, #284]	@ (80082b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800819a:	2b00      	cmp	r3, #0
 800819c:	d119      	bne.n	80081d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	e07f      	b.n	80082a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	d003      	beq.n	80081b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80081ae:	2b03      	cmp	r3, #3
 80081b0:	d107      	bne.n	80081c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081b2:	4b3f      	ldr	r3, [pc, #252]	@ (80082b0 <HAL_RCC_ClockConfig+0x1bc>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d109      	bne.n	80081d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e06f      	b.n	80082a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081c2:	4b3b      	ldr	r3, [pc, #236]	@ (80082b0 <HAL_RCC_ClockConfig+0x1bc>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 0302 	and.w	r3, r3, #2
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d101      	bne.n	80081d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	e067      	b.n	80082a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80081d2:	4b37      	ldr	r3, [pc, #220]	@ (80082b0 <HAL_RCC_ClockConfig+0x1bc>)
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	f023 0203 	bic.w	r2, r3, #3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	4934      	ldr	r1, [pc, #208]	@ (80082b0 <HAL_RCC_ClockConfig+0x1bc>)
 80081e0:	4313      	orrs	r3, r2
 80081e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80081e4:	f7fd fff8 	bl	80061d8 <HAL_GetTick>
 80081e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081ea:	e00a      	b.n	8008202 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081ec:	f7fd fff4 	bl	80061d8 <HAL_GetTick>
 80081f0:	4602      	mov	r2, r0
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d901      	bls.n	8008202 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e04f      	b.n	80082a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008202:	4b2b      	ldr	r3, [pc, #172]	@ (80082b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	f003 020c 	and.w	r2, r3, #12
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	429a      	cmp	r2, r3
 8008212:	d1eb      	bne.n	80081ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008214:	4b25      	ldr	r3, [pc, #148]	@ (80082ac <HAL_RCC_ClockConfig+0x1b8>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 0307 	and.w	r3, r3, #7
 800821c:	683a      	ldr	r2, [r7, #0]
 800821e:	429a      	cmp	r2, r3
 8008220:	d20c      	bcs.n	800823c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008222:	4b22      	ldr	r3, [pc, #136]	@ (80082ac <HAL_RCC_ClockConfig+0x1b8>)
 8008224:	683a      	ldr	r2, [r7, #0]
 8008226:	b2d2      	uxtb	r2, r2
 8008228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800822a:	4b20      	ldr	r3, [pc, #128]	@ (80082ac <HAL_RCC_ClockConfig+0x1b8>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 0307 	and.w	r3, r3, #7
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	429a      	cmp	r2, r3
 8008236:	d001      	beq.n	800823c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	e032      	b.n	80082a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 0304 	and.w	r3, r3, #4
 8008244:	2b00      	cmp	r3, #0
 8008246:	d008      	beq.n	800825a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008248:	4b19      	ldr	r3, [pc, #100]	@ (80082b0 <HAL_RCC_ClockConfig+0x1bc>)
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	4916      	ldr	r1, [pc, #88]	@ (80082b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008256:	4313      	orrs	r3, r2
 8008258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f003 0308 	and.w	r3, r3, #8
 8008262:	2b00      	cmp	r3, #0
 8008264:	d009      	beq.n	800827a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008266:	4b12      	ldr	r3, [pc, #72]	@ (80082b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	00db      	lsls	r3, r3, #3
 8008274:	490e      	ldr	r1, [pc, #56]	@ (80082b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008276:	4313      	orrs	r3, r2
 8008278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800827a:	f000 f821 	bl	80082c0 <HAL_RCC_GetSysClockFreq>
 800827e:	4602      	mov	r2, r0
 8008280:	4b0b      	ldr	r3, [pc, #44]	@ (80082b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	091b      	lsrs	r3, r3, #4
 8008286:	f003 030f 	and.w	r3, r3, #15
 800828a:	490a      	ldr	r1, [pc, #40]	@ (80082b4 <HAL_RCC_ClockConfig+0x1c0>)
 800828c:	5ccb      	ldrb	r3, [r1, r3]
 800828e:	fa22 f303 	lsr.w	r3, r2, r3
 8008292:	4a09      	ldr	r2, [pc, #36]	@ (80082b8 <HAL_RCC_ClockConfig+0x1c4>)
 8008294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008296:	4b09      	ldr	r3, [pc, #36]	@ (80082bc <HAL_RCC_ClockConfig+0x1c8>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4618      	mov	r0, r3
 800829c:	f7fd fc40 	bl	8005b20 <HAL_InitTick>

  return HAL_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	40023c00 	.word	0x40023c00
 80082b0:	40023800 	.word	0x40023800
 80082b4:	08012b00 	.word	0x08012b00
 80082b8:	20000040 	.word	0x20000040
 80082bc:	20000044 	.word	0x20000044

080082c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80082c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082c4:	b094      	sub	sp, #80	@ 0x50
 80082c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80082c8:	2300      	movs	r3, #0
 80082ca:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80082cc:	2300      	movs	r3, #0
 80082ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80082d0:	2300      	movs	r3, #0
 80082d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80082d4:	2300      	movs	r3, #0
 80082d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80082d8:	4b79      	ldr	r3, [pc, #484]	@ (80084c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	f003 030c 	and.w	r3, r3, #12
 80082e0:	2b08      	cmp	r3, #8
 80082e2:	d00d      	beq.n	8008300 <HAL_RCC_GetSysClockFreq+0x40>
 80082e4:	2b08      	cmp	r3, #8
 80082e6:	f200 80e1 	bhi.w	80084ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d002      	beq.n	80082f4 <HAL_RCC_GetSysClockFreq+0x34>
 80082ee:	2b04      	cmp	r3, #4
 80082f0:	d003      	beq.n	80082fa <HAL_RCC_GetSysClockFreq+0x3a>
 80082f2:	e0db      	b.n	80084ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80082f4:	4b73      	ldr	r3, [pc, #460]	@ (80084c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80082f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80082f8:	e0db      	b.n	80084b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80082fa:	4b73      	ldr	r3, [pc, #460]	@ (80084c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80082fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80082fe:	e0d8      	b.n	80084b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008300:	4b6f      	ldr	r3, [pc, #444]	@ (80084c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008308:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800830a:	4b6d      	ldr	r3, [pc, #436]	@ (80084c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d063      	beq.n	80083de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008316:	4b6a      	ldr	r3, [pc, #424]	@ (80084c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	099b      	lsrs	r3, r3, #6
 800831c:	2200      	movs	r2, #0
 800831e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008320:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008328:	633b      	str	r3, [r7, #48]	@ 0x30
 800832a:	2300      	movs	r3, #0
 800832c:	637b      	str	r3, [r7, #52]	@ 0x34
 800832e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008332:	4622      	mov	r2, r4
 8008334:	462b      	mov	r3, r5
 8008336:	f04f 0000 	mov.w	r0, #0
 800833a:	f04f 0100 	mov.w	r1, #0
 800833e:	0159      	lsls	r1, r3, #5
 8008340:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008344:	0150      	lsls	r0, r2, #5
 8008346:	4602      	mov	r2, r0
 8008348:	460b      	mov	r3, r1
 800834a:	4621      	mov	r1, r4
 800834c:	1a51      	subs	r1, r2, r1
 800834e:	6139      	str	r1, [r7, #16]
 8008350:	4629      	mov	r1, r5
 8008352:	eb63 0301 	sbc.w	r3, r3, r1
 8008356:	617b      	str	r3, [r7, #20]
 8008358:	f04f 0200 	mov.w	r2, #0
 800835c:	f04f 0300 	mov.w	r3, #0
 8008360:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008364:	4659      	mov	r1, fp
 8008366:	018b      	lsls	r3, r1, #6
 8008368:	4651      	mov	r1, sl
 800836a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800836e:	4651      	mov	r1, sl
 8008370:	018a      	lsls	r2, r1, #6
 8008372:	4651      	mov	r1, sl
 8008374:	ebb2 0801 	subs.w	r8, r2, r1
 8008378:	4659      	mov	r1, fp
 800837a:	eb63 0901 	sbc.w	r9, r3, r1
 800837e:	f04f 0200 	mov.w	r2, #0
 8008382:	f04f 0300 	mov.w	r3, #0
 8008386:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800838a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800838e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008392:	4690      	mov	r8, r2
 8008394:	4699      	mov	r9, r3
 8008396:	4623      	mov	r3, r4
 8008398:	eb18 0303 	adds.w	r3, r8, r3
 800839c:	60bb      	str	r3, [r7, #8]
 800839e:	462b      	mov	r3, r5
 80083a0:	eb49 0303 	adc.w	r3, r9, r3
 80083a4:	60fb      	str	r3, [r7, #12]
 80083a6:	f04f 0200 	mov.w	r2, #0
 80083aa:	f04f 0300 	mov.w	r3, #0
 80083ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80083b2:	4629      	mov	r1, r5
 80083b4:	024b      	lsls	r3, r1, #9
 80083b6:	4621      	mov	r1, r4
 80083b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80083bc:	4621      	mov	r1, r4
 80083be:	024a      	lsls	r2, r1, #9
 80083c0:	4610      	mov	r0, r2
 80083c2:	4619      	mov	r1, r3
 80083c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083c6:	2200      	movs	r2, #0
 80083c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80083ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80083cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80083d0:	f7f8 fc6a 	bl	8000ca8 <__aeabi_uldivmod>
 80083d4:	4602      	mov	r2, r0
 80083d6:	460b      	mov	r3, r1
 80083d8:	4613      	mov	r3, r2
 80083da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083dc:	e058      	b.n	8008490 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083de:	4b38      	ldr	r3, [pc, #224]	@ (80084c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	099b      	lsrs	r3, r3, #6
 80083e4:	2200      	movs	r2, #0
 80083e6:	4618      	mov	r0, r3
 80083e8:	4611      	mov	r1, r2
 80083ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80083ee:	623b      	str	r3, [r7, #32]
 80083f0:	2300      	movs	r3, #0
 80083f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80083f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80083f8:	4642      	mov	r2, r8
 80083fa:	464b      	mov	r3, r9
 80083fc:	f04f 0000 	mov.w	r0, #0
 8008400:	f04f 0100 	mov.w	r1, #0
 8008404:	0159      	lsls	r1, r3, #5
 8008406:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800840a:	0150      	lsls	r0, r2, #5
 800840c:	4602      	mov	r2, r0
 800840e:	460b      	mov	r3, r1
 8008410:	4641      	mov	r1, r8
 8008412:	ebb2 0a01 	subs.w	sl, r2, r1
 8008416:	4649      	mov	r1, r9
 8008418:	eb63 0b01 	sbc.w	fp, r3, r1
 800841c:	f04f 0200 	mov.w	r2, #0
 8008420:	f04f 0300 	mov.w	r3, #0
 8008424:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008428:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800842c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008430:	ebb2 040a 	subs.w	r4, r2, sl
 8008434:	eb63 050b 	sbc.w	r5, r3, fp
 8008438:	f04f 0200 	mov.w	r2, #0
 800843c:	f04f 0300 	mov.w	r3, #0
 8008440:	00eb      	lsls	r3, r5, #3
 8008442:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008446:	00e2      	lsls	r2, r4, #3
 8008448:	4614      	mov	r4, r2
 800844a:	461d      	mov	r5, r3
 800844c:	4643      	mov	r3, r8
 800844e:	18e3      	adds	r3, r4, r3
 8008450:	603b      	str	r3, [r7, #0]
 8008452:	464b      	mov	r3, r9
 8008454:	eb45 0303 	adc.w	r3, r5, r3
 8008458:	607b      	str	r3, [r7, #4]
 800845a:	f04f 0200 	mov.w	r2, #0
 800845e:	f04f 0300 	mov.w	r3, #0
 8008462:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008466:	4629      	mov	r1, r5
 8008468:	028b      	lsls	r3, r1, #10
 800846a:	4621      	mov	r1, r4
 800846c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008470:	4621      	mov	r1, r4
 8008472:	028a      	lsls	r2, r1, #10
 8008474:	4610      	mov	r0, r2
 8008476:	4619      	mov	r1, r3
 8008478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800847a:	2200      	movs	r2, #0
 800847c:	61bb      	str	r3, [r7, #24]
 800847e:	61fa      	str	r2, [r7, #28]
 8008480:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008484:	f7f8 fc10 	bl	8000ca8 <__aeabi_uldivmod>
 8008488:	4602      	mov	r2, r0
 800848a:	460b      	mov	r3, r1
 800848c:	4613      	mov	r3, r2
 800848e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008490:	4b0b      	ldr	r3, [pc, #44]	@ (80084c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	0c1b      	lsrs	r3, r3, #16
 8008496:	f003 0303 	and.w	r3, r3, #3
 800849a:	3301      	adds	r3, #1
 800849c:	005b      	lsls	r3, r3, #1
 800849e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80084a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80084a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80084a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80084aa:	e002      	b.n	80084b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80084ac:	4b05      	ldr	r3, [pc, #20]	@ (80084c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80084ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80084b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80084b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3750      	adds	r7, #80	@ 0x50
 80084b8:	46bd      	mov	sp, r7
 80084ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084be:	bf00      	nop
 80084c0:	40023800 	.word	0x40023800
 80084c4:	00f42400 	.word	0x00f42400
 80084c8:	007a1200 	.word	0x007a1200

080084cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80084cc:	b480      	push	{r7}
 80084ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80084d0:	4b03      	ldr	r3, [pc, #12]	@ (80084e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80084d2:	681b      	ldr	r3, [r3, #0]
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	20000040 	.word	0x20000040

080084e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80084e8:	f7ff fff0 	bl	80084cc <HAL_RCC_GetHCLKFreq>
 80084ec:	4602      	mov	r2, r0
 80084ee:	4b05      	ldr	r3, [pc, #20]	@ (8008504 <HAL_RCC_GetPCLK1Freq+0x20>)
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	0a9b      	lsrs	r3, r3, #10
 80084f4:	f003 0307 	and.w	r3, r3, #7
 80084f8:	4903      	ldr	r1, [pc, #12]	@ (8008508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80084fa:	5ccb      	ldrb	r3, [r1, r3]
 80084fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008500:	4618      	mov	r0, r3
 8008502:	bd80      	pop	{r7, pc}
 8008504:	40023800 	.word	0x40023800
 8008508:	08012b10 	.word	0x08012b10

0800850c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008510:	f7ff ffdc 	bl	80084cc <HAL_RCC_GetHCLKFreq>
 8008514:	4602      	mov	r2, r0
 8008516:	4b05      	ldr	r3, [pc, #20]	@ (800852c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	0b5b      	lsrs	r3, r3, #13
 800851c:	f003 0307 	and.w	r3, r3, #7
 8008520:	4903      	ldr	r1, [pc, #12]	@ (8008530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008522:	5ccb      	ldrb	r3, [r1, r3]
 8008524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008528:	4618      	mov	r0, r3
 800852a:	bd80      	pop	{r7, pc}
 800852c:	40023800 	.word	0x40023800
 8008530:	08012b10 	.word	0x08012b10

08008534 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	220f      	movs	r2, #15
 8008542:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008544:	4b12      	ldr	r3, [pc, #72]	@ (8008590 <HAL_RCC_GetClockConfig+0x5c>)
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	f003 0203 	and.w	r2, r3, #3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008550:	4b0f      	ldr	r3, [pc, #60]	@ (8008590 <HAL_RCC_GetClockConfig+0x5c>)
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800855c:	4b0c      	ldr	r3, [pc, #48]	@ (8008590 <HAL_RCC_GetClockConfig+0x5c>)
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008568:	4b09      	ldr	r3, [pc, #36]	@ (8008590 <HAL_RCC_GetClockConfig+0x5c>)
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	08db      	lsrs	r3, r3, #3
 800856e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008576:	4b07      	ldr	r3, [pc, #28]	@ (8008594 <HAL_RCC_GetClockConfig+0x60>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0207 	and.w	r2, r3, #7
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	601a      	str	r2, [r3, #0]
}
 8008582:	bf00      	nop
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	40023800 	.word	0x40023800
 8008594:	40023c00 	.word	0x40023c00

08008598 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d101      	bne.n	80085aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e041      	b.n	800862e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d106      	bne.n	80085c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f839 	bl	8008636 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2202      	movs	r2, #2
 80085c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	3304      	adds	r3, #4
 80085d4:	4619      	mov	r1, r3
 80085d6:	4610      	mov	r0, r2
 80085d8:	f000 f9c0 	bl	800895c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3708      	adds	r7, #8
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008636:	b480      	push	{r7}
 8008638:	b083      	sub	sp, #12
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800863e:	bf00      	nop
 8008640:	370c      	adds	r7, #12
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
	...

0800864c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800865a:	b2db      	uxtb	r3, r3
 800865c:	2b01      	cmp	r3, #1
 800865e:	d001      	beq.n	8008664 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	e04e      	b.n	8008702 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2202      	movs	r2, #2
 8008668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68da      	ldr	r2, [r3, #12]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f042 0201 	orr.w	r2, r2, #1
 800867a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a23      	ldr	r2, [pc, #140]	@ (8008710 <HAL_TIM_Base_Start_IT+0xc4>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d022      	beq.n	80086cc <HAL_TIM_Base_Start_IT+0x80>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800868e:	d01d      	beq.n	80086cc <HAL_TIM_Base_Start_IT+0x80>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a1f      	ldr	r2, [pc, #124]	@ (8008714 <HAL_TIM_Base_Start_IT+0xc8>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d018      	beq.n	80086cc <HAL_TIM_Base_Start_IT+0x80>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a1e      	ldr	r2, [pc, #120]	@ (8008718 <HAL_TIM_Base_Start_IT+0xcc>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d013      	beq.n	80086cc <HAL_TIM_Base_Start_IT+0x80>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a1c      	ldr	r2, [pc, #112]	@ (800871c <HAL_TIM_Base_Start_IT+0xd0>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d00e      	beq.n	80086cc <HAL_TIM_Base_Start_IT+0x80>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a1b      	ldr	r2, [pc, #108]	@ (8008720 <HAL_TIM_Base_Start_IT+0xd4>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d009      	beq.n	80086cc <HAL_TIM_Base_Start_IT+0x80>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a19      	ldr	r2, [pc, #100]	@ (8008724 <HAL_TIM_Base_Start_IT+0xd8>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d004      	beq.n	80086cc <HAL_TIM_Base_Start_IT+0x80>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a18      	ldr	r2, [pc, #96]	@ (8008728 <HAL_TIM_Base_Start_IT+0xdc>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d111      	bne.n	80086f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	f003 0307 	and.w	r3, r3, #7
 80086d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2b06      	cmp	r3, #6
 80086dc:	d010      	beq.n	8008700 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f042 0201 	orr.w	r2, r2, #1
 80086ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086ee:	e007      	b.n	8008700 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f042 0201 	orr.w	r2, r2, #1
 80086fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3714      	adds	r7, #20
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	40010000 	.word	0x40010000
 8008714:	40000400 	.word	0x40000400
 8008718:	40000800 	.word	0x40000800
 800871c:	40000c00 	.word	0x40000c00
 8008720:	40010400 	.word	0x40010400
 8008724:	40014000 	.word	0x40014000
 8008728:	40001800 	.word	0x40001800

0800872c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	f003 0302 	and.w	r3, r3, #2
 800874a:	2b00      	cmp	r3, #0
 800874c:	d020      	beq.n	8008790 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f003 0302 	and.w	r3, r3, #2
 8008754:	2b00      	cmp	r3, #0
 8008756:	d01b      	beq.n	8008790 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f06f 0202 	mvn.w	r2, #2
 8008760:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2201      	movs	r2, #1
 8008766:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	699b      	ldr	r3, [r3, #24]
 800876e:	f003 0303 	and.w	r3, r3, #3
 8008772:	2b00      	cmp	r3, #0
 8008774:	d003      	beq.n	800877e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f8d2 	bl	8008920 <HAL_TIM_IC_CaptureCallback>
 800877c:	e005      	b.n	800878a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f8c4 	bl	800890c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f8d5 	bl	8008934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	f003 0304 	and.w	r3, r3, #4
 8008796:	2b00      	cmp	r3, #0
 8008798:	d020      	beq.n	80087dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f003 0304 	and.w	r3, r3, #4
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d01b      	beq.n	80087dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f06f 0204 	mvn.w	r2, #4
 80087ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2202      	movs	r2, #2
 80087b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	699b      	ldr	r3, [r3, #24]
 80087ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d003      	beq.n	80087ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f8ac 	bl	8008920 <HAL_TIM_IC_CaptureCallback>
 80087c8:	e005      	b.n	80087d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f89e 	bl	800890c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 f8af 	bl	8008934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	f003 0308 	and.w	r3, r3, #8
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d020      	beq.n	8008828 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f003 0308 	and.w	r3, r3, #8
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d01b      	beq.n	8008828 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f06f 0208 	mvn.w	r2, #8
 80087f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2204      	movs	r2, #4
 80087fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	69db      	ldr	r3, [r3, #28]
 8008806:	f003 0303 	and.w	r3, r3, #3
 800880a:	2b00      	cmp	r3, #0
 800880c:	d003      	beq.n	8008816 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 f886 	bl	8008920 <HAL_TIM_IC_CaptureCallback>
 8008814:	e005      	b.n	8008822 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f878 	bl	800890c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 f889 	bl	8008934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	f003 0310 	and.w	r3, r3, #16
 800882e:	2b00      	cmp	r3, #0
 8008830:	d020      	beq.n	8008874 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f003 0310 	and.w	r3, r3, #16
 8008838:	2b00      	cmp	r3, #0
 800883a:	d01b      	beq.n	8008874 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f06f 0210 	mvn.w	r2, #16
 8008844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2208      	movs	r2, #8
 800884a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	69db      	ldr	r3, [r3, #28]
 8008852:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008856:	2b00      	cmp	r3, #0
 8008858:	d003      	beq.n	8008862 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 f860 	bl	8008920 <HAL_TIM_IC_CaptureCallback>
 8008860:	e005      	b.n	800886e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f852 	bl	800890c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 f863 	bl	8008934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	f003 0301 	and.w	r3, r3, #1
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00c      	beq.n	8008898 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f003 0301 	and.w	r3, r3, #1
 8008884:	2b00      	cmp	r3, #0
 8008886:	d007      	beq.n	8008898 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f06f 0201 	mvn.w	r2, #1
 8008890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f7fc fbb4 	bl	8005000 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00c      	beq.n	80088bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d007      	beq.n	80088bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80088b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 f906 	bl	8008ac8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00c      	beq.n	80088e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d007      	beq.n	80088e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80088d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f834 	bl	8008948 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	f003 0320 	and.w	r3, r3, #32
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00c      	beq.n	8008904 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f003 0320 	and.w	r3, r3, #32
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d007      	beq.n	8008904 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f06f 0220 	mvn.w	r2, #32
 80088fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 f8d8 	bl	8008ab4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008904:	bf00      	nop
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008914:	bf00      	nop
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008928:	bf00      	nop
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a46      	ldr	r2, [pc, #280]	@ (8008a88 <TIM_Base_SetConfig+0x12c>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d013      	beq.n	800899c <TIM_Base_SetConfig+0x40>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800897a:	d00f      	beq.n	800899c <TIM_Base_SetConfig+0x40>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a43      	ldr	r2, [pc, #268]	@ (8008a8c <TIM_Base_SetConfig+0x130>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d00b      	beq.n	800899c <TIM_Base_SetConfig+0x40>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a42      	ldr	r2, [pc, #264]	@ (8008a90 <TIM_Base_SetConfig+0x134>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d007      	beq.n	800899c <TIM_Base_SetConfig+0x40>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a41      	ldr	r2, [pc, #260]	@ (8008a94 <TIM_Base_SetConfig+0x138>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d003      	beq.n	800899c <TIM_Base_SetConfig+0x40>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a40      	ldr	r2, [pc, #256]	@ (8008a98 <TIM_Base_SetConfig+0x13c>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d108      	bne.n	80089ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a35      	ldr	r2, [pc, #212]	@ (8008a88 <TIM_Base_SetConfig+0x12c>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d02b      	beq.n	8008a0e <TIM_Base_SetConfig+0xb2>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089bc:	d027      	beq.n	8008a0e <TIM_Base_SetConfig+0xb2>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a32      	ldr	r2, [pc, #200]	@ (8008a8c <TIM_Base_SetConfig+0x130>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d023      	beq.n	8008a0e <TIM_Base_SetConfig+0xb2>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a31      	ldr	r2, [pc, #196]	@ (8008a90 <TIM_Base_SetConfig+0x134>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d01f      	beq.n	8008a0e <TIM_Base_SetConfig+0xb2>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4a30      	ldr	r2, [pc, #192]	@ (8008a94 <TIM_Base_SetConfig+0x138>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d01b      	beq.n	8008a0e <TIM_Base_SetConfig+0xb2>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4a2f      	ldr	r2, [pc, #188]	@ (8008a98 <TIM_Base_SetConfig+0x13c>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d017      	beq.n	8008a0e <TIM_Base_SetConfig+0xb2>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4a2e      	ldr	r2, [pc, #184]	@ (8008a9c <TIM_Base_SetConfig+0x140>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d013      	beq.n	8008a0e <TIM_Base_SetConfig+0xb2>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4a2d      	ldr	r2, [pc, #180]	@ (8008aa0 <TIM_Base_SetConfig+0x144>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d00f      	beq.n	8008a0e <TIM_Base_SetConfig+0xb2>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4a2c      	ldr	r2, [pc, #176]	@ (8008aa4 <TIM_Base_SetConfig+0x148>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d00b      	beq.n	8008a0e <TIM_Base_SetConfig+0xb2>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a2b      	ldr	r2, [pc, #172]	@ (8008aa8 <TIM_Base_SetConfig+0x14c>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d007      	beq.n	8008a0e <TIM_Base_SetConfig+0xb2>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a2a      	ldr	r2, [pc, #168]	@ (8008aac <TIM_Base_SetConfig+0x150>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d003      	beq.n	8008a0e <TIM_Base_SetConfig+0xb2>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a29      	ldr	r2, [pc, #164]	@ (8008ab0 <TIM_Base_SetConfig+0x154>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d108      	bne.n	8008a20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	689a      	ldr	r2, [r3, #8]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a10      	ldr	r2, [pc, #64]	@ (8008a88 <TIM_Base_SetConfig+0x12c>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d003      	beq.n	8008a54 <TIM_Base_SetConfig+0xf8>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	4a12      	ldr	r2, [pc, #72]	@ (8008a98 <TIM_Base_SetConfig+0x13c>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d103      	bne.n	8008a5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	691a      	ldr	r2, [r3, #16]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	f003 0301 	and.w	r3, r3, #1
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d105      	bne.n	8008a7a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	691b      	ldr	r3, [r3, #16]
 8008a72:	f023 0201 	bic.w	r2, r3, #1
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	611a      	str	r2, [r3, #16]
  }
}
 8008a7a:	bf00      	nop
 8008a7c:	3714      	adds	r7, #20
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	40010000 	.word	0x40010000
 8008a8c:	40000400 	.word	0x40000400
 8008a90:	40000800 	.word	0x40000800
 8008a94:	40000c00 	.word	0x40000c00
 8008a98:	40010400 	.word	0x40010400
 8008a9c:	40014000 	.word	0x40014000
 8008aa0:	40014400 	.word	0x40014400
 8008aa4:	40014800 	.word	0x40014800
 8008aa8:	40001800 	.word	0x40001800
 8008aac:	40001c00 	.word	0x40001c00
 8008ab0:	40002000 	.word	0x40002000

08008ab4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008abc:	bf00      	nop
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ad0:	bf00      	nop
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d101      	bne.n	8008aee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e042      	b.n	8008b74 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d106      	bne.n	8008b08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f7fd fa5e 	bl	8005fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2224      	movs	r2, #36	@ 0x24
 8008b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68da      	ldr	r2, [r3, #12]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008b1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fe8b 	bl	800983c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	691a      	ldr	r2, [r3, #16]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008b34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	695a      	ldr	r2, [r3, #20]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008b44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68da      	ldr	r2, [r3, #12]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008b54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2220      	movs	r2, #32
 8008b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2220      	movs	r2, #32
 8008b68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3708      	adds	r7, #8
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b08a      	sub	sp, #40	@ 0x28
 8008b80:	af02      	add	r7, sp, #8
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	603b      	str	r3, [r7, #0]
 8008b88:	4613      	mov	r3, r2
 8008b8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	2b20      	cmp	r3, #32
 8008b9a:	d175      	bne.n	8008c88 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d002      	beq.n	8008ba8 <HAL_UART_Transmit+0x2c>
 8008ba2:	88fb      	ldrh	r3, [r7, #6]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d101      	bne.n	8008bac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e06e      	b.n	8008c8a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2221      	movs	r2, #33	@ 0x21
 8008bb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008bba:	f7fd fb0d 	bl	80061d8 <HAL_GetTick>
 8008bbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	88fa      	ldrh	r2, [r7, #6]
 8008bc4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	88fa      	ldrh	r2, [r7, #6]
 8008bca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bd4:	d108      	bne.n	8008be8 <HAL_UART_Transmit+0x6c>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d104      	bne.n	8008be8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008bde:	2300      	movs	r3, #0
 8008be0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	61bb      	str	r3, [r7, #24]
 8008be6:	e003      	b.n	8008bf0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008bec:	2300      	movs	r3, #0
 8008bee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008bf0:	e02e      	b.n	8008c50 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	2180      	movs	r1, #128	@ 0x80
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f000 fbed 	bl	80093dc <UART_WaitOnFlagUntilTimeout>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d005      	beq.n	8008c14 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2220      	movs	r2, #32
 8008c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e03a      	b.n	8008c8a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d10b      	bne.n	8008c32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	881b      	ldrh	r3, [r3, #0]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	3302      	adds	r3, #2
 8008c2e:	61bb      	str	r3, [r7, #24]
 8008c30:	e007      	b.n	8008c42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	781a      	ldrb	r2, [r3, #0]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1cb      	bne.n	8008bf2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	9300      	str	r3, [sp, #0]
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	2200      	movs	r2, #0
 8008c62:	2140      	movs	r1, #64	@ 0x40
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f000 fbb9 	bl	80093dc <UART_WaitOnFlagUntilTimeout>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d005      	beq.n	8008c7c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2220      	movs	r2, #32
 8008c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008c78:	2303      	movs	r3, #3
 8008c7a:	e006      	b.n	8008c8a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2220      	movs	r2, #32
 8008c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008c84:	2300      	movs	r3, #0
 8008c86:	e000      	b.n	8008c8a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008c88:	2302      	movs	r3, #2
  }
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3720      	adds	r7, #32
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b08a      	sub	sp, #40	@ 0x28
 8008c96:	af02      	add	r7, sp, #8
 8008c98:	60f8      	str	r0, [r7, #12]
 8008c9a:	60b9      	str	r1, [r7, #8]
 8008c9c:	603b      	str	r3, [r7, #0]
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	2b20      	cmp	r3, #32
 8008cb0:	f040 8081 	bne.w	8008db6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d002      	beq.n	8008cc0 <HAL_UART_Receive+0x2e>
 8008cba:	88fb      	ldrh	r3, [r7, #6]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d101      	bne.n	8008cc4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e079      	b.n	8008db8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2222      	movs	r2, #34	@ 0x22
 8008cce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008cd8:	f7fd fa7e 	bl	80061d8 <HAL_GetTick>
 8008cdc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	88fa      	ldrh	r2, [r7, #6]
 8008ce2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	88fa      	ldrh	r2, [r7, #6]
 8008ce8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cf2:	d108      	bne.n	8008d06 <HAL_UART_Receive+0x74>
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	691b      	ldr	r3, [r3, #16]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d104      	bne.n	8008d06 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	61bb      	str	r3, [r7, #24]
 8008d04:	e003      	b.n	8008d0e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008d0e:	e047      	b.n	8008da0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	9300      	str	r3, [sp, #0]
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	2200      	movs	r2, #0
 8008d18:	2120      	movs	r1, #32
 8008d1a:	68f8      	ldr	r0, [r7, #12]
 8008d1c:	f000 fb5e 	bl	80093dc <UART_WaitOnFlagUntilTimeout>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d005      	beq.n	8008d32 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2220      	movs	r2, #32
 8008d2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8008d2e:	2303      	movs	r3, #3
 8008d30:	e042      	b.n	8008db8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d10c      	bne.n	8008d52 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d44:	b29a      	uxth	r2, r3
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	3302      	adds	r3, #2
 8008d4e:	61bb      	str	r3, [r7, #24]
 8008d50:	e01f      	b.n	8008d92 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d5a:	d007      	beq.n	8008d6c <HAL_UART_Receive+0xda>
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d10a      	bne.n	8008d7a <HAL_UART_Receive+0xe8>
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	691b      	ldr	r3, [r3, #16]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d106      	bne.n	8008d7a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	b2da      	uxtb	r2, r3
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	701a      	strb	r2, [r3, #0]
 8008d78:	e008      	b.n	8008d8c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d86:	b2da      	uxtb	r2, r3
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	b29a      	uxth	r2, r3
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d1b2      	bne.n	8008d10 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2220      	movs	r2, #32
 8008dae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8008db2:	2300      	movs	r3, #0
 8008db4:	e000      	b.n	8008db8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008db6:	2302      	movs	r3, #2
  }
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3720      	adds	r7, #32
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b08c      	sub	sp, #48	@ 0x30
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	4613      	mov	r3, r2
 8008dcc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	2b20      	cmp	r3, #32
 8008dd8:	d14a      	bne.n	8008e70 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d002      	beq.n	8008de6 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8008de0:	88fb      	ldrh	r3, [r7, #6]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d101      	bne.n	8008dea <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	e043      	b.n	8008e72 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2201      	movs	r2, #1
 8008dee:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2200      	movs	r2, #0
 8008df4:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8008df6:	88fb      	ldrh	r3, [r7, #6]
 8008df8:	461a      	mov	r2, r3
 8008dfa:	68b9      	ldr	r1, [r7, #8]
 8008dfc:	68f8      	ldr	r0, [r7, #12]
 8008dfe:	f000 fb46 	bl	800948e <UART_Start_Receive_IT>
 8008e02:	4603      	mov	r3, r0
 8008e04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008e08:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d12c      	bne.n	8008e6a <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d125      	bne.n	8008e64 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e18:	2300      	movs	r3, #0
 8008e1a:	613b      	str	r3, [r7, #16]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	613b      	str	r3, [r7, #16]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	613b      	str	r3, [r7, #16]
 8008e2c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	330c      	adds	r3, #12
 8008e34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	e853 3f00 	ldrex	r3, [r3]
 8008e3c:	617b      	str	r3, [r7, #20]
   return(result);
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	f043 0310 	orr.w	r3, r3, #16
 8008e44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	330c      	adds	r3, #12
 8008e4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e4e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008e50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e52:	6a39      	ldr	r1, [r7, #32]
 8008e54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e56:	e841 2300 	strex	r3, r2, [r1]
 8008e5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d1e5      	bne.n	8008e2e <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8008e62:	e002      	b.n	8008e6a <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008e64:	2301      	movs	r3, #1
 8008e66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8008e6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008e6e:	e000      	b.n	8008e72 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8008e70:	2302      	movs	r3, #2
  }
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3730      	adds	r7, #48	@ 0x30
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
	...

08008e7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b0ba      	sub	sp, #232	@ 0xe8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	695b      	ldr	r3, [r3, #20]
 8008e9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008eb2:	f003 030f 	and.w	r3, r3, #15
 8008eb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008eba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d10f      	bne.n	8008ee2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ec6:	f003 0320 	and.w	r3, r3, #32
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d009      	beq.n	8008ee2 <HAL_UART_IRQHandler+0x66>
 8008ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ed2:	f003 0320 	and.w	r3, r3, #32
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d003      	beq.n	8008ee2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fbf0 	bl	80096c0 <UART_Receive_IT>
      return;
 8008ee0:	e25b      	b.n	800939a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008ee2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f000 80de 	beq.w	80090a8 <HAL_UART_IRQHandler+0x22c>
 8008eec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ef0:	f003 0301 	and.w	r3, r3, #1
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d106      	bne.n	8008f06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008efc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f000 80d1 	beq.w	80090a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f0a:	f003 0301 	and.w	r3, r3, #1
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00b      	beq.n	8008f2a <HAL_UART_IRQHandler+0xae>
 8008f12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d005      	beq.n	8008f2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f22:	f043 0201 	orr.w	r2, r3, #1
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f2e:	f003 0304 	and.w	r3, r3, #4
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00b      	beq.n	8008f4e <HAL_UART_IRQHandler+0xd2>
 8008f36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f3a:	f003 0301 	and.w	r3, r3, #1
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d005      	beq.n	8008f4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f46:	f043 0202 	orr.w	r2, r3, #2
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f52:	f003 0302 	and.w	r3, r3, #2
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00b      	beq.n	8008f72 <HAL_UART_IRQHandler+0xf6>
 8008f5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f5e:	f003 0301 	and.w	r3, r3, #1
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d005      	beq.n	8008f72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f6a:	f043 0204 	orr.w	r2, r3, #4
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f76:	f003 0308 	and.w	r3, r3, #8
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d011      	beq.n	8008fa2 <HAL_UART_IRQHandler+0x126>
 8008f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f82:	f003 0320 	and.w	r3, r3, #32
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d105      	bne.n	8008f96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008f8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f8e:	f003 0301 	and.w	r3, r3, #1
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d005      	beq.n	8008fa2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f9a:	f043 0208 	orr.w	r2, r3, #8
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	f000 81f2 	beq.w	8009390 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fb0:	f003 0320 	and.w	r3, r3, #32
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d008      	beq.n	8008fca <HAL_UART_IRQHandler+0x14e>
 8008fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fbc:	f003 0320 	and.w	r3, r3, #32
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d002      	beq.n	8008fca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 fb7b 	bl	80096c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	695b      	ldr	r3, [r3, #20]
 8008fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fd4:	2b40      	cmp	r3, #64	@ 0x40
 8008fd6:	bf0c      	ite	eq
 8008fd8:	2301      	moveq	r3, #1
 8008fda:	2300      	movne	r3, #0
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fe6:	f003 0308 	and.w	r3, r3, #8
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d103      	bne.n	8008ff6 <HAL_UART_IRQHandler+0x17a>
 8008fee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d04f      	beq.n	8009096 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 fa83 	bl	8009502 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	695b      	ldr	r3, [r3, #20]
 8009002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009006:	2b40      	cmp	r3, #64	@ 0x40
 8009008:	d141      	bne.n	800908e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	3314      	adds	r3, #20
 8009010:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009014:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009018:	e853 3f00 	ldrex	r3, [r3]
 800901c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009020:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009024:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009028:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	3314      	adds	r3, #20
 8009032:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009036:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800903a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009042:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009046:	e841 2300 	strex	r3, r2, [r1]
 800904a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800904e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d1d9      	bne.n	800900a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800905a:	2b00      	cmp	r3, #0
 800905c:	d013      	beq.n	8009086 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009062:	4a7e      	ldr	r2, [pc, #504]	@ (800925c <HAL_UART_IRQHandler+0x3e0>)
 8009064:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800906a:	4618      	mov	r0, r3
 800906c:	f7fd fa36 	bl	80064dc <HAL_DMA_Abort_IT>
 8009070:	4603      	mov	r3, r0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d016      	beq.n	80090a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800907a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009080:	4610      	mov	r0, r2
 8009082:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009084:	e00e      	b.n	80090a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 f99e 	bl	80093c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800908c:	e00a      	b.n	80090a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 f99a 	bl	80093c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009094:	e006      	b.n	80090a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 f996 	bl	80093c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80090a2:	e175      	b.n	8009390 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090a4:	bf00      	nop
    return;
 80090a6:	e173      	b.n	8009390 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	f040 814f 	bne.w	8009350 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80090b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090b6:	f003 0310 	and.w	r3, r3, #16
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	f000 8148 	beq.w	8009350 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80090c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090c4:	f003 0310 	and.w	r3, r3, #16
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f000 8141 	beq.w	8009350 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80090ce:	2300      	movs	r3, #0
 80090d0:	60bb      	str	r3, [r7, #8]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	60bb      	str	r3, [r7, #8]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	60bb      	str	r3, [r7, #8]
 80090e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	695b      	ldr	r3, [r3, #20]
 80090ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090ee:	2b40      	cmp	r3, #64	@ 0x40
 80090f0:	f040 80b6 	bne.w	8009260 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009100:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009104:	2b00      	cmp	r3, #0
 8009106:	f000 8145 	beq.w	8009394 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800910e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009112:	429a      	cmp	r2, r3
 8009114:	f080 813e 	bcs.w	8009394 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800911e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009124:	69db      	ldr	r3, [r3, #28]
 8009126:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800912a:	f000 8088 	beq.w	800923e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	330c      	adds	r3, #12
 8009134:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009138:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800913c:	e853 3f00 	ldrex	r3, [r3]
 8009140:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009144:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009148:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800914c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	330c      	adds	r3, #12
 8009156:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800915a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800915e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009162:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009166:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800916a:	e841 2300 	strex	r3, r2, [r1]
 800916e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009172:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1d9      	bne.n	800912e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	3314      	adds	r3, #20
 8009180:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009182:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009184:	e853 3f00 	ldrex	r3, [r3]
 8009188:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800918a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800918c:	f023 0301 	bic.w	r3, r3, #1
 8009190:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	3314      	adds	r3, #20
 800919a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800919e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80091a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80091a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80091aa:	e841 2300 	strex	r3, r2, [r1]
 80091ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80091b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1e1      	bne.n	800917a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	3314      	adds	r3, #20
 80091bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80091c0:	e853 3f00 	ldrex	r3, [r3]
 80091c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80091c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	3314      	adds	r3, #20
 80091d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80091da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80091dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80091e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80091e2:	e841 2300 	strex	r3, r2, [r1]
 80091e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80091e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1e3      	bne.n	80091b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2220      	movs	r2, #32
 80091f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	330c      	adds	r3, #12
 8009202:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009204:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009206:	e853 3f00 	ldrex	r3, [r3]
 800920a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800920c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800920e:	f023 0310 	bic.w	r3, r3, #16
 8009212:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	330c      	adds	r3, #12
 800921c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009220:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009222:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009224:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009226:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009228:	e841 2300 	strex	r3, r2, [r1]
 800922c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800922e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1e3      	bne.n	80091fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009238:	4618      	mov	r0, r3
 800923a:	f7fd f8df 	bl	80063fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2202      	movs	r2, #2
 8009242:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800924c:	b29b      	uxth	r3, r3
 800924e:	1ad3      	subs	r3, r2, r3
 8009250:	b29b      	uxth	r3, r3
 8009252:	4619      	mov	r1, r3
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f7fc ff37 	bl	80060c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800925a:	e09b      	b.n	8009394 <HAL_UART_IRQHandler+0x518>
 800925c:	080095c9 	.word	0x080095c9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009268:	b29b      	uxth	r3, r3
 800926a:	1ad3      	subs	r3, r2, r3
 800926c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009274:	b29b      	uxth	r3, r3
 8009276:	2b00      	cmp	r3, #0
 8009278:	f000 808e 	beq.w	8009398 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800927c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009280:	2b00      	cmp	r3, #0
 8009282:	f000 8089 	beq.w	8009398 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	330c      	adds	r3, #12
 800928c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009290:	e853 3f00 	ldrex	r3, [r3]
 8009294:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009298:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800929c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	330c      	adds	r3, #12
 80092a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80092aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80092ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80092b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092b2:	e841 2300 	strex	r3, r2, [r1]
 80092b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80092b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1e3      	bne.n	8009286 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	3314      	adds	r3, #20
 80092c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c8:	e853 3f00 	ldrex	r3, [r3]
 80092cc:	623b      	str	r3, [r7, #32]
   return(result);
 80092ce:	6a3b      	ldr	r3, [r7, #32]
 80092d0:	f023 0301 	bic.w	r3, r3, #1
 80092d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	3314      	adds	r3, #20
 80092de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80092e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80092e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092ea:	e841 2300 	strex	r3, r2, [r1]
 80092ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80092f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1e3      	bne.n	80092be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2220      	movs	r2, #32
 80092fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	330c      	adds	r3, #12
 800930a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	e853 3f00 	ldrex	r3, [r3]
 8009312:	60fb      	str	r3, [r7, #12]
   return(result);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f023 0310 	bic.w	r3, r3, #16
 800931a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	330c      	adds	r3, #12
 8009324:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009328:	61fa      	str	r2, [r7, #28]
 800932a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932c:	69b9      	ldr	r1, [r7, #24]
 800932e:	69fa      	ldr	r2, [r7, #28]
 8009330:	e841 2300 	strex	r3, r2, [r1]
 8009334:	617b      	str	r3, [r7, #20]
   return(result);
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1e3      	bne.n	8009304 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2202      	movs	r2, #2
 8009340:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009342:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009346:	4619      	mov	r1, r3
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f7fc febd 	bl	80060c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800934e:	e023      	b.n	8009398 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009358:	2b00      	cmp	r3, #0
 800935a:	d009      	beq.n	8009370 <HAL_UART_IRQHandler+0x4f4>
 800935c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009364:	2b00      	cmp	r3, #0
 8009366:	d003      	beq.n	8009370 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 f941 	bl	80095f0 <UART_Transmit_IT>
    return;
 800936e:	e014      	b.n	800939a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009378:	2b00      	cmp	r3, #0
 800937a:	d00e      	beq.n	800939a <HAL_UART_IRQHandler+0x51e>
 800937c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009384:	2b00      	cmp	r3, #0
 8009386:	d008      	beq.n	800939a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 f981 	bl	8009690 <UART_EndTransmit_IT>
    return;
 800938e:	e004      	b.n	800939a <HAL_UART_IRQHandler+0x51e>
    return;
 8009390:	bf00      	nop
 8009392:	e002      	b.n	800939a <HAL_UART_IRQHandler+0x51e>
      return;
 8009394:	bf00      	nop
 8009396:	e000      	b.n	800939a <HAL_UART_IRQHandler+0x51e>
      return;
 8009398:	bf00      	nop
  }
}
 800939a:	37e8      	adds	r7, #232	@ 0xe8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80093a8:	bf00      	nop
 80093aa:	370c      	adds	r7, #12
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80093bc:	bf00      	nop
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b083      	sub	sp, #12
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80093d0:	bf00      	nop
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b086      	sub	sp, #24
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	603b      	str	r3, [r7, #0]
 80093e8:	4613      	mov	r3, r2
 80093ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093ec:	e03b      	b.n	8009466 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093ee:	6a3b      	ldr	r3, [r7, #32]
 80093f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80093f4:	d037      	beq.n	8009466 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093f6:	f7fc feef 	bl	80061d8 <HAL_GetTick>
 80093fa:	4602      	mov	r2, r0
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	6a3a      	ldr	r2, [r7, #32]
 8009402:	429a      	cmp	r2, r3
 8009404:	d302      	bcc.n	800940c <UART_WaitOnFlagUntilTimeout+0x30>
 8009406:	6a3b      	ldr	r3, [r7, #32]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d101      	bne.n	8009410 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800940c:	2303      	movs	r3, #3
 800940e:	e03a      	b.n	8009486 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	f003 0304 	and.w	r3, r3, #4
 800941a:	2b00      	cmp	r3, #0
 800941c:	d023      	beq.n	8009466 <UART_WaitOnFlagUntilTimeout+0x8a>
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	2b80      	cmp	r3, #128	@ 0x80
 8009422:	d020      	beq.n	8009466 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	2b40      	cmp	r3, #64	@ 0x40
 8009428:	d01d      	beq.n	8009466 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 0308 	and.w	r3, r3, #8
 8009434:	2b08      	cmp	r3, #8
 8009436:	d116      	bne.n	8009466 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009438:	2300      	movs	r3, #0
 800943a:	617b      	str	r3, [r7, #20]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	617b      	str	r3, [r7, #20]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	617b      	str	r3, [r7, #20]
 800944c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f000 f857 	bl	8009502 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2208      	movs	r2, #8
 8009458:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e00f      	b.n	8009486 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	4013      	ands	r3, r2
 8009470:	68ba      	ldr	r2, [r7, #8]
 8009472:	429a      	cmp	r2, r3
 8009474:	bf0c      	ite	eq
 8009476:	2301      	moveq	r3, #1
 8009478:	2300      	movne	r3, #0
 800947a:	b2db      	uxtb	r3, r3
 800947c:	461a      	mov	r2, r3
 800947e:	79fb      	ldrb	r3, [r7, #7]
 8009480:	429a      	cmp	r2, r3
 8009482:	d0b4      	beq.n	80093ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3718      	adds	r7, #24
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800948e:	b480      	push	{r7}
 8009490:	b085      	sub	sp, #20
 8009492:	af00      	add	r7, sp, #0
 8009494:	60f8      	str	r0, [r7, #12]
 8009496:	60b9      	str	r1, [r7, #8]
 8009498:	4613      	mov	r3, r2
 800949a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	68ba      	ldr	r2, [r7, #8]
 80094a0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	88fa      	ldrh	r2, [r7, #6]
 80094a6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	88fa      	ldrh	r2, [r7, #6]
 80094ac:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2200      	movs	r2, #0
 80094b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2222      	movs	r2, #34	@ 0x22
 80094b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	691b      	ldr	r3, [r3, #16]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d007      	beq.n	80094d4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	68da      	ldr	r2, [r3, #12]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80094d2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	695a      	ldr	r2, [r3, #20]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f042 0201 	orr.w	r2, r2, #1
 80094e2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68da      	ldr	r2, [r3, #12]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f042 0220 	orr.w	r2, r2, #32
 80094f2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3714      	adds	r7, #20
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr

08009502 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009502:	b480      	push	{r7}
 8009504:	b095      	sub	sp, #84	@ 0x54
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	330c      	adds	r3, #12
 8009510:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009514:	e853 3f00 	ldrex	r3, [r3]
 8009518:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800951a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800951c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009520:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	330c      	adds	r3, #12
 8009528:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800952a:	643a      	str	r2, [r7, #64]	@ 0x40
 800952c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800952e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009530:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009532:	e841 2300 	strex	r3, r2, [r1]
 8009536:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1e5      	bne.n	800950a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	3314      	adds	r3, #20
 8009544:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009546:	6a3b      	ldr	r3, [r7, #32]
 8009548:	e853 3f00 	ldrex	r3, [r3]
 800954c:	61fb      	str	r3, [r7, #28]
   return(result);
 800954e:	69fb      	ldr	r3, [r7, #28]
 8009550:	f023 0301 	bic.w	r3, r3, #1
 8009554:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	3314      	adds	r3, #20
 800955c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800955e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009560:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009562:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009564:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009566:	e841 2300 	strex	r3, r2, [r1]
 800956a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800956c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800956e:	2b00      	cmp	r3, #0
 8009570:	d1e5      	bne.n	800953e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009576:	2b01      	cmp	r3, #1
 8009578:	d119      	bne.n	80095ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	330c      	adds	r3, #12
 8009580:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	e853 3f00 	ldrex	r3, [r3]
 8009588:	60bb      	str	r3, [r7, #8]
   return(result);
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	f023 0310 	bic.w	r3, r3, #16
 8009590:	647b      	str	r3, [r7, #68]	@ 0x44
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	330c      	adds	r3, #12
 8009598:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800959a:	61ba      	str	r2, [r7, #24]
 800959c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959e:	6979      	ldr	r1, [r7, #20]
 80095a0:	69ba      	ldr	r2, [r7, #24]
 80095a2:	e841 2300 	strex	r3, r2, [r1]
 80095a6:	613b      	str	r3, [r7, #16]
   return(result);
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d1e5      	bne.n	800957a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2220      	movs	r2, #32
 80095b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80095bc:	bf00      	nop
 80095be:	3754      	adds	r7, #84	@ 0x54
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2200      	movs	r2, #0
 80095da:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2200      	movs	r2, #0
 80095e0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80095e2:	68f8      	ldr	r0, [r7, #12]
 80095e4:	f7ff fef0 	bl	80093c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095e8:	bf00      	nop
 80095ea:	3710      	adds	r7, #16
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b085      	sub	sp, #20
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	2b21      	cmp	r3, #33	@ 0x21
 8009602:	d13e      	bne.n	8009682 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800960c:	d114      	bne.n	8009638 <UART_Transmit_IT+0x48>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d110      	bne.n	8009638 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6a1b      	ldr	r3, [r3, #32]
 800961a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	881b      	ldrh	r3, [r3, #0]
 8009620:	461a      	mov	r2, r3
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800962a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6a1b      	ldr	r3, [r3, #32]
 8009630:	1c9a      	adds	r2, r3, #2
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	621a      	str	r2, [r3, #32]
 8009636:	e008      	b.n	800964a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6a1b      	ldr	r3, [r3, #32]
 800963c:	1c59      	adds	r1, r3, #1
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	6211      	str	r1, [r2, #32]
 8009642:	781a      	ldrb	r2, [r3, #0]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800964e:	b29b      	uxth	r3, r3
 8009650:	3b01      	subs	r3, #1
 8009652:	b29b      	uxth	r3, r3
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	4619      	mov	r1, r3
 8009658:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800965a:	2b00      	cmp	r3, #0
 800965c:	d10f      	bne.n	800967e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	68da      	ldr	r2, [r3, #12]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800966c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68da      	ldr	r2, [r3, #12]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800967c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800967e:	2300      	movs	r3, #0
 8009680:	e000      	b.n	8009684 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009682:	2302      	movs	r3, #2
  }
}
 8009684:	4618      	mov	r0, r3
 8009686:	3714      	adds	r7, #20
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	68da      	ldr	r2, [r3, #12]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80096a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2220      	movs	r2, #32
 80096ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f7ff fe75 	bl	80093a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b08c      	sub	sp, #48	@ 0x30
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	2b22      	cmp	r3, #34	@ 0x22
 80096d2:	f040 80ae 	bne.w	8009832 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096de:	d117      	bne.n	8009710 <UART_Receive_IT+0x50>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d113      	bne.n	8009710 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80096e8:	2300      	movs	r3, #0
 80096ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096fe:	b29a      	uxth	r2, r3
 8009700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009702:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009708:	1c9a      	adds	r2, r3, #2
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	629a      	str	r2, [r3, #40]	@ 0x28
 800970e:	e026      	b.n	800975e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009714:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009716:	2300      	movs	r3, #0
 8009718:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009722:	d007      	beq.n	8009734 <UART_Receive_IT+0x74>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d10a      	bne.n	8009742 <UART_Receive_IT+0x82>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	691b      	ldr	r3, [r3, #16]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d106      	bne.n	8009742 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	b2da      	uxtb	r2, r3
 800973c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800973e:	701a      	strb	r2, [r3, #0]
 8009740:	e008      	b.n	8009754 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	b2db      	uxtb	r3, r3
 800974a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800974e:	b2da      	uxtb	r2, r3
 8009750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009752:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009758:	1c5a      	adds	r2, r3, #1
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009762:	b29b      	uxth	r3, r3
 8009764:	3b01      	subs	r3, #1
 8009766:	b29b      	uxth	r3, r3
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	4619      	mov	r1, r3
 800976c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800976e:	2b00      	cmp	r3, #0
 8009770:	d15d      	bne.n	800982e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	68da      	ldr	r2, [r3, #12]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f022 0220 	bic.w	r2, r2, #32
 8009780:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	68da      	ldr	r2, [r3, #12]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009790:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	695a      	ldr	r2, [r3, #20]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f022 0201 	bic.w	r2, r2, #1
 80097a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2220      	movs	r2, #32
 80097a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d135      	bne.n	8009824 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	330c      	adds	r3, #12
 80097c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	e853 3f00 	ldrex	r3, [r3]
 80097cc:	613b      	str	r3, [r7, #16]
   return(result);
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	f023 0310 	bic.w	r3, r3, #16
 80097d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	330c      	adds	r3, #12
 80097dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097de:	623a      	str	r2, [r7, #32]
 80097e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e2:	69f9      	ldr	r1, [r7, #28]
 80097e4:	6a3a      	ldr	r2, [r7, #32]
 80097e6:	e841 2300 	strex	r3, r2, [r1]
 80097ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d1e5      	bne.n	80097be <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f003 0310 	and.w	r3, r3, #16
 80097fc:	2b10      	cmp	r3, #16
 80097fe:	d10a      	bne.n	8009816 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009800:	2300      	movs	r3, #0
 8009802:	60fb      	str	r3, [r7, #12]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	60fb      	str	r3, [r7, #12]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	60fb      	str	r3, [r7, #12]
 8009814:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800981a:	4619      	mov	r1, r3
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f7fc fc53 	bl	80060c8 <HAL_UARTEx_RxEventCallback>
 8009822:	e002      	b.n	800982a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f7ff fdc5 	bl	80093b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800982a:	2300      	movs	r3, #0
 800982c:	e002      	b.n	8009834 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800982e:	2300      	movs	r3, #0
 8009830:	e000      	b.n	8009834 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009832:	2302      	movs	r3, #2
  }
}
 8009834:	4618      	mov	r0, r3
 8009836:	3730      	adds	r7, #48	@ 0x30
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800983c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009840:	b0c0      	sub	sp, #256	@ 0x100
 8009842:	af00      	add	r7, sp, #0
 8009844:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	691b      	ldr	r3, [r3, #16]
 8009850:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009858:	68d9      	ldr	r1, [r3, #12]
 800985a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800985e:	681a      	ldr	r2, [r3, #0]
 8009860:	ea40 0301 	orr.w	r3, r0, r1
 8009864:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800986a:	689a      	ldr	r2, [r3, #8]
 800986c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009870:	691b      	ldr	r3, [r3, #16]
 8009872:	431a      	orrs	r2, r3
 8009874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009878:	695b      	ldr	r3, [r3, #20]
 800987a:	431a      	orrs	r2, r3
 800987c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009880:	69db      	ldr	r3, [r3, #28]
 8009882:	4313      	orrs	r3, r2
 8009884:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009894:	f021 010c 	bic.w	r1, r1, #12
 8009898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80098a2:	430b      	orrs	r3, r1
 80098a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80098a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	695b      	ldr	r3, [r3, #20]
 80098ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80098b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098b6:	6999      	ldr	r1, [r3, #24]
 80098b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	ea40 0301 	orr.w	r3, r0, r1
 80098c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80098c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	4b8f      	ldr	r3, [pc, #572]	@ (8009b08 <UART_SetConfig+0x2cc>)
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d005      	beq.n	80098dc <UART_SetConfig+0xa0>
 80098d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	4b8d      	ldr	r3, [pc, #564]	@ (8009b0c <UART_SetConfig+0x2d0>)
 80098d8:	429a      	cmp	r2, r3
 80098da:	d104      	bne.n	80098e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80098dc:	f7fe fe16 	bl	800850c <HAL_RCC_GetPCLK2Freq>
 80098e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80098e4:	e003      	b.n	80098ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80098e6:	f7fe fdfd 	bl	80084e4 <HAL_RCC_GetPCLK1Freq>
 80098ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098f2:	69db      	ldr	r3, [r3, #28]
 80098f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098f8:	f040 810c 	bne.w	8009b14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80098fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009900:	2200      	movs	r2, #0
 8009902:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009906:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800990a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800990e:	4622      	mov	r2, r4
 8009910:	462b      	mov	r3, r5
 8009912:	1891      	adds	r1, r2, r2
 8009914:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009916:	415b      	adcs	r3, r3
 8009918:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800991a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800991e:	4621      	mov	r1, r4
 8009920:	eb12 0801 	adds.w	r8, r2, r1
 8009924:	4629      	mov	r1, r5
 8009926:	eb43 0901 	adc.w	r9, r3, r1
 800992a:	f04f 0200 	mov.w	r2, #0
 800992e:	f04f 0300 	mov.w	r3, #0
 8009932:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009936:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800993a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800993e:	4690      	mov	r8, r2
 8009940:	4699      	mov	r9, r3
 8009942:	4623      	mov	r3, r4
 8009944:	eb18 0303 	adds.w	r3, r8, r3
 8009948:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800994c:	462b      	mov	r3, r5
 800994e:	eb49 0303 	adc.w	r3, r9, r3
 8009952:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009962:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009966:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800996a:	460b      	mov	r3, r1
 800996c:	18db      	adds	r3, r3, r3
 800996e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009970:	4613      	mov	r3, r2
 8009972:	eb42 0303 	adc.w	r3, r2, r3
 8009976:	657b      	str	r3, [r7, #84]	@ 0x54
 8009978:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800997c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009980:	f7f7 f992 	bl	8000ca8 <__aeabi_uldivmod>
 8009984:	4602      	mov	r2, r0
 8009986:	460b      	mov	r3, r1
 8009988:	4b61      	ldr	r3, [pc, #388]	@ (8009b10 <UART_SetConfig+0x2d4>)
 800998a:	fba3 2302 	umull	r2, r3, r3, r2
 800998e:	095b      	lsrs	r3, r3, #5
 8009990:	011c      	lsls	r4, r3, #4
 8009992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009996:	2200      	movs	r2, #0
 8009998:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800999c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80099a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80099a4:	4642      	mov	r2, r8
 80099a6:	464b      	mov	r3, r9
 80099a8:	1891      	adds	r1, r2, r2
 80099aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80099ac:	415b      	adcs	r3, r3
 80099ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80099b4:	4641      	mov	r1, r8
 80099b6:	eb12 0a01 	adds.w	sl, r2, r1
 80099ba:	4649      	mov	r1, r9
 80099bc:	eb43 0b01 	adc.w	fp, r3, r1
 80099c0:	f04f 0200 	mov.w	r2, #0
 80099c4:	f04f 0300 	mov.w	r3, #0
 80099c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80099cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80099d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80099d4:	4692      	mov	sl, r2
 80099d6:	469b      	mov	fp, r3
 80099d8:	4643      	mov	r3, r8
 80099da:	eb1a 0303 	adds.w	r3, sl, r3
 80099de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80099e2:	464b      	mov	r3, r9
 80099e4:	eb4b 0303 	adc.w	r3, fp, r3
 80099e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80099ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80099f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80099fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009a00:	460b      	mov	r3, r1
 8009a02:	18db      	adds	r3, r3, r3
 8009a04:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a06:	4613      	mov	r3, r2
 8009a08:	eb42 0303 	adc.w	r3, r2, r3
 8009a0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009a12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009a16:	f7f7 f947 	bl	8000ca8 <__aeabi_uldivmod>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	4611      	mov	r1, r2
 8009a20:	4b3b      	ldr	r3, [pc, #236]	@ (8009b10 <UART_SetConfig+0x2d4>)
 8009a22:	fba3 2301 	umull	r2, r3, r3, r1
 8009a26:	095b      	lsrs	r3, r3, #5
 8009a28:	2264      	movs	r2, #100	@ 0x64
 8009a2a:	fb02 f303 	mul.w	r3, r2, r3
 8009a2e:	1acb      	subs	r3, r1, r3
 8009a30:	00db      	lsls	r3, r3, #3
 8009a32:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009a36:	4b36      	ldr	r3, [pc, #216]	@ (8009b10 <UART_SetConfig+0x2d4>)
 8009a38:	fba3 2302 	umull	r2, r3, r3, r2
 8009a3c:	095b      	lsrs	r3, r3, #5
 8009a3e:	005b      	lsls	r3, r3, #1
 8009a40:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009a44:	441c      	add	r4, r3
 8009a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009a50:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009a54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009a58:	4642      	mov	r2, r8
 8009a5a:	464b      	mov	r3, r9
 8009a5c:	1891      	adds	r1, r2, r2
 8009a5e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009a60:	415b      	adcs	r3, r3
 8009a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009a68:	4641      	mov	r1, r8
 8009a6a:	1851      	adds	r1, r2, r1
 8009a6c:	6339      	str	r1, [r7, #48]	@ 0x30
 8009a6e:	4649      	mov	r1, r9
 8009a70:	414b      	adcs	r3, r1
 8009a72:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a74:	f04f 0200 	mov.w	r2, #0
 8009a78:	f04f 0300 	mov.w	r3, #0
 8009a7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009a80:	4659      	mov	r1, fp
 8009a82:	00cb      	lsls	r3, r1, #3
 8009a84:	4651      	mov	r1, sl
 8009a86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a8a:	4651      	mov	r1, sl
 8009a8c:	00ca      	lsls	r2, r1, #3
 8009a8e:	4610      	mov	r0, r2
 8009a90:	4619      	mov	r1, r3
 8009a92:	4603      	mov	r3, r0
 8009a94:	4642      	mov	r2, r8
 8009a96:	189b      	adds	r3, r3, r2
 8009a98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009a9c:	464b      	mov	r3, r9
 8009a9e:	460a      	mov	r2, r1
 8009aa0:	eb42 0303 	adc.w	r3, r2, r3
 8009aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009ab4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009ab8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009abc:	460b      	mov	r3, r1
 8009abe:	18db      	adds	r3, r3, r3
 8009ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009ac2:	4613      	mov	r3, r2
 8009ac4:	eb42 0303 	adc.w	r3, r2, r3
 8009ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009aca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009ace:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009ad2:	f7f7 f8e9 	bl	8000ca8 <__aeabi_uldivmod>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	460b      	mov	r3, r1
 8009ada:	4b0d      	ldr	r3, [pc, #52]	@ (8009b10 <UART_SetConfig+0x2d4>)
 8009adc:	fba3 1302 	umull	r1, r3, r3, r2
 8009ae0:	095b      	lsrs	r3, r3, #5
 8009ae2:	2164      	movs	r1, #100	@ 0x64
 8009ae4:	fb01 f303 	mul.w	r3, r1, r3
 8009ae8:	1ad3      	subs	r3, r2, r3
 8009aea:	00db      	lsls	r3, r3, #3
 8009aec:	3332      	adds	r3, #50	@ 0x32
 8009aee:	4a08      	ldr	r2, [pc, #32]	@ (8009b10 <UART_SetConfig+0x2d4>)
 8009af0:	fba2 2303 	umull	r2, r3, r2, r3
 8009af4:	095b      	lsrs	r3, r3, #5
 8009af6:	f003 0207 	and.w	r2, r3, #7
 8009afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4422      	add	r2, r4
 8009b02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009b04:	e106      	b.n	8009d14 <UART_SetConfig+0x4d8>
 8009b06:	bf00      	nop
 8009b08:	40011000 	.word	0x40011000
 8009b0c:	40011400 	.word	0x40011400
 8009b10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009b14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009b1e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009b22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009b26:	4642      	mov	r2, r8
 8009b28:	464b      	mov	r3, r9
 8009b2a:	1891      	adds	r1, r2, r2
 8009b2c:	6239      	str	r1, [r7, #32]
 8009b2e:	415b      	adcs	r3, r3
 8009b30:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009b36:	4641      	mov	r1, r8
 8009b38:	1854      	adds	r4, r2, r1
 8009b3a:	4649      	mov	r1, r9
 8009b3c:	eb43 0501 	adc.w	r5, r3, r1
 8009b40:	f04f 0200 	mov.w	r2, #0
 8009b44:	f04f 0300 	mov.w	r3, #0
 8009b48:	00eb      	lsls	r3, r5, #3
 8009b4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009b4e:	00e2      	lsls	r2, r4, #3
 8009b50:	4614      	mov	r4, r2
 8009b52:	461d      	mov	r5, r3
 8009b54:	4643      	mov	r3, r8
 8009b56:	18e3      	adds	r3, r4, r3
 8009b58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009b5c:	464b      	mov	r3, r9
 8009b5e:	eb45 0303 	adc.w	r3, r5, r3
 8009b62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009b72:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009b76:	f04f 0200 	mov.w	r2, #0
 8009b7a:	f04f 0300 	mov.w	r3, #0
 8009b7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009b82:	4629      	mov	r1, r5
 8009b84:	008b      	lsls	r3, r1, #2
 8009b86:	4621      	mov	r1, r4
 8009b88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b8c:	4621      	mov	r1, r4
 8009b8e:	008a      	lsls	r2, r1, #2
 8009b90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009b94:	f7f7 f888 	bl	8000ca8 <__aeabi_uldivmod>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	4b60      	ldr	r3, [pc, #384]	@ (8009d20 <UART_SetConfig+0x4e4>)
 8009b9e:	fba3 2302 	umull	r2, r3, r3, r2
 8009ba2:	095b      	lsrs	r3, r3, #5
 8009ba4:	011c      	lsls	r4, r3, #4
 8009ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009baa:	2200      	movs	r2, #0
 8009bac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009bb0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009bb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009bb8:	4642      	mov	r2, r8
 8009bba:	464b      	mov	r3, r9
 8009bbc:	1891      	adds	r1, r2, r2
 8009bbe:	61b9      	str	r1, [r7, #24]
 8009bc0:	415b      	adcs	r3, r3
 8009bc2:	61fb      	str	r3, [r7, #28]
 8009bc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009bc8:	4641      	mov	r1, r8
 8009bca:	1851      	adds	r1, r2, r1
 8009bcc:	6139      	str	r1, [r7, #16]
 8009bce:	4649      	mov	r1, r9
 8009bd0:	414b      	adcs	r3, r1
 8009bd2:	617b      	str	r3, [r7, #20]
 8009bd4:	f04f 0200 	mov.w	r2, #0
 8009bd8:	f04f 0300 	mov.w	r3, #0
 8009bdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009be0:	4659      	mov	r1, fp
 8009be2:	00cb      	lsls	r3, r1, #3
 8009be4:	4651      	mov	r1, sl
 8009be6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009bea:	4651      	mov	r1, sl
 8009bec:	00ca      	lsls	r2, r1, #3
 8009bee:	4610      	mov	r0, r2
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	4642      	mov	r2, r8
 8009bf6:	189b      	adds	r3, r3, r2
 8009bf8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009bfc:	464b      	mov	r3, r9
 8009bfe:	460a      	mov	r2, r1
 8009c00:	eb42 0303 	adc.w	r3, r2, r3
 8009c04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009c12:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009c14:	f04f 0200 	mov.w	r2, #0
 8009c18:	f04f 0300 	mov.w	r3, #0
 8009c1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009c20:	4649      	mov	r1, r9
 8009c22:	008b      	lsls	r3, r1, #2
 8009c24:	4641      	mov	r1, r8
 8009c26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c2a:	4641      	mov	r1, r8
 8009c2c:	008a      	lsls	r2, r1, #2
 8009c2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009c32:	f7f7 f839 	bl	8000ca8 <__aeabi_uldivmod>
 8009c36:	4602      	mov	r2, r0
 8009c38:	460b      	mov	r3, r1
 8009c3a:	4611      	mov	r1, r2
 8009c3c:	4b38      	ldr	r3, [pc, #224]	@ (8009d20 <UART_SetConfig+0x4e4>)
 8009c3e:	fba3 2301 	umull	r2, r3, r3, r1
 8009c42:	095b      	lsrs	r3, r3, #5
 8009c44:	2264      	movs	r2, #100	@ 0x64
 8009c46:	fb02 f303 	mul.w	r3, r2, r3
 8009c4a:	1acb      	subs	r3, r1, r3
 8009c4c:	011b      	lsls	r3, r3, #4
 8009c4e:	3332      	adds	r3, #50	@ 0x32
 8009c50:	4a33      	ldr	r2, [pc, #204]	@ (8009d20 <UART_SetConfig+0x4e4>)
 8009c52:	fba2 2303 	umull	r2, r3, r2, r3
 8009c56:	095b      	lsrs	r3, r3, #5
 8009c58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009c5c:	441c      	add	r4, r3
 8009c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c62:	2200      	movs	r2, #0
 8009c64:	673b      	str	r3, [r7, #112]	@ 0x70
 8009c66:	677a      	str	r2, [r7, #116]	@ 0x74
 8009c68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009c6c:	4642      	mov	r2, r8
 8009c6e:	464b      	mov	r3, r9
 8009c70:	1891      	adds	r1, r2, r2
 8009c72:	60b9      	str	r1, [r7, #8]
 8009c74:	415b      	adcs	r3, r3
 8009c76:	60fb      	str	r3, [r7, #12]
 8009c78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009c7c:	4641      	mov	r1, r8
 8009c7e:	1851      	adds	r1, r2, r1
 8009c80:	6039      	str	r1, [r7, #0]
 8009c82:	4649      	mov	r1, r9
 8009c84:	414b      	adcs	r3, r1
 8009c86:	607b      	str	r3, [r7, #4]
 8009c88:	f04f 0200 	mov.w	r2, #0
 8009c8c:	f04f 0300 	mov.w	r3, #0
 8009c90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009c94:	4659      	mov	r1, fp
 8009c96:	00cb      	lsls	r3, r1, #3
 8009c98:	4651      	mov	r1, sl
 8009c9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c9e:	4651      	mov	r1, sl
 8009ca0:	00ca      	lsls	r2, r1, #3
 8009ca2:	4610      	mov	r0, r2
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	4642      	mov	r2, r8
 8009caa:	189b      	adds	r3, r3, r2
 8009cac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009cae:	464b      	mov	r3, r9
 8009cb0:	460a      	mov	r2, r1
 8009cb2:	eb42 0303 	adc.w	r3, r2, r3
 8009cb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8009cc2:	667a      	str	r2, [r7, #100]	@ 0x64
 8009cc4:	f04f 0200 	mov.w	r2, #0
 8009cc8:	f04f 0300 	mov.w	r3, #0
 8009ccc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009cd0:	4649      	mov	r1, r9
 8009cd2:	008b      	lsls	r3, r1, #2
 8009cd4:	4641      	mov	r1, r8
 8009cd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009cda:	4641      	mov	r1, r8
 8009cdc:	008a      	lsls	r2, r1, #2
 8009cde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009ce2:	f7f6 ffe1 	bl	8000ca8 <__aeabi_uldivmod>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	460b      	mov	r3, r1
 8009cea:	4b0d      	ldr	r3, [pc, #52]	@ (8009d20 <UART_SetConfig+0x4e4>)
 8009cec:	fba3 1302 	umull	r1, r3, r3, r2
 8009cf0:	095b      	lsrs	r3, r3, #5
 8009cf2:	2164      	movs	r1, #100	@ 0x64
 8009cf4:	fb01 f303 	mul.w	r3, r1, r3
 8009cf8:	1ad3      	subs	r3, r2, r3
 8009cfa:	011b      	lsls	r3, r3, #4
 8009cfc:	3332      	adds	r3, #50	@ 0x32
 8009cfe:	4a08      	ldr	r2, [pc, #32]	@ (8009d20 <UART_SetConfig+0x4e4>)
 8009d00:	fba2 2303 	umull	r2, r3, r2, r3
 8009d04:	095b      	lsrs	r3, r3, #5
 8009d06:	f003 020f 	and.w	r2, r3, #15
 8009d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4422      	add	r2, r4
 8009d12:	609a      	str	r2, [r3, #8]
}
 8009d14:	bf00      	nop
 8009d16:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d20:	51eb851f 	.word	0x51eb851f

08009d24 <__NVIC_SetPriority>:
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	6039      	str	r1, [r7, #0]
 8009d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	db0a      	blt.n	8009d4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	b2da      	uxtb	r2, r3
 8009d3c:	490c      	ldr	r1, [pc, #48]	@ (8009d70 <__NVIC_SetPriority+0x4c>)
 8009d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d42:	0112      	lsls	r2, r2, #4
 8009d44:	b2d2      	uxtb	r2, r2
 8009d46:	440b      	add	r3, r1
 8009d48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009d4c:	e00a      	b.n	8009d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	b2da      	uxtb	r2, r3
 8009d52:	4908      	ldr	r1, [pc, #32]	@ (8009d74 <__NVIC_SetPriority+0x50>)
 8009d54:	79fb      	ldrb	r3, [r7, #7]
 8009d56:	f003 030f 	and.w	r3, r3, #15
 8009d5a:	3b04      	subs	r3, #4
 8009d5c:	0112      	lsls	r2, r2, #4
 8009d5e:	b2d2      	uxtb	r2, r2
 8009d60:	440b      	add	r3, r1
 8009d62:	761a      	strb	r2, [r3, #24]
}
 8009d64:	bf00      	nop
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr
 8009d70:	e000e100 	.word	0xe000e100
 8009d74:	e000ed00 	.word	0xe000ed00

08009d78 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009d7c:	4b05      	ldr	r3, [pc, #20]	@ (8009d94 <SysTick_Handler+0x1c>)
 8009d7e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009d80:	f001 feaa 	bl	800bad8 <xTaskGetSchedulerState>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d001      	beq.n	8009d8e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009d8a:	f002 fdfd 	bl	800c988 <xPortSysTickHandler>
  }
}
 8009d8e:	bf00      	nop
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	e000e010 	.word	0xe000e010

08009d98 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009d9c:	2100      	movs	r1, #0
 8009d9e:	f06f 0004 	mvn.w	r0, #4
 8009da2:	f7ff ffbf 	bl	8009d24 <__NVIC_SetPriority>
#endif
}
 8009da6:	bf00      	nop
 8009da8:	bd80      	pop	{r7, pc}
	...

08009dac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009db2:	f3ef 8305 	mrs	r3, IPSR
 8009db6:	603b      	str	r3, [r7, #0]
  return(result);
 8009db8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d003      	beq.n	8009dc6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009dbe:	f06f 0305 	mvn.w	r3, #5
 8009dc2:	607b      	str	r3, [r7, #4]
 8009dc4:	e00c      	b.n	8009de0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8009df0 <osKernelInitialize+0x44>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d105      	bne.n	8009dda <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009dce:	4b08      	ldr	r3, [pc, #32]	@ (8009df0 <osKernelInitialize+0x44>)
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	607b      	str	r3, [r7, #4]
 8009dd8:	e002      	b.n	8009de0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009dda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009dde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009de0:	687b      	ldr	r3, [r7, #4]
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	370c      	adds	r7, #12
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop
 8009df0:	20000598 	.word	0x20000598

08009df4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009dfa:	f3ef 8305 	mrs	r3, IPSR
 8009dfe:	603b      	str	r3, [r7, #0]
  return(result);
 8009e00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d003      	beq.n	8009e0e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009e06:	f06f 0305 	mvn.w	r3, #5
 8009e0a:	607b      	str	r3, [r7, #4]
 8009e0c:	e010      	b.n	8009e30 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8009e3c <osKernelStart+0x48>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d109      	bne.n	8009e2a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009e16:	f7ff ffbf 	bl	8009d98 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009e1a:	4b08      	ldr	r3, [pc, #32]	@ (8009e3c <osKernelStart+0x48>)
 8009e1c:	2202      	movs	r2, #2
 8009e1e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009e20:	f001 f9f6 	bl	800b210 <vTaskStartScheduler>
      stat = osOK;
 8009e24:	2300      	movs	r3, #0
 8009e26:	607b      	str	r3, [r7, #4]
 8009e28:	e002      	b.n	8009e30 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009e2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009e2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009e30:	687b      	ldr	r3, [r7, #4]
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3708      	adds	r7, #8
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	20000598 	.word	0x20000598

08009e40 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b08e      	sub	sp, #56	@ 0x38
 8009e44:	af04      	add	r7, sp, #16
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e50:	f3ef 8305 	mrs	r3, IPSR
 8009e54:	617b      	str	r3, [r7, #20]
  return(result);
 8009e56:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d17e      	bne.n	8009f5a <osThreadNew+0x11a>
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d07b      	beq.n	8009f5a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009e62:	2380      	movs	r3, #128	@ 0x80
 8009e64:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009e66:	2318      	movs	r3, #24
 8009e68:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009e6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009e72:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d045      	beq.n	8009f06 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d002      	beq.n	8009e88 <osThreadNew+0x48>
        name = attr->name;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	699b      	ldr	r3, [r3, #24]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d002      	beq.n	8009e96 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	699b      	ldr	r3, [r3, #24]
 8009e94:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d008      	beq.n	8009eae <osThreadNew+0x6e>
 8009e9c:	69fb      	ldr	r3, [r7, #28]
 8009e9e:	2b38      	cmp	r3, #56	@ 0x38
 8009ea0:	d805      	bhi.n	8009eae <osThreadNew+0x6e>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	f003 0301 	and.w	r3, r3, #1
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d001      	beq.n	8009eb2 <osThreadNew+0x72>
        return (NULL);
 8009eae:	2300      	movs	r3, #0
 8009eb0:	e054      	b.n	8009f5c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	695b      	ldr	r3, [r3, #20]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d003      	beq.n	8009ec2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	695b      	ldr	r3, [r3, #20]
 8009ebe:	089b      	lsrs	r3, r3, #2
 8009ec0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d00e      	beq.n	8009ee8 <osThreadNew+0xa8>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	2ba7      	cmp	r3, #167	@ 0xa7
 8009ed0:	d90a      	bls.n	8009ee8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d006      	beq.n	8009ee8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	695b      	ldr	r3, [r3, #20]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d002      	beq.n	8009ee8 <osThreadNew+0xa8>
        mem = 1;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	61bb      	str	r3, [r7, #24]
 8009ee6:	e010      	b.n	8009f0a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d10c      	bne.n	8009f0a <osThreadNew+0xca>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d108      	bne.n	8009f0a <osThreadNew+0xca>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	691b      	ldr	r3, [r3, #16]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d104      	bne.n	8009f0a <osThreadNew+0xca>
          mem = 0;
 8009f00:	2300      	movs	r3, #0
 8009f02:	61bb      	str	r3, [r7, #24]
 8009f04:	e001      	b.n	8009f0a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009f06:	2300      	movs	r3, #0
 8009f08:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009f0a:	69bb      	ldr	r3, [r7, #24]
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d110      	bne.n	8009f32 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f18:	9202      	str	r2, [sp, #8]
 8009f1a:	9301      	str	r3, [sp, #4]
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	9300      	str	r3, [sp, #0]
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	6a3a      	ldr	r2, [r7, #32]
 8009f24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009f26:	68f8      	ldr	r0, [r7, #12]
 8009f28:	f000 ff7e 	bl	800ae28 <xTaskCreateStatic>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	613b      	str	r3, [r7, #16]
 8009f30:	e013      	b.n	8009f5a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d110      	bne.n	8009f5a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009f38:	6a3b      	ldr	r3, [r7, #32]
 8009f3a:	b29a      	uxth	r2, r3
 8009f3c:	f107 0310 	add.w	r3, r7, #16
 8009f40:	9301      	str	r3, [sp, #4]
 8009f42:	69fb      	ldr	r3, [r7, #28]
 8009f44:	9300      	str	r3, [sp, #0]
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	f000 ffcc 	bl	800aee8 <xTaskCreate>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d001      	beq.n	8009f5a <osThreadNew+0x11a>
            hTask = NULL;
 8009f56:	2300      	movs	r3, #0
 8009f58:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009f5a:	693b      	ldr	r3, [r7, #16]
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3728      	adds	r7, #40	@ 0x28
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f6c:	f3ef 8305 	mrs	r3, IPSR
 8009f70:	60bb      	str	r3, [r7, #8]
  return(result);
 8009f72:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d003      	beq.n	8009f80 <osDelay+0x1c>
    stat = osErrorISR;
 8009f78:	f06f 0305 	mvn.w	r3, #5
 8009f7c:	60fb      	str	r3, [r7, #12]
 8009f7e:	e007      	b.n	8009f90 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009f80:	2300      	movs	r3, #0
 8009f82:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d002      	beq.n	8009f90 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f001 f90a 	bl	800b1a4 <vTaskDelay>
    }
  }

  return (stat);
 8009f90:	68fb      	ldr	r3, [r7, #12]
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
	...

08009f9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009f9c:	b480      	push	{r7}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	4a07      	ldr	r2, [pc, #28]	@ (8009fc8 <vApplicationGetIdleTaskMemory+0x2c>)
 8009fac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	4a06      	ldr	r2, [pc, #24]	@ (8009fcc <vApplicationGetIdleTaskMemory+0x30>)
 8009fb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2280      	movs	r2, #128	@ 0x80
 8009fb8:	601a      	str	r2, [r3, #0]
}
 8009fba:	bf00      	nop
 8009fbc:	3714      	adds	r7, #20
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr
 8009fc6:	bf00      	nop
 8009fc8:	2000059c 	.word	0x2000059c
 8009fcc:	20000644 	.word	0x20000644

08009fd0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009fd0:	b480      	push	{r7}
 8009fd2:	b085      	sub	sp, #20
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	4a07      	ldr	r2, [pc, #28]	@ (8009ffc <vApplicationGetTimerTaskMemory+0x2c>)
 8009fe0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	4a06      	ldr	r2, [pc, #24]	@ (800a000 <vApplicationGetTimerTaskMemory+0x30>)
 8009fe6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009fee:	601a      	str	r2, [r3, #0]
}
 8009ff0:	bf00      	nop
 8009ff2:	3714      	adds	r7, #20
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr
 8009ffc:	20000844 	.word	0x20000844
 800a000:	200008ec 	.word	0x200008ec

0800a004 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a004:	b480      	push	{r7}
 800a006:	b083      	sub	sp, #12
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f103 0208 	add.w	r2, r3, #8
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a01c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f103 0208 	add.w	r2, r3, #8
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f103 0208 	add.w	r2, r3, #8
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a038:	bf00      	nop
 800a03a:	370c      	adds	r7, #12
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a052:	bf00      	nop
 800a054:	370c      	adds	r7, #12
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr

0800a05e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a05e:	b480      	push	{r7}
 800a060:	b085      	sub	sp, #20
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
 800a066:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	68fa      	ldr	r2, [r7, #12]
 800a072:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	689a      	ldr	r2, [r3, #8]
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	683a      	ldr	r2, [r7, #0]
 800a082:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	683a      	ldr	r2, [r7, #0]
 800a088:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	1c5a      	adds	r2, r3, #1
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	601a      	str	r2, [r3, #0]
}
 800a09a:	bf00      	nop
 800a09c:	3714      	adds	r7, #20
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr

0800a0a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a0a6:	b480      	push	{r7}
 800a0a8:	b085      	sub	sp, #20
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
 800a0ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a0bc:	d103      	bne.n	800a0c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	691b      	ldr	r3, [r3, #16]
 800a0c2:	60fb      	str	r3, [r7, #12]
 800a0c4:	e00c      	b.n	800a0e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	3308      	adds	r3, #8
 800a0ca:	60fb      	str	r3, [r7, #12]
 800a0cc:	e002      	b.n	800a0d4 <vListInsert+0x2e>
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	60fb      	str	r3, [r7, #12]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	68ba      	ldr	r2, [r7, #8]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d2f6      	bcs.n	800a0ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	685a      	ldr	r2, [r3, #4]
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	683a      	ldr	r2, [r7, #0]
 800a0ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	68fa      	ldr	r2, [r7, #12]
 800a0f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	683a      	ldr	r2, [r7, #0]
 800a0fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	1c5a      	adds	r2, r3, #1
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	601a      	str	r2, [r3, #0]
}
 800a10c:	bf00      	nop
 800a10e:	3714      	adds	r7, #20
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a118:	b480      	push	{r7}
 800a11a:	b085      	sub	sp, #20
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	691b      	ldr	r3, [r3, #16]
 800a124:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	6892      	ldr	r2, [r2, #8]
 800a12e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	689b      	ldr	r3, [r3, #8]
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	6852      	ldr	r2, [r2, #4]
 800a138:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	429a      	cmp	r2, r3
 800a142:	d103      	bne.n	800a14c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	689a      	ldr	r2, [r3, #8]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	1e5a      	subs	r2, r3, #1
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
}
 800a160:	4618      	mov	r0, r3
 800a162:	3714      	adds	r7, #20
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr

0800a16c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d10b      	bne.n	800a198 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a184:	f383 8811 	msr	BASEPRI, r3
 800a188:	f3bf 8f6f 	isb	sy
 800a18c:	f3bf 8f4f 	dsb	sy
 800a190:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a192:	bf00      	nop
 800a194:	bf00      	nop
 800a196:	e7fd      	b.n	800a194 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a198:	f002 fb66 	bl	800c868 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1a4:	68f9      	ldr	r1, [r7, #12]
 800a1a6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a1a8:	fb01 f303 	mul.w	r3, r1, r3
 800a1ac:	441a      	add	r2, r3
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	68f9      	ldr	r1, [r7, #12]
 800a1cc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a1ce:	fb01 f303 	mul.w	r3, r1, r3
 800a1d2:	441a      	add	r2, r3
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	22ff      	movs	r2, #255	@ 0xff
 800a1dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	22ff      	movs	r2, #255	@ 0xff
 800a1e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d114      	bne.n	800a218 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	691b      	ldr	r3, [r3, #16]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d01a      	beq.n	800a22c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	3310      	adds	r3, #16
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f001 faa6 	bl	800b74c <xTaskRemoveFromEventList>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d012      	beq.n	800a22c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a206:	4b0d      	ldr	r3, [pc, #52]	@ (800a23c <xQueueGenericReset+0xd0>)
 800a208:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a20c:	601a      	str	r2, [r3, #0]
 800a20e:	f3bf 8f4f 	dsb	sy
 800a212:	f3bf 8f6f 	isb	sy
 800a216:	e009      	b.n	800a22c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	3310      	adds	r3, #16
 800a21c:	4618      	mov	r0, r3
 800a21e:	f7ff fef1 	bl	800a004 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	3324      	adds	r3, #36	@ 0x24
 800a226:	4618      	mov	r0, r3
 800a228:	f7ff feec 	bl	800a004 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a22c:	f002 fb4e 	bl	800c8cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a230:	2301      	movs	r3, #1
}
 800a232:	4618      	mov	r0, r3
 800a234:	3710      	adds	r7, #16
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	e000ed04 	.word	0xe000ed04

0800a240 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a240:	b580      	push	{r7, lr}
 800a242:	b08e      	sub	sp, #56	@ 0x38
 800a244:	af02      	add	r7, sp, #8
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	607a      	str	r2, [r7, #4]
 800a24c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d10b      	bne.n	800a26c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a258:	f383 8811 	msr	BASEPRI, r3
 800a25c:	f3bf 8f6f 	isb	sy
 800a260:	f3bf 8f4f 	dsb	sy
 800a264:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a266:	bf00      	nop
 800a268:	bf00      	nop
 800a26a:	e7fd      	b.n	800a268 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d10b      	bne.n	800a28a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a276:	f383 8811 	msr	BASEPRI, r3
 800a27a:	f3bf 8f6f 	isb	sy
 800a27e:	f3bf 8f4f 	dsb	sy
 800a282:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a284:	bf00      	nop
 800a286:	bf00      	nop
 800a288:	e7fd      	b.n	800a286 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d002      	beq.n	800a296 <xQueueGenericCreateStatic+0x56>
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d001      	beq.n	800a29a <xQueueGenericCreateStatic+0x5a>
 800a296:	2301      	movs	r3, #1
 800a298:	e000      	b.n	800a29c <xQueueGenericCreateStatic+0x5c>
 800a29a:	2300      	movs	r3, #0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d10b      	bne.n	800a2b8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a4:	f383 8811 	msr	BASEPRI, r3
 800a2a8:	f3bf 8f6f 	isb	sy
 800a2ac:	f3bf 8f4f 	dsb	sy
 800a2b0:	623b      	str	r3, [r7, #32]
}
 800a2b2:	bf00      	nop
 800a2b4:	bf00      	nop
 800a2b6:	e7fd      	b.n	800a2b4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d102      	bne.n	800a2c4 <xQueueGenericCreateStatic+0x84>
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d101      	bne.n	800a2c8 <xQueueGenericCreateStatic+0x88>
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e000      	b.n	800a2ca <xQueueGenericCreateStatic+0x8a>
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d10b      	bne.n	800a2e6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d2:	f383 8811 	msr	BASEPRI, r3
 800a2d6:	f3bf 8f6f 	isb	sy
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	61fb      	str	r3, [r7, #28]
}
 800a2e0:	bf00      	nop
 800a2e2:	bf00      	nop
 800a2e4:	e7fd      	b.n	800a2e2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a2e6:	2350      	movs	r3, #80	@ 0x50
 800a2e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	2b50      	cmp	r3, #80	@ 0x50
 800a2ee:	d00b      	beq.n	800a308 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a2f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f4:	f383 8811 	msr	BASEPRI, r3
 800a2f8:	f3bf 8f6f 	isb	sy
 800a2fc:	f3bf 8f4f 	dsb	sy
 800a300:	61bb      	str	r3, [r7, #24]
}
 800a302:	bf00      	nop
 800a304:	bf00      	nop
 800a306:	e7fd      	b.n	800a304 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a308:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a30e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a310:	2b00      	cmp	r3, #0
 800a312:	d00d      	beq.n	800a330 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a316:	2201      	movs	r2, #1
 800a318:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a31c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a322:	9300      	str	r3, [sp, #0]
 800a324:	4613      	mov	r3, r2
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	68b9      	ldr	r1, [r7, #8]
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f000 f840 	bl	800a3b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a332:	4618      	mov	r0, r3
 800a334:	3730      	adds	r7, #48	@ 0x30
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}

0800a33a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b08a      	sub	sp, #40	@ 0x28
 800a33e:	af02      	add	r7, sp, #8
 800a340:	60f8      	str	r0, [r7, #12]
 800a342:	60b9      	str	r1, [r7, #8]
 800a344:	4613      	mov	r3, r2
 800a346:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d10b      	bne.n	800a366 <xQueueGenericCreate+0x2c>
	__asm volatile
 800a34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a352:	f383 8811 	msr	BASEPRI, r3
 800a356:	f3bf 8f6f 	isb	sy
 800a35a:	f3bf 8f4f 	dsb	sy
 800a35e:	613b      	str	r3, [r7, #16]
}
 800a360:	bf00      	nop
 800a362:	bf00      	nop
 800a364:	e7fd      	b.n	800a362 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	68ba      	ldr	r2, [r7, #8]
 800a36a:	fb02 f303 	mul.w	r3, r2, r3
 800a36e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a370:	69fb      	ldr	r3, [r7, #28]
 800a372:	3350      	adds	r3, #80	@ 0x50
 800a374:	4618      	mov	r0, r3
 800a376:	f002 fb99 	bl	800caac <pvPortMalloc>
 800a37a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a37c:	69bb      	ldr	r3, [r7, #24]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d011      	beq.n	800a3a6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a382:	69bb      	ldr	r3, [r7, #24]
 800a384:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	3350      	adds	r3, #80	@ 0x50
 800a38a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a38c:	69bb      	ldr	r3, [r7, #24]
 800a38e:	2200      	movs	r2, #0
 800a390:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a394:	79fa      	ldrb	r2, [r7, #7]
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	9300      	str	r3, [sp, #0]
 800a39a:	4613      	mov	r3, r2
 800a39c:	697a      	ldr	r2, [r7, #20]
 800a39e:	68b9      	ldr	r1, [r7, #8]
 800a3a0:	68f8      	ldr	r0, [r7, #12]
 800a3a2:	f000 f805 	bl	800a3b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a3a6:	69bb      	ldr	r3, [r7, #24]
	}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3720      	adds	r7, #32
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b084      	sub	sp, #16
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	60b9      	str	r1, [r7, #8]
 800a3ba:	607a      	str	r2, [r7, #4]
 800a3bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d103      	bne.n	800a3cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	69ba      	ldr	r2, [r7, #24]
 800a3c8:	601a      	str	r2, [r3, #0]
 800a3ca:	e002      	b.n	800a3d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a3d2:	69bb      	ldr	r3, [r7, #24]
 800a3d4:	68fa      	ldr	r2, [r7, #12]
 800a3d6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a3d8:	69bb      	ldr	r3, [r7, #24]
 800a3da:	68ba      	ldr	r2, [r7, #8]
 800a3dc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a3de:	2101      	movs	r1, #1
 800a3e0:	69b8      	ldr	r0, [r7, #24]
 800a3e2:	f7ff fec3 	bl	800a16c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	78fa      	ldrb	r2, [r7, #3]
 800a3ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a3ee:	bf00      	nop
 800a3f0:	3710      	adds	r7, #16
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
	...

0800a3f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b08e      	sub	sp, #56	@ 0x38
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	60b9      	str	r1, [r7, #8]
 800a402:	607a      	str	r2, [r7, #4]
 800a404:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a406:	2300      	movs	r3, #0
 800a408:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a40e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a410:	2b00      	cmp	r3, #0
 800a412:	d10b      	bne.n	800a42c <xQueueGenericSend+0x34>
	__asm volatile
 800a414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a418:	f383 8811 	msr	BASEPRI, r3
 800a41c:	f3bf 8f6f 	isb	sy
 800a420:	f3bf 8f4f 	dsb	sy
 800a424:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a426:	bf00      	nop
 800a428:	bf00      	nop
 800a42a:	e7fd      	b.n	800a428 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d103      	bne.n	800a43a <xQueueGenericSend+0x42>
 800a432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a436:	2b00      	cmp	r3, #0
 800a438:	d101      	bne.n	800a43e <xQueueGenericSend+0x46>
 800a43a:	2301      	movs	r3, #1
 800a43c:	e000      	b.n	800a440 <xQueueGenericSend+0x48>
 800a43e:	2300      	movs	r3, #0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d10b      	bne.n	800a45c <xQueueGenericSend+0x64>
	__asm volatile
 800a444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a448:	f383 8811 	msr	BASEPRI, r3
 800a44c:	f3bf 8f6f 	isb	sy
 800a450:	f3bf 8f4f 	dsb	sy
 800a454:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a456:	bf00      	nop
 800a458:	bf00      	nop
 800a45a:	e7fd      	b.n	800a458 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	2b02      	cmp	r3, #2
 800a460:	d103      	bne.n	800a46a <xQueueGenericSend+0x72>
 800a462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a466:	2b01      	cmp	r3, #1
 800a468:	d101      	bne.n	800a46e <xQueueGenericSend+0x76>
 800a46a:	2301      	movs	r3, #1
 800a46c:	e000      	b.n	800a470 <xQueueGenericSend+0x78>
 800a46e:	2300      	movs	r3, #0
 800a470:	2b00      	cmp	r3, #0
 800a472:	d10b      	bne.n	800a48c <xQueueGenericSend+0x94>
	__asm volatile
 800a474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	623b      	str	r3, [r7, #32]
}
 800a486:	bf00      	nop
 800a488:	bf00      	nop
 800a48a:	e7fd      	b.n	800a488 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a48c:	f001 fb24 	bl	800bad8 <xTaskGetSchedulerState>
 800a490:	4603      	mov	r3, r0
 800a492:	2b00      	cmp	r3, #0
 800a494:	d102      	bne.n	800a49c <xQueueGenericSend+0xa4>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d101      	bne.n	800a4a0 <xQueueGenericSend+0xa8>
 800a49c:	2301      	movs	r3, #1
 800a49e:	e000      	b.n	800a4a2 <xQueueGenericSend+0xaa>
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d10b      	bne.n	800a4be <xQueueGenericSend+0xc6>
	__asm volatile
 800a4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4aa:	f383 8811 	msr	BASEPRI, r3
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	f3bf 8f4f 	dsb	sy
 800a4b6:	61fb      	str	r3, [r7, #28]
}
 800a4b8:	bf00      	nop
 800a4ba:	bf00      	nop
 800a4bc:	e7fd      	b.n	800a4ba <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4be:	f002 f9d3 	bl	800c868 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a4c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d302      	bcc.n	800a4d4 <xQueueGenericSend+0xdc>
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	2b02      	cmp	r3, #2
 800a4d2:	d129      	bne.n	800a528 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a4d4:	683a      	ldr	r2, [r7, #0]
 800a4d6:	68b9      	ldr	r1, [r7, #8]
 800a4d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4da:	f000 fb37 	bl	800ab4c <prvCopyDataToQueue>
 800a4de:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d010      	beq.n	800a50a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ea:	3324      	adds	r3, #36	@ 0x24
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f001 f92d 	bl	800b74c <xTaskRemoveFromEventList>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d013      	beq.n	800a520 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a4f8:	4b3f      	ldr	r3, [pc, #252]	@ (800a5f8 <xQueueGenericSend+0x200>)
 800a4fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4fe:	601a      	str	r2, [r3, #0]
 800a500:	f3bf 8f4f 	dsb	sy
 800a504:	f3bf 8f6f 	isb	sy
 800a508:	e00a      	b.n	800a520 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a50a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d007      	beq.n	800a520 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a510:	4b39      	ldr	r3, [pc, #228]	@ (800a5f8 <xQueueGenericSend+0x200>)
 800a512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a516:	601a      	str	r2, [r3, #0]
 800a518:	f3bf 8f4f 	dsb	sy
 800a51c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a520:	f002 f9d4 	bl	800c8cc <vPortExitCritical>
				return pdPASS;
 800a524:	2301      	movs	r3, #1
 800a526:	e063      	b.n	800a5f0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d103      	bne.n	800a536 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a52e:	f002 f9cd 	bl	800c8cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a532:	2300      	movs	r3, #0
 800a534:	e05c      	b.n	800a5f0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d106      	bne.n	800a54a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a53c:	f107 0314 	add.w	r3, r7, #20
 800a540:	4618      	mov	r0, r3
 800a542:	f001 f967 	bl	800b814 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a546:	2301      	movs	r3, #1
 800a548:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a54a:	f002 f9bf 	bl	800c8cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a54e:	f000 fecf 	bl	800b2f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a552:	f002 f989 	bl	800c868 <vPortEnterCritical>
 800a556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a558:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a55c:	b25b      	sxtb	r3, r3
 800a55e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a562:	d103      	bne.n	800a56c <xQueueGenericSend+0x174>
 800a564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a566:	2200      	movs	r2, #0
 800a568:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a56c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a56e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a572:	b25b      	sxtb	r3, r3
 800a574:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a578:	d103      	bne.n	800a582 <xQueueGenericSend+0x18a>
 800a57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a57c:	2200      	movs	r2, #0
 800a57e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a582:	f002 f9a3 	bl	800c8cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a586:	1d3a      	adds	r2, r7, #4
 800a588:	f107 0314 	add.w	r3, r7, #20
 800a58c:	4611      	mov	r1, r2
 800a58e:	4618      	mov	r0, r3
 800a590:	f001 f956 	bl	800b840 <xTaskCheckForTimeOut>
 800a594:	4603      	mov	r3, r0
 800a596:	2b00      	cmp	r3, #0
 800a598:	d124      	bne.n	800a5e4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a59a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a59c:	f000 fbce 	bl	800ad3c <prvIsQueueFull>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d018      	beq.n	800a5d8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a8:	3310      	adds	r3, #16
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	4611      	mov	r1, r2
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f001 f87a 	bl	800b6a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a5b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a5b6:	f000 fb59 	bl	800ac6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a5ba:	f000 fea7 	bl	800b30c <xTaskResumeAll>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	f47f af7c 	bne.w	800a4be <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a5c6:	4b0c      	ldr	r3, [pc, #48]	@ (800a5f8 <xQueueGenericSend+0x200>)
 800a5c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5cc:	601a      	str	r2, [r3, #0]
 800a5ce:	f3bf 8f4f 	dsb	sy
 800a5d2:	f3bf 8f6f 	isb	sy
 800a5d6:	e772      	b.n	800a4be <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a5d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a5da:	f000 fb47 	bl	800ac6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a5de:	f000 fe95 	bl	800b30c <xTaskResumeAll>
 800a5e2:	e76c      	b.n	800a4be <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a5e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a5e6:	f000 fb41 	bl	800ac6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5ea:	f000 fe8f 	bl	800b30c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a5ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3738      	adds	r7, #56	@ 0x38
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	e000ed04 	.word	0xe000ed04

0800a5fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b090      	sub	sp, #64	@ 0x40
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	607a      	str	r2, [r7, #4]
 800a608:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a60e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a610:	2b00      	cmp	r3, #0
 800a612:	d10b      	bne.n	800a62c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a618:	f383 8811 	msr	BASEPRI, r3
 800a61c:	f3bf 8f6f 	isb	sy
 800a620:	f3bf 8f4f 	dsb	sy
 800a624:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a626:	bf00      	nop
 800a628:	bf00      	nop
 800a62a:	e7fd      	b.n	800a628 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d103      	bne.n	800a63a <xQueueGenericSendFromISR+0x3e>
 800a632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a636:	2b00      	cmp	r3, #0
 800a638:	d101      	bne.n	800a63e <xQueueGenericSendFromISR+0x42>
 800a63a:	2301      	movs	r3, #1
 800a63c:	e000      	b.n	800a640 <xQueueGenericSendFromISR+0x44>
 800a63e:	2300      	movs	r3, #0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d10b      	bne.n	800a65c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a648:	f383 8811 	msr	BASEPRI, r3
 800a64c:	f3bf 8f6f 	isb	sy
 800a650:	f3bf 8f4f 	dsb	sy
 800a654:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a656:	bf00      	nop
 800a658:	bf00      	nop
 800a65a:	e7fd      	b.n	800a658 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	2b02      	cmp	r3, #2
 800a660:	d103      	bne.n	800a66a <xQueueGenericSendFromISR+0x6e>
 800a662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a666:	2b01      	cmp	r3, #1
 800a668:	d101      	bne.n	800a66e <xQueueGenericSendFromISR+0x72>
 800a66a:	2301      	movs	r3, #1
 800a66c:	e000      	b.n	800a670 <xQueueGenericSendFromISR+0x74>
 800a66e:	2300      	movs	r3, #0
 800a670:	2b00      	cmp	r3, #0
 800a672:	d10b      	bne.n	800a68c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a678:	f383 8811 	msr	BASEPRI, r3
 800a67c:	f3bf 8f6f 	isb	sy
 800a680:	f3bf 8f4f 	dsb	sy
 800a684:	623b      	str	r3, [r7, #32]
}
 800a686:	bf00      	nop
 800a688:	bf00      	nop
 800a68a:	e7fd      	b.n	800a688 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a68c:	f002 f9cc 	bl	800ca28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a690:	f3ef 8211 	mrs	r2, BASEPRI
 800a694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a698:	f383 8811 	msr	BASEPRI, r3
 800a69c:	f3bf 8f6f 	isb	sy
 800a6a0:	f3bf 8f4f 	dsb	sy
 800a6a4:	61fa      	str	r2, [r7, #28]
 800a6a6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a6a8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a6aa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a6ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d302      	bcc.n	800a6be <xQueueGenericSendFromISR+0xc2>
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	2b02      	cmp	r3, #2
 800a6bc:	d12f      	bne.n	800a71e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a6be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a6c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a6ce:	683a      	ldr	r2, [r7, #0]
 800a6d0:	68b9      	ldr	r1, [r7, #8]
 800a6d2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a6d4:	f000 fa3a 	bl	800ab4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a6d8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a6dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a6e0:	d112      	bne.n	800a708 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d016      	beq.n	800a718 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ec:	3324      	adds	r3, #36	@ 0x24
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f001 f82c 	bl	800b74c <xTaskRemoveFromEventList>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d00e      	beq.n	800a718 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d00b      	beq.n	800a718 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	601a      	str	r2, [r3, #0]
 800a706:	e007      	b.n	800a718 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a708:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a70c:	3301      	adds	r3, #1
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	b25a      	sxtb	r2, r3
 800a712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a714:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a718:	2301      	movs	r3, #1
 800a71a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a71c:	e001      	b.n	800a722 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a71e:	2300      	movs	r3, #0
 800a720:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a724:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a72c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a72e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a730:	4618      	mov	r0, r3
 800a732:	3740      	adds	r7, #64	@ 0x40
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b08c      	sub	sp, #48	@ 0x30
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a744:	2300      	movs	r3, #0
 800a746:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a74c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d10b      	bne.n	800a76a <xQueueReceive+0x32>
	__asm volatile
 800a752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a756:	f383 8811 	msr	BASEPRI, r3
 800a75a:	f3bf 8f6f 	isb	sy
 800a75e:	f3bf 8f4f 	dsb	sy
 800a762:	623b      	str	r3, [r7, #32]
}
 800a764:	bf00      	nop
 800a766:	bf00      	nop
 800a768:	e7fd      	b.n	800a766 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d103      	bne.n	800a778 <xQueueReceive+0x40>
 800a770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a774:	2b00      	cmp	r3, #0
 800a776:	d101      	bne.n	800a77c <xQueueReceive+0x44>
 800a778:	2301      	movs	r3, #1
 800a77a:	e000      	b.n	800a77e <xQueueReceive+0x46>
 800a77c:	2300      	movs	r3, #0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d10b      	bne.n	800a79a <xQueueReceive+0x62>
	__asm volatile
 800a782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a786:	f383 8811 	msr	BASEPRI, r3
 800a78a:	f3bf 8f6f 	isb	sy
 800a78e:	f3bf 8f4f 	dsb	sy
 800a792:	61fb      	str	r3, [r7, #28]
}
 800a794:	bf00      	nop
 800a796:	bf00      	nop
 800a798:	e7fd      	b.n	800a796 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a79a:	f001 f99d 	bl	800bad8 <xTaskGetSchedulerState>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d102      	bne.n	800a7aa <xQueueReceive+0x72>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d101      	bne.n	800a7ae <xQueueReceive+0x76>
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	e000      	b.n	800a7b0 <xQueueReceive+0x78>
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d10b      	bne.n	800a7cc <xQueueReceive+0x94>
	__asm volatile
 800a7b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7b8:	f383 8811 	msr	BASEPRI, r3
 800a7bc:	f3bf 8f6f 	isb	sy
 800a7c0:	f3bf 8f4f 	dsb	sy
 800a7c4:	61bb      	str	r3, [r7, #24]
}
 800a7c6:	bf00      	nop
 800a7c8:	bf00      	nop
 800a7ca:	e7fd      	b.n	800a7c8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7cc:	f002 f84c 	bl	800c868 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7d4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a7d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d01f      	beq.n	800a81c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a7dc:	68b9      	ldr	r1, [r7, #8]
 800a7de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7e0:	f000 fa1e 	bl	800ac20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a7e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e6:	1e5a      	subs	r2, r3, #1
 800a7e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ea:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ee:	691b      	ldr	r3, [r3, #16]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d00f      	beq.n	800a814 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f6:	3310      	adds	r3, #16
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f000 ffa7 	bl	800b74c <xTaskRemoveFromEventList>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	d007      	beq.n	800a814 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a804:	4b3c      	ldr	r3, [pc, #240]	@ (800a8f8 <xQueueReceive+0x1c0>)
 800a806:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a80a:	601a      	str	r2, [r3, #0]
 800a80c:	f3bf 8f4f 	dsb	sy
 800a810:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a814:	f002 f85a 	bl	800c8cc <vPortExitCritical>
				return pdPASS;
 800a818:	2301      	movs	r3, #1
 800a81a:	e069      	b.n	800a8f0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d103      	bne.n	800a82a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a822:	f002 f853 	bl	800c8cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a826:	2300      	movs	r3, #0
 800a828:	e062      	b.n	800a8f0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a82a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d106      	bne.n	800a83e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a830:	f107 0310 	add.w	r3, r7, #16
 800a834:	4618      	mov	r0, r3
 800a836:	f000 ffed 	bl	800b814 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a83a:	2301      	movs	r3, #1
 800a83c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a83e:	f002 f845 	bl	800c8cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a842:	f000 fd55 	bl	800b2f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a846:	f002 f80f 	bl	800c868 <vPortEnterCritical>
 800a84a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a84c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a850:	b25b      	sxtb	r3, r3
 800a852:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a856:	d103      	bne.n	800a860 <xQueueReceive+0x128>
 800a858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a85a:	2200      	movs	r2, #0
 800a85c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a862:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a866:	b25b      	sxtb	r3, r3
 800a868:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a86c:	d103      	bne.n	800a876 <xQueueReceive+0x13e>
 800a86e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a870:	2200      	movs	r2, #0
 800a872:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a876:	f002 f829 	bl	800c8cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a87a:	1d3a      	adds	r2, r7, #4
 800a87c:	f107 0310 	add.w	r3, r7, #16
 800a880:	4611      	mov	r1, r2
 800a882:	4618      	mov	r0, r3
 800a884:	f000 ffdc 	bl	800b840 <xTaskCheckForTimeOut>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d123      	bne.n	800a8d6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a88e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a890:	f000 fa3e 	bl	800ad10 <prvIsQueueEmpty>
 800a894:	4603      	mov	r3, r0
 800a896:	2b00      	cmp	r3, #0
 800a898:	d017      	beq.n	800a8ca <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a89a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a89c:	3324      	adds	r3, #36	@ 0x24
 800a89e:	687a      	ldr	r2, [r7, #4]
 800a8a0:	4611      	mov	r1, r2
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f000 ff00 	bl	800b6a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a8a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8aa:	f000 f9df 	bl	800ac6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a8ae:	f000 fd2d 	bl	800b30c <xTaskResumeAll>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d189      	bne.n	800a7cc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a8b8:	4b0f      	ldr	r3, [pc, #60]	@ (800a8f8 <xQueueReceive+0x1c0>)
 800a8ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8be:	601a      	str	r2, [r3, #0]
 800a8c0:	f3bf 8f4f 	dsb	sy
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	e780      	b.n	800a7cc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a8ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8cc:	f000 f9ce 	bl	800ac6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8d0:	f000 fd1c 	bl	800b30c <xTaskResumeAll>
 800a8d4:	e77a      	b.n	800a7cc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a8d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8d8:	f000 f9c8 	bl	800ac6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a8dc:	f000 fd16 	bl	800b30c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8e2:	f000 fa15 	bl	800ad10 <prvIsQueueEmpty>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	f43f af6f 	beq.w	800a7cc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a8ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3730      	adds	r7, #48	@ 0x30
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	e000ed04 	.word	0xe000ed04

0800a8fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b08e      	sub	sp, #56	@ 0x38
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a906:	2300      	movs	r3, #0
 800a908:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a90e:	2300      	movs	r3, #0
 800a910:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a914:	2b00      	cmp	r3, #0
 800a916:	d10b      	bne.n	800a930 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a91c:	f383 8811 	msr	BASEPRI, r3
 800a920:	f3bf 8f6f 	isb	sy
 800a924:	f3bf 8f4f 	dsb	sy
 800a928:	623b      	str	r3, [r7, #32]
}
 800a92a:	bf00      	nop
 800a92c:	bf00      	nop
 800a92e:	e7fd      	b.n	800a92c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a934:	2b00      	cmp	r3, #0
 800a936:	d00b      	beq.n	800a950 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a93c:	f383 8811 	msr	BASEPRI, r3
 800a940:	f3bf 8f6f 	isb	sy
 800a944:	f3bf 8f4f 	dsb	sy
 800a948:	61fb      	str	r3, [r7, #28]
}
 800a94a:	bf00      	nop
 800a94c:	bf00      	nop
 800a94e:	e7fd      	b.n	800a94c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a950:	f001 f8c2 	bl	800bad8 <xTaskGetSchedulerState>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d102      	bne.n	800a960 <xQueueSemaphoreTake+0x64>
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d101      	bne.n	800a964 <xQueueSemaphoreTake+0x68>
 800a960:	2301      	movs	r3, #1
 800a962:	e000      	b.n	800a966 <xQueueSemaphoreTake+0x6a>
 800a964:	2300      	movs	r3, #0
 800a966:	2b00      	cmp	r3, #0
 800a968:	d10b      	bne.n	800a982 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a96a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a96e:	f383 8811 	msr	BASEPRI, r3
 800a972:	f3bf 8f6f 	isb	sy
 800a976:	f3bf 8f4f 	dsb	sy
 800a97a:	61bb      	str	r3, [r7, #24]
}
 800a97c:	bf00      	nop
 800a97e:	bf00      	nop
 800a980:	e7fd      	b.n	800a97e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a982:	f001 ff71 	bl	800c868 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a98a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a98c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d024      	beq.n	800a9dc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a994:	1e5a      	subs	r2, r3, #1
 800a996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a998:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a99a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d104      	bne.n	800a9ac <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a9a2:	f001 fa13 	bl	800bdcc <pvTaskIncrementMutexHeldCount>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9aa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9ae:	691b      	ldr	r3, [r3, #16]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d00f      	beq.n	800a9d4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9b6:	3310      	adds	r3, #16
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f000 fec7 	bl	800b74c <xTaskRemoveFromEventList>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d007      	beq.n	800a9d4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a9c4:	4b54      	ldr	r3, [pc, #336]	@ (800ab18 <xQueueSemaphoreTake+0x21c>)
 800a9c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9ca:	601a      	str	r2, [r3, #0]
 800a9cc:	f3bf 8f4f 	dsb	sy
 800a9d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a9d4:	f001 ff7a 	bl	800c8cc <vPortExitCritical>
				return pdPASS;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	e098      	b.n	800ab0e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d112      	bne.n	800aa08 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a9e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d00b      	beq.n	800aa00 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a9e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ec:	f383 8811 	msr	BASEPRI, r3
 800a9f0:	f3bf 8f6f 	isb	sy
 800a9f4:	f3bf 8f4f 	dsb	sy
 800a9f8:	617b      	str	r3, [r7, #20]
}
 800a9fa:	bf00      	nop
 800a9fc:	bf00      	nop
 800a9fe:	e7fd      	b.n	800a9fc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800aa00:	f001 ff64 	bl	800c8cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aa04:	2300      	movs	r3, #0
 800aa06:	e082      	b.n	800ab0e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d106      	bne.n	800aa1c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa0e:	f107 030c 	add.w	r3, r7, #12
 800aa12:	4618      	mov	r0, r3
 800aa14:	f000 fefe 	bl	800b814 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa1c:	f001 ff56 	bl	800c8cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa20:	f000 fc66 	bl	800b2f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa24:	f001 ff20 	bl	800c868 <vPortEnterCritical>
 800aa28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa2a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa2e:	b25b      	sxtb	r3, r3
 800aa30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa34:	d103      	bne.n	800aa3e <xQueueSemaphoreTake+0x142>
 800aa36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa44:	b25b      	sxtb	r3, r3
 800aa46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa4a:	d103      	bne.n	800aa54 <xQueueSemaphoreTake+0x158>
 800aa4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa54:	f001 ff3a 	bl	800c8cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa58:	463a      	mov	r2, r7
 800aa5a:	f107 030c 	add.w	r3, r7, #12
 800aa5e:	4611      	mov	r1, r2
 800aa60:	4618      	mov	r0, r3
 800aa62:	f000 feed 	bl	800b840 <xTaskCheckForTimeOut>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d132      	bne.n	800aad2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa6e:	f000 f94f 	bl	800ad10 <prvIsQueueEmpty>
 800aa72:	4603      	mov	r3, r0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d026      	beq.n	800aac6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d109      	bne.n	800aa94 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800aa80:	f001 fef2 	bl	800c868 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa86:	689b      	ldr	r3, [r3, #8]
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f001 f843 	bl	800bb14 <xTaskPriorityInherit>
 800aa8e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800aa90:	f001 ff1c 	bl	800c8cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa96:	3324      	adds	r3, #36	@ 0x24
 800aa98:	683a      	ldr	r2, [r7, #0]
 800aa9a:	4611      	mov	r1, r2
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f000 fe03 	bl	800b6a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aaa2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aaa4:	f000 f8e2 	bl	800ac6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aaa8:	f000 fc30 	bl	800b30c <xTaskResumeAll>
 800aaac:	4603      	mov	r3, r0
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	f47f af67 	bne.w	800a982 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800aab4:	4b18      	ldr	r3, [pc, #96]	@ (800ab18 <xQueueSemaphoreTake+0x21c>)
 800aab6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aaba:	601a      	str	r2, [r3, #0]
 800aabc:	f3bf 8f4f 	dsb	sy
 800aac0:	f3bf 8f6f 	isb	sy
 800aac4:	e75d      	b.n	800a982 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800aac6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aac8:	f000 f8d0 	bl	800ac6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aacc:	f000 fc1e 	bl	800b30c <xTaskResumeAll>
 800aad0:	e757      	b.n	800a982 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800aad2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aad4:	f000 f8ca 	bl	800ac6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aad8:	f000 fc18 	bl	800b30c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aadc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aade:	f000 f917 	bl	800ad10 <prvIsQueueEmpty>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	f43f af4c 	beq.w	800a982 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800aaea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d00d      	beq.n	800ab0c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800aaf0:	f001 feba 	bl	800c868 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800aaf4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aaf6:	f000 f811 	bl	800ab1c <prvGetDisinheritPriorityAfterTimeout>
 800aafa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800aafc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ab02:	4618      	mov	r0, r3
 800ab04:	f001 f8de 	bl	800bcc4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ab08:	f001 fee0 	bl	800c8cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ab0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3738      	adds	r7, #56	@ 0x38
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	e000ed04 	.word	0xe000ed04

0800ab1c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b085      	sub	sp, #20
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d006      	beq.n	800ab3a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ab36:	60fb      	str	r3, [r7, #12]
 800ab38:	e001      	b.n	800ab3e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
	}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3714      	adds	r7, #20
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b086      	sub	sp, #24
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	60b9      	str	r1, [r7, #8]
 800ab56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d10d      	bne.n	800ab86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d14d      	bne.n	800ac0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	689b      	ldr	r3, [r3, #8]
 800ab76:	4618      	mov	r0, r3
 800ab78:	f001 f834 	bl	800bbe4 <xTaskPriorityDisinherit>
 800ab7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2200      	movs	r2, #0
 800ab82:	609a      	str	r2, [r3, #8]
 800ab84:	e043      	b.n	800ac0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d119      	bne.n	800abc0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	6858      	ldr	r0, [r3, #4]
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab94:	461a      	mov	r2, r3
 800ab96:	68b9      	ldr	r1, [r7, #8]
 800ab98:	f003 f8bb 	bl	800dd12 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	685a      	ldr	r2, [r3, #4]
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aba4:	441a      	add	r2, r3
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	685a      	ldr	r2, [r3, #4]
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	689b      	ldr	r3, [r3, #8]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d32b      	bcc.n	800ac0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	605a      	str	r2, [r3, #4]
 800abbe:	e026      	b.n	800ac0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	68d8      	ldr	r0, [r3, #12]
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abc8:	461a      	mov	r2, r3
 800abca:	68b9      	ldr	r1, [r7, #8]
 800abcc:	f003 f8a1 	bl	800dd12 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	68da      	ldr	r2, [r3, #12]
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abd8:	425b      	negs	r3, r3
 800abda:	441a      	add	r2, r3
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	68da      	ldr	r2, [r3, #12]
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	429a      	cmp	r2, r3
 800abea:	d207      	bcs.n	800abfc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	689a      	ldr	r2, [r3, #8]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abf4:	425b      	negs	r3, r3
 800abf6:	441a      	add	r2, r3
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2b02      	cmp	r3, #2
 800ac00:	d105      	bne.n	800ac0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d002      	beq.n	800ac0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	3b01      	subs	r3, #1
 800ac0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	1c5a      	adds	r2, r3, #1
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ac16:	697b      	ldr	r3, [r7, #20]
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3718      	adds	r7, #24
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d018      	beq.n	800ac64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	68da      	ldr	r2, [r3, #12]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac3a:	441a      	add	r2, r3
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	68da      	ldr	r2, [r3, #12]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	689b      	ldr	r3, [r3, #8]
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d303      	bcc.n	800ac54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	68d9      	ldr	r1, [r3, #12]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	6838      	ldr	r0, [r7, #0]
 800ac60:	f003 f857 	bl	800dd12 <memcpy>
	}
}
 800ac64:	bf00      	nop
 800ac66:	3708      	adds	r7, #8
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b084      	sub	sp, #16
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ac74:	f001 fdf8 	bl	800c868 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac80:	e011      	b.n	800aca6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d012      	beq.n	800acb0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	3324      	adds	r3, #36	@ 0x24
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f000 fd5c 	bl	800b74c <xTaskRemoveFromEventList>
 800ac94:	4603      	mov	r3, r0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d001      	beq.n	800ac9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ac9a:	f000 fe35 	bl	800b908 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ac9e:	7bfb      	ldrb	r3, [r7, #15]
 800aca0:	3b01      	subs	r3, #1
 800aca2:	b2db      	uxtb	r3, r3
 800aca4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	dce9      	bgt.n	800ac82 <prvUnlockQueue+0x16>
 800acae:	e000      	b.n	800acb2 <prvUnlockQueue+0x46>
					break;
 800acb0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	22ff      	movs	r2, #255	@ 0xff
 800acb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800acba:	f001 fe07 	bl	800c8cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800acbe:	f001 fdd3 	bl	800c868 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800acc8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800acca:	e011      	b.n	800acf0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	691b      	ldr	r3, [r3, #16]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d012      	beq.n	800acfa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	3310      	adds	r3, #16
 800acd8:	4618      	mov	r0, r3
 800acda:	f000 fd37 	bl	800b74c <xTaskRemoveFromEventList>
 800acde:	4603      	mov	r3, r0
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d001      	beq.n	800ace8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ace4:	f000 fe10 	bl	800b908 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ace8:	7bbb      	ldrb	r3, [r7, #14]
 800acea:	3b01      	subs	r3, #1
 800acec:	b2db      	uxtb	r3, r3
 800acee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800acf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	dce9      	bgt.n	800accc <prvUnlockQueue+0x60>
 800acf8:	e000      	b.n	800acfc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800acfa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	22ff      	movs	r2, #255	@ 0xff
 800ad00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ad04:	f001 fde2 	bl	800c8cc <vPortExitCritical>
}
 800ad08:	bf00      	nop
 800ad0a:	3710      	adds	r7, #16
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad18:	f001 fda6 	bl	800c868 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d102      	bne.n	800ad2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ad24:	2301      	movs	r3, #1
 800ad26:	60fb      	str	r3, [r7, #12]
 800ad28:	e001      	b.n	800ad2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad2e:	f001 fdcd 	bl	800c8cc <vPortExitCritical>

	return xReturn;
 800ad32:	68fb      	ldr	r3, [r7, #12]
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3710      	adds	r7, #16
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad44:	f001 fd90 	bl	800c868 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d102      	bne.n	800ad5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ad54:	2301      	movs	r3, #1
 800ad56:	60fb      	str	r3, [r7, #12]
 800ad58:	e001      	b.n	800ad5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad5e:	f001 fdb5 	bl	800c8cc <vPortExitCritical>

	return xReturn;
 800ad62:	68fb      	ldr	r3, [r7, #12]
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3710      	adds	r7, #16
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b085      	sub	sp, #20
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad76:	2300      	movs	r3, #0
 800ad78:	60fb      	str	r3, [r7, #12]
 800ad7a:	e014      	b.n	800ada6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ad7c:	4a0f      	ldr	r2, [pc, #60]	@ (800adbc <vQueueAddToRegistry+0x50>)
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d10b      	bne.n	800ada0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ad88:	490c      	ldr	r1, [pc, #48]	@ (800adbc <vQueueAddToRegistry+0x50>)
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	683a      	ldr	r2, [r7, #0]
 800ad8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ad92:	4a0a      	ldr	r2, [pc, #40]	@ (800adbc <vQueueAddToRegistry+0x50>)
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	00db      	lsls	r3, r3, #3
 800ad98:	4413      	add	r3, r2
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ad9e:	e006      	b.n	800adae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	3301      	adds	r3, #1
 800ada4:	60fb      	str	r3, [r7, #12]
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2b07      	cmp	r3, #7
 800adaa:	d9e7      	bls.n	800ad7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800adac:	bf00      	nop
 800adae:	bf00      	nop
 800adb0:	3714      	adds	r7, #20
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr
 800adba:	bf00      	nop
 800adbc:	20000cec 	.word	0x20000cec

0800adc0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b086      	sub	sp, #24
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800add0:	f001 fd4a 	bl	800c868 <vPortEnterCritical>
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800adda:	b25b      	sxtb	r3, r3
 800addc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ade0:	d103      	bne.n	800adea <vQueueWaitForMessageRestricted+0x2a>
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	2200      	movs	r2, #0
 800ade6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800adf0:	b25b      	sxtb	r3, r3
 800adf2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800adf6:	d103      	bne.n	800ae00 <vQueueWaitForMessageRestricted+0x40>
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	2200      	movs	r2, #0
 800adfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ae00:	f001 fd64 	bl	800c8cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d106      	bne.n	800ae1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	3324      	adds	r3, #36	@ 0x24
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	68b9      	ldr	r1, [r7, #8]
 800ae14:	4618      	mov	r0, r3
 800ae16:	f000 fc6d 	bl	800b6f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ae1a:	6978      	ldr	r0, [r7, #20]
 800ae1c:	f7ff ff26 	bl	800ac6c <prvUnlockQueue>
	}
 800ae20:	bf00      	nop
 800ae22:	3718      	adds	r7, #24
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b08e      	sub	sp, #56	@ 0x38
 800ae2c:	af04      	add	r7, sp, #16
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	60b9      	str	r1, [r7, #8]
 800ae32:	607a      	str	r2, [r7, #4]
 800ae34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ae36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d10b      	bne.n	800ae54 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ae3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae40:	f383 8811 	msr	BASEPRI, r3
 800ae44:	f3bf 8f6f 	isb	sy
 800ae48:	f3bf 8f4f 	dsb	sy
 800ae4c:	623b      	str	r3, [r7, #32]
}
 800ae4e:	bf00      	nop
 800ae50:	bf00      	nop
 800ae52:	e7fd      	b.n	800ae50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ae54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d10b      	bne.n	800ae72 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ae5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae5e:	f383 8811 	msr	BASEPRI, r3
 800ae62:	f3bf 8f6f 	isb	sy
 800ae66:	f3bf 8f4f 	dsb	sy
 800ae6a:	61fb      	str	r3, [r7, #28]
}
 800ae6c:	bf00      	nop
 800ae6e:	bf00      	nop
 800ae70:	e7fd      	b.n	800ae6e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ae72:	23a8      	movs	r3, #168	@ 0xa8
 800ae74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	2ba8      	cmp	r3, #168	@ 0xa8
 800ae7a:	d00b      	beq.n	800ae94 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ae7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae80:	f383 8811 	msr	BASEPRI, r3
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	f3bf 8f4f 	dsb	sy
 800ae8c:	61bb      	str	r3, [r7, #24]
}
 800ae8e:	bf00      	nop
 800ae90:	bf00      	nop
 800ae92:	e7fd      	b.n	800ae90 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ae94:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ae96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d01e      	beq.n	800aeda <xTaskCreateStatic+0xb2>
 800ae9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d01b      	beq.n	800aeda <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aeaa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aeac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeae:	2202      	movs	r2, #2
 800aeb0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	9303      	str	r3, [sp, #12]
 800aeb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeba:	9302      	str	r3, [sp, #8]
 800aebc:	f107 0314 	add.w	r3, r7, #20
 800aec0:	9301      	str	r3, [sp, #4]
 800aec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec4:	9300      	str	r3, [sp, #0]
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	68b9      	ldr	r1, [r7, #8]
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	f000 f851 	bl	800af74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aed2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aed4:	f000 f8f6 	bl	800b0c4 <prvAddNewTaskToReadyList>
 800aed8:	e001      	b.n	800aede <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800aeda:	2300      	movs	r3, #0
 800aedc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aede:	697b      	ldr	r3, [r7, #20]
	}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3728      	adds	r7, #40	@ 0x28
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b08c      	sub	sp, #48	@ 0x30
 800aeec:	af04      	add	r7, sp, #16
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	603b      	str	r3, [r7, #0]
 800aef4:	4613      	mov	r3, r2
 800aef6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aef8:	88fb      	ldrh	r3, [r7, #6]
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	4618      	mov	r0, r3
 800aefe:	f001 fdd5 	bl	800caac <pvPortMalloc>
 800af02:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d00e      	beq.n	800af28 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800af0a:	20a8      	movs	r0, #168	@ 0xa8
 800af0c:	f001 fdce 	bl	800caac <pvPortMalloc>
 800af10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d003      	beq.n	800af20 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800af18:	69fb      	ldr	r3, [r7, #28]
 800af1a:	697a      	ldr	r2, [r7, #20]
 800af1c:	631a      	str	r2, [r3, #48]	@ 0x30
 800af1e:	e005      	b.n	800af2c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800af20:	6978      	ldr	r0, [r7, #20]
 800af22:	f001 fe91 	bl	800cc48 <vPortFree>
 800af26:	e001      	b.n	800af2c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800af28:	2300      	movs	r3, #0
 800af2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d017      	beq.n	800af62 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800af32:	69fb      	ldr	r3, [r7, #28]
 800af34:	2200      	movs	r2, #0
 800af36:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800af3a:	88fa      	ldrh	r2, [r7, #6]
 800af3c:	2300      	movs	r3, #0
 800af3e:	9303      	str	r3, [sp, #12]
 800af40:	69fb      	ldr	r3, [r7, #28]
 800af42:	9302      	str	r3, [sp, #8]
 800af44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af46:	9301      	str	r3, [sp, #4]
 800af48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af4a:	9300      	str	r3, [sp, #0]
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	68b9      	ldr	r1, [r7, #8]
 800af50:	68f8      	ldr	r0, [r7, #12]
 800af52:	f000 f80f 	bl	800af74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af56:	69f8      	ldr	r0, [r7, #28]
 800af58:	f000 f8b4 	bl	800b0c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800af5c:	2301      	movs	r3, #1
 800af5e:	61bb      	str	r3, [r7, #24]
 800af60:	e002      	b.n	800af68 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800af62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800af66:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800af68:	69bb      	ldr	r3, [r7, #24]
	}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3720      	adds	r7, #32
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
	...

0800af74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b088      	sub	sp, #32
 800af78:	af00      	add	r7, sp, #0
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	607a      	str	r2, [r7, #4]
 800af80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800af82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af84:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	461a      	mov	r2, r3
 800af8c:	21a5      	movs	r1, #165	@ 0xa5
 800af8e:	f002 fa34 	bl	800d3fa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800af92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800af9c:	3b01      	subs	r3, #1
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	4413      	add	r3, r2
 800afa2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800afa4:	69bb      	ldr	r3, [r7, #24]
 800afa6:	f023 0307 	bic.w	r3, r3, #7
 800afaa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800afac:	69bb      	ldr	r3, [r7, #24]
 800afae:	f003 0307 	and.w	r3, r3, #7
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d00b      	beq.n	800afce <prvInitialiseNewTask+0x5a>
	__asm volatile
 800afb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afba:	f383 8811 	msr	BASEPRI, r3
 800afbe:	f3bf 8f6f 	isb	sy
 800afc2:	f3bf 8f4f 	dsb	sy
 800afc6:	617b      	str	r3, [r7, #20]
}
 800afc8:	bf00      	nop
 800afca:	bf00      	nop
 800afcc:	e7fd      	b.n	800afca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d01f      	beq.n	800b014 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afd4:	2300      	movs	r3, #0
 800afd6:	61fb      	str	r3, [r7, #28]
 800afd8:	e012      	b.n	800b000 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800afda:	68ba      	ldr	r2, [r7, #8]
 800afdc:	69fb      	ldr	r3, [r7, #28]
 800afde:	4413      	add	r3, r2
 800afe0:	7819      	ldrb	r1, [r3, #0]
 800afe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	4413      	add	r3, r2
 800afe8:	3334      	adds	r3, #52	@ 0x34
 800afea:	460a      	mov	r2, r1
 800afec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800afee:	68ba      	ldr	r2, [r7, #8]
 800aff0:	69fb      	ldr	r3, [r7, #28]
 800aff2:	4413      	add	r3, r2
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d006      	beq.n	800b008 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800affa:	69fb      	ldr	r3, [r7, #28]
 800affc:	3301      	adds	r3, #1
 800affe:	61fb      	str	r3, [r7, #28]
 800b000:	69fb      	ldr	r3, [r7, #28]
 800b002:	2b0f      	cmp	r3, #15
 800b004:	d9e9      	bls.n	800afda <prvInitialiseNewTask+0x66>
 800b006:	e000      	b.n	800b00a <prvInitialiseNewTask+0x96>
			{
				break;
 800b008:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b00c:	2200      	movs	r2, #0
 800b00e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b012:	e003      	b.n	800b01c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b016:	2200      	movs	r2, #0
 800b018:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b01c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b01e:	2b37      	cmp	r3, #55	@ 0x37
 800b020:	d901      	bls.n	800b026 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b022:	2337      	movs	r3, #55	@ 0x37
 800b024:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b028:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b02a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b02e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b030:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b034:	2200      	movs	r2, #0
 800b036:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b03a:	3304      	adds	r3, #4
 800b03c:	4618      	mov	r0, r3
 800b03e:	f7ff f801 	bl	800a044 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b044:	3318      	adds	r3, #24
 800b046:	4618      	mov	r0, r3
 800b048:	f7fe fffc 	bl	800a044 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b04c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b04e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b050:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b054:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b05a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b05e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b060:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b064:	2200      	movs	r2, #0
 800b066:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b06c:	2200      	movs	r2, #0
 800b06e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b074:	3354      	adds	r3, #84	@ 0x54
 800b076:	224c      	movs	r2, #76	@ 0x4c
 800b078:	2100      	movs	r1, #0
 800b07a:	4618      	mov	r0, r3
 800b07c:	f002 f9bd 	bl	800d3fa <memset>
 800b080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b082:	4a0d      	ldr	r2, [pc, #52]	@ (800b0b8 <prvInitialiseNewTask+0x144>)
 800b084:	659a      	str	r2, [r3, #88]	@ 0x58
 800b086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b088:	4a0c      	ldr	r2, [pc, #48]	@ (800b0bc <prvInitialiseNewTask+0x148>)
 800b08a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b08c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b08e:	4a0c      	ldr	r2, [pc, #48]	@ (800b0c0 <prvInitialiseNewTask+0x14c>)
 800b090:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b092:	683a      	ldr	r2, [r7, #0]
 800b094:	68f9      	ldr	r1, [r7, #12]
 800b096:	69b8      	ldr	r0, [r7, #24]
 800b098:	f001 fab8 	bl	800c60c <pxPortInitialiseStack>
 800b09c:	4602      	mov	r2, r0
 800b09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b0a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d002      	beq.n	800b0ae <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b0a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0ae:	bf00      	nop
 800b0b0:	3720      	adds	r7, #32
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	20004f88 	.word	0x20004f88
 800b0bc:	20004ff0 	.word	0x20004ff0
 800b0c0:	20005058 	.word	0x20005058

0800b0c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b0cc:	f001 fbcc 	bl	800c868 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b0d0:	4b2d      	ldr	r3, [pc, #180]	@ (800b188 <prvAddNewTaskToReadyList+0xc4>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	4a2c      	ldr	r2, [pc, #176]	@ (800b188 <prvAddNewTaskToReadyList+0xc4>)
 800b0d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b0da:	4b2c      	ldr	r3, [pc, #176]	@ (800b18c <prvAddNewTaskToReadyList+0xc8>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d109      	bne.n	800b0f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b0e2:	4a2a      	ldr	r2, [pc, #168]	@ (800b18c <prvAddNewTaskToReadyList+0xc8>)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b0e8:	4b27      	ldr	r3, [pc, #156]	@ (800b188 <prvAddNewTaskToReadyList+0xc4>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d110      	bne.n	800b112 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b0f0:	f000 fc2e 	bl	800b950 <prvInitialiseTaskLists>
 800b0f4:	e00d      	b.n	800b112 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b0f6:	4b26      	ldr	r3, [pc, #152]	@ (800b190 <prvAddNewTaskToReadyList+0xcc>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d109      	bne.n	800b112 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b0fe:	4b23      	ldr	r3, [pc, #140]	@ (800b18c <prvAddNewTaskToReadyList+0xc8>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b108:	429a      	cmp	r2, r3
 800b10a:	d802      	bhi.n	800b112 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b10c:	4a1f      	ldr	r2, [pc, #124]	@ (800b18c <prvAddNewTaskToReadyList+0xc8>)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b112:	4b20      	ldr	r3, [pc, #128]	@ (800b194 <prvAddNewTaskToReadyList+0xd0>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	3301      	adds	r3, #1
 800b118:	4a1e      	ldr	r2, [pc, #120]	@ (800b194 <prvAddNewTaskToReadyList+0xd0>)
 800b11a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b11c:	4b1d      	ldr	r3, [pc, #116]	@ (800b194 <prvAddNewTaskToReadyList+0xd0>)
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b128:	4b1b      	ldr	r3, [pc, #108]	@ (800b198 <prvAddNewTaskToReadyList+0xd4>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d903      	bls.n	800b138 <prvAddNewTaskToReadyList+0x74>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b134:	4a18      	ldr	r2, [pc, #96]	@ (800b198 <prvAddNewTaskToReadyList+0xd4>)
 800b136:	6013      	str	r3, [r2, #0]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b13c:	4613      	mov	r3, r2
 800b13e:	009b      	lsls	r3, r3, #2
 800b140:	4413      	add	r3, r2
 800b142:	009b      	lsls	r3, r3, #2
 800b144:	4a15      	ldr	r2, [pc, #84]	@ (800b19c <prvAddNewTaskToReadyList+0xd8>)
 800b146:	441a      	add	r2, r3
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	3304      	adds	r3, #4
 800b14c:	4619      	mov	r1, r3
 800b14e:	4610      	mov	r0, r2
 800b150:	f7fe ff85 	bl	800a05e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b154:	f001 fbba 	bl	800c8cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b158:	4b0d      	ldr	r3, [pc, #52]	@ (800b190 <prvAddNewTaskToReadyList+0xcc>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d00e      	beq.n	800b17e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b160:	4b0a      	ldr	r3, [pc, #40]	@ (800b18c <prvAddNewTaskToReadyList+0xc8>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d207      	bcs.n	800b17e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b16e:	4b0c      	ldr	r3, [pc, #48]	@ (800b1a0 <prvAddNewTaskToReadyList+0xdc>)
 800b170:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b174:	601a      	str	r2, [r3, #0]
 800b176:	f3bf 8f4f 	dsb	sy
 800b17a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b17e:	bf00      	nop
 800b180:	3708      	adds	r7, #8
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	20001200 	.word	0x20001200
 800b18c:	20000d2c 	.word	0x20000d2c
 800b190:	2000120c 	.word	0x2000120c
 800b194:	2000121c 	.word	0x2000121c
 800b198:	20001208 	.word	0x20001208
 800b19c:	20000d30 	.word	0x20000d30
 800b1a0:	e000ed04 	.word	0xe000ed04

0800b1a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b084      	sub	sp, #16
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d018      	beq.n	800b1e8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b1b6:	4b14      	ldr	r3, [pc, #80]	@ (800b208 <vTaskDelay+0x64>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d00b      	beq.n	800b1d6 <vTaskDelay+0x32>
	__asm volatile
 800b1be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1c2:	f383 8811 	msr	BASEPRI, r3
 800b1c6:	f3bf 8f6f 	isb	sy
 800b1ca:	f3bf 8f4f 	dsb	sy
 800b1ce:	60bb      	str	r3, [r7, #8]
}
 800b1d0:	bf00      	nop
 800b1d2:	bf00      	nop
 800b1d4:	e7fd      	b.n	800b1d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b1d6:	f000 f88b 	bl	800b2f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b1da:	2100      	movs	r1, #0
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 fe09 	bl	800bdf4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b1e2:	f000 f893 	bl	800b30c <xTaskResumeAll>
 800b1e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d107      	bne.n	800b1fe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b1ee:	4b07      	ldr	r3, [pc, #28]	@ (800b20c <vTaskDelay+0x68>)
 800b1f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1f4:	601a      	str	r2, [r3, #0]
 800b1f6:	f3bf 8f4f 	dsb	sy
 800b1fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b1fe:	bf00      	nop
 800b200:	3710      	adds	r7, #16
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	20001228 	.word	0x20001228
 800b20c:	e000ed04 	.word	0xe000ed04

0800b210 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b08a      	sub	sp, #40	@ 0x28
 800b214:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b216:	2300      	movs	r3, #0
 800b218:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b21a:	2300      	movs	r3, #0
 800b21c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b21e:	463a      	mov	r2, r7
 800b220:	1d39      	adds	r1, r7, #4
 800b222:	f107 0308 	add.w	r3, r7, #8
 800b226:	4618      	mov	r0, r3
 800b228:	f7fe feb8 	bl	8009f9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b22c:	6839      	ldr	r1, [r7, #0]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	68ba      	ldr	r2, [r7, #8]
 800b232:	9202      	str	r2, [sp, #8]
 800b234:	9301      	str	r3, [sp, #4]
 800b236:	2300      	movs	r3, #0
 800b238:	9300      	str	r3, [sp, #0]
 800b23a:	2300      	movs	r3, #0
 800b23c:	460a      	mov	r2, r1
 800b23e:	4924      	ldr	r1, [pc, #144]	@ (800b2d0 <vTaskStartScheduler+0xc0>)
 800b240:	4824      	ldr	r0, [pc, #144]	@ (800b2d4 <vTaskStartScheduler+0xc4>)
 800b242:	f7ff fdf1 	bl	800ae28 <xTaskCreateStatic>
 800b246:	4603      	mov	r3, r0
 800b248:	4a23      	ldr	r2, [pc, #140]	@ (800b2d8 <vTaskStartScheduler+0xc8>)
 800b24a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b24c:	4b22      	ldr	r3, [pc, #136]	@ (800b2d8 <vTaskStartScheduler+0xc8>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d002      	beq.n	800b25a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b254:	2301      	movs	r3, #1
 800b256:	617b      	str	r3, [r7, #20]
 800b258:	e001      	b.n	800b25e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b25a:	2300      	movs	r3, #0
 800b25c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	2b01      	cmp	r3, #1
 800b262:	d102      	bne.n	800b26a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b264:	f000 fe1a 	bl	800be9c <xTimerCreateTimerTask>
 800b268:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d11b      	bne.n	800b2a8 <vTaskStartScheduler+0x98>
	__asm volatile
 800b270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b274:	f383 8811 	msr	BASEPRI, r3
 800b278:	f3bf 8f6f 	isb	sy
 800b27c:	f3bf 8f4f 	dsb	sy
 800b280:	613b      	str	r3, [r7, #16]
}
 800b282:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b284:	4b15      	ldr	r3, [pc, #84]	@ (800b2dc <vTaskStartScheduler+0xcc>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	3354      	adds	r3, #84	@ 0x54
 800b28a:	4a15      	ldr	r2, [pc, #84]	@ (800b2e0 <vTaskStartScheduler+0xd0>)
 800b28c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b28e:	4b15      	ldr	r3, [pc, #84]	@ (800b2e4 <vTaskStartScheduler+0xd4>)
 800b290:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b294:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b296:	4b14      	ldr	r3, [pc, #80]	@ (800b2e8 <vTaskStartScheduler+0xd8>)
 800b298:	2201      	movs	r2, #1
 800b29a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b29c:	4b13      	ldr	r3, [pc, #76]	@ (800b2ec <vTaskStartScheduler+0xdc>)
 800b29e:	2200      	movs	r2, #0
 800b2a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b2a2:	f001 fa3d 	bl	800c720 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b2a6:	e00f      	b.n	800b2c8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b2ae:	d10b      	bne.n	800b2c8 <vTaskStartScheduler+0xb8>
	__asm volatile
 800b2b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2b4:	f383 8811 	msr	BASEPRI, r3
 800b2b8:	f3bf 8f6f 	isb	sy
 800b2bc:	f3bf 8f4f 	dsb	sy
 800b2c0:	60fb      	str	r3, [r7, #12]
}
 800b2c2:	bf00      	nop
 800b2c4:	bf00      	nop
 800b2c6:	e7fd      	b.n	800b2c4 <vTaskStartScheduler+0xb4>
}
 800b2c8:	bf00      	nop
 800b2ca:	3718      	adds	r7, #24
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	08010a98 	.word	0x08010a98
 800b2d4:	0800b921 	.word	0x0800b921
 800b2d8:	20001224 	.word	0x20001224
 800b2dc:	20000d2c 	.word	0x20000d2c
 800b2e0:	20000064 	.word	0x20000064
 800b2e4:	20001220 	.word	0x20001220
 800b2e8:	2000120c 	.word	0x2000120c
 800b2ec:	20001204 	.word	0x20001204

0800b2f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b2f4:	4b04      	ldr	r3, [pc, #16]	@ (800b308 <vTaskSuspendAll+0x18>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	4a03      	ldr	r2, [pc, #12]	@ (800b308 <vTaskSuspendAll+0x18>)
 800b2fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b2fe:	bf00      	nop
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr
 800b308:	20001228 	.word	0x20001228

0800b30c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b312:	2300      	movs	r3, #0
 800b314:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b316:	2300      	movs	r3, #0
 800b318:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b31a:	4b42      	ldr	r3, [pc, #264]	@ (800b424 <xTaskResumeAll+0x118>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d10b      	bne.n	800b33a <xTaskResumeAll+0x2e>
	__asm volatile
 800b322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b326:	f383 8811 	msr	BASEPRI, r3
 800b32a:	f3bf 8f6f 	isb	sy
 800b32e:	f3bf 8f4f 	dsb	sy
 800b332:	603b      	str	r3, [r7, #0]
}
 800b334:	bf00      	nop
 800b336:	bf00      	nop
 800b338:	e7fd      	b.n	800b336 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b33a:	f001 fa95 	bl	800c868 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b33e:	4b39      	ldr	r3, [pc, #228]	@ (800b424 <xTaskResumeAll+0x118>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	3b01      	subs	r3, #1
 800b344:	4a37      	ldr	r2, [pc, #220]	@ (800b424 <xTaskResumeAll+0x118>)
 800b346:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b348:	4b36      	ldr	r3, [pc, #216]	@ (800b424 <xTaskResumeAll+0x118>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d162      	bne.n	800b416 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b350:	4b35      	ldr	r3, [pc, #212]	@ (800b428 <xTaskResumeAll+0x11c>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d05e      	beq.n	800b416 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b358:	e02f      	b.n	800b3ba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b35a:	4b34      	ldr	r3, [pc, #208]	@ (800b42c <xTaskResumeAll+0x120>)
 800b35c:	68db      	ldr	r3, [r3, #12]
 800b35e:	68db      	ldr	r3, [r3, #12]
 800b360:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	3318      	adds	r3, #24
 800b366:	4618      	mov	r0, r3
 800b368:	f7fe fed6 	bl	800a118 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	3304      	adds	r3, #4
 800b370:	4618      	mov	r0, r3
 800b372:	f7fe fed1 	bl	800a118 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b37a:	4b2d      	ldr	r3, [pc, #180]	@ (800b430 <xTaskResumeAll+0x124>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	429a      	cmp	r2, r3
 800b380:	d903      	bls.n	800b38a <xTaskResumeAll+0x7e>
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b386:	4a2a      	ldr	r2, [pc, #168]	@ (800b430 <xTaskResumeAll+0x124>)
 800b388:	6013      	str	r3, [r2, #0]
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b38e:	4613      	mov	r3, r2
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	4413      	add	r3, r2
 800b394:	009b      	lsls	r3, r3, #2
 800b396:	4a27      	ldr	r2, [pc, #156]	@ (800b434 <xTaskResumeAll+0x128>)
 800b398:	441a      	add	r2, r3
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	3304      	adds	r3, #4
 800b39e:	4619      	mov	r1, r3
 800b3a0:	4610      	mov	r0, r2
 800b3a2:	f7fe fe5c 	bl	800a05e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3aa:	4b23      	ldr	r3, [pc, #140]	@ (800b438 <xTaskResumeAll+0x12c>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d302      	bcc.n	800b3ba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b3b4:	4b21      	ldr	r3, [pc, #132]	@ (800b43c <xTaskResumeAll+0x130>)
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b3ba:	4b1c      	ldr	r3, [pc, #112]	@ (800b42c <xTaskResumeAll+0x120>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d1cb      	bne.n	800b35a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d001      	beq.n	800b3cc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b3c8:	f000 fb66 	bl	800ba98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b3cc:	4b1c      	ldr	r3, [pc, #112]	@ (800b440 <xTaskResumeAll+0x134>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d010      	beq.n	800b3fa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b3d8:	f000 f846 	bl	800b468 <xTaskIncrementTick>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d002      	beq.n	800b3e8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b3e2:	4b16      	ldr	r3, [pc, #88]	@ (800b43c <xTaskResumeAll+0x130>)
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	3b01      	subs	r3, #1
 800b3ec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d1f1      	bne.n	800b3d8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b3f4:	4b12      	ldr	r3, [pc, #72]	@ (800b440 <xTaskResumeAll+0x134>)
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b3fa:	4b10      	ldr	r3, [pc, #64]	@ (800b43c <xTaskResumeAll+0x130>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d009      	beq.n	800b416 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b402:	2301      	movs	r3, #1
 800b404:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b406:	4b0f      	ldr	r3, [pc, #60]	@ (800b444 <xTaskResumeAll+0x138>)
 800b408:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b40c:	601a      	str	r2, [r3, #0]
 800b40e:	f3bf 8f4f 	dsb	sy
 800b412:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b416:	f001 fa59 	bl	800c8cc <vPortExitCritical>

	return xAlreadyYielded;
 800b41a:	68bb      	ldr	r3, [r7, #8]
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3710      	adds	r7, #16
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}
 800b424:	20001228 	.word	0x20001228
 800b428:	20001200 	.word	0x20001200
 800b42c:	200011c0 	.word	0x200011c0
 800b430:	20001208 	.word	0x20001208
 800b434:	20000d30 	.word	0x20000d30
 800b438:	20000d2c 	.word	0x20000d2c
 800b43c:	20001214 	.word	0x20001214
 800b440:	20001210 	.word	0x20001210
 800b444:	e000ed04 	.word	0xe000ed04

0800b448 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b448:	b480      	push	{r7}
 800b44a:	b083      	sub	sp, #12
 800b44c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b44e:	4b05      	ldr	r3, [pc, #20]	@ (800b464 <xTaskGetTickCount+0x1c>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b454:	687b      	ldr	r3, [r7, #4]
}
 800b456:	4618      	mov	r0, r3
 800b458:	370c      	adds	r7, #12
 800b45a:	46bd      	mov	sp, r7
 800b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b460:	4770      	bx	lr
 800b462:	bf00      	nop
 800b464:	20001204 	.word	0x20001204

0800b468 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b086      	sub	sp, #24
 800b46c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b46e:	2300      	movs	r3, #0
 800b470:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b472:	4b4f      	ldr	r3, [pc, #316]	@ (800b5b0 <xTaskIncrementTick+0x148>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	f040 8090 	bne.w	800b59c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b47c:	4b4d      	ldr	r3, [pc, #308]	@ (800b5b4 <xTaskIncrementTick+0x14c>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	3301      	adds	r3, #1
 800b482:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b484:	4a4b      	ldr	r2, [pc, #300]	@ (800b5b4 <xTaskIncrementTick+0x14c>)
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d121      	bne.n	800b4d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b490:	4b49      	ldr	r3, [pc, #292]	@ (800b5b8 <xTaskIncrementTick+0x150>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d00b      	beq.n	800b4b2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b49a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b49e:	f383 8811 	msr	BASEPRI, r3
 800b4a2:	f3bf 8f6f 	isb	sy
 800b4a6:	f3bf 8f4f 	dsb	sy
 800b4aa:	603b      	str	r3, [r7, #0]
}
 800b4ac:	bf00      	nop
 800b4ae:	bf00      	nop
 800b4b0:	e7fd      	b.n	800b4ae <xTaskIncrementTick+0x46>
 800b4b2:	4b41      	ldr	r3, [pc, #260]	@ (800b5b8 <xTaskIncrementTick+0x150>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	60fb      	str	r3, [r7, #12]
 800b4b8:	4b40      	ldr	r3, [pc, #256]	@ (800b5bc <xTaskIncrementTick+0x154>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	4a3e      	ldr	r2, [pc, #248]	@ (800b5b8 <xTaskIncrementTick+0x150>)
 800b4be:	6013      	str	r3, [r2, #0]
 800b4c0:	4a3e      	ldr	r2, [pc, #248]	@ (800b5bc <xTaskIncrementTick+0x154>)
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	6013      	str	r3, [r2, #0]
 800b4c6:	4b3e      	ldr	r3, [pc, #248]	@ (800b5c0 <xTaskIncrementTick+0x158>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	4a3c      	ldr	r2, [pc, #240]	@ (800b5c0 <xTaskIncrementTick+0x158>)
 800b4ce:	6013      	str	r3, [r2, #0]
 800b4d0:	f000 fae2 	bl	800ba98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b4d4:	4b3b      	ldr	r3, [pc, #236]	@ (800b5c4 <xTaskIncrementTick+0x15c>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	693a      	ldr	r2, [r7, #16]
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d349      	bcc.n	800b572 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4de:	4b36      	ldr	r3, [pc, #216]	@ (800b5b8 <xTaskIncrementTick+0x150>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d104      	bne.n	800b4f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4e8:	4b36      	ldr	r3, [pc, #216]	@ (800b5c4 <xTaskIncrementTick+0x15c>)
 800b4ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b4ee:	601a      	str	r2, [r3, #0]
					break;
 800b4f0:	e03f      	b.n	800b572 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4f2:	4b31      	ldr	r3, [pc, #196]	@ (800b5b8 <xTaskIncrementTick+0x150>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	68db      	ldr	r3, [r3, #12]
 800b4f8:	68db      	ldr	r3, [r3, #12]
 800b4fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b502:	693a      	ldr	r2, [r7, #16]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	429a      	cmp	r2, r3
 800b508:	d203      	bcs.n	800b512 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b50a:	4a2e      	ldr	r2, [pc, #184]	@ (800b5c4 <xTaskIncrementTick+0x15c>)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b510:	e02f      	b.n	800b572 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	3304      	adds	r3, #4
 800b516:	4618      	mov	r0, r3
 800b518:	f7fe fdfe 	bl	800a118 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b520:	2b00      	cmp	r3, #0
 800b522:	d004      	beq.n	800b52e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	3318      	adds	r3, #24
 800b528:	4618      	mov	r0, r3
 800b52a:	f7fe fdf5 	bl	800a118 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b532:	4b25      	ldr	r3, [pc, #148]	@ (800b5c8 <xTaskIncrementTick+0x160>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	429a      	cmp	r2, r3
 800b538:	d903      	bls.n	800b542 <xTaskIncrementTick+0xda>
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b53e:	4a22      	ldr	r2, [pc, #136]	@ (800b5c8 <xTaskIncrementTick+0x160>)
 800b540:	6013      	str	r3, [r2, #0]
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b546:	4613      	mov	r3, r2
 800b548:	009b      	lsls	r3, r3, #2
 800b54a:	4413      	add	r3, r2
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	4a1f      	ldr	r2, [pc, #124]	@ (800b5cc <xTaskIncrementTick+0x164>)
 800b550:	441a      	add	r2, r3
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	3304      	adds	r3, #4
 800b556:	4619      	mov	r1, r3
 800b558:	4610      	mov	r0, r2
 800b55a:	f7fe fd80 	bl	800a05e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b562:	4b1b      	ldr	r3, [pc, #108]	@ (800b5d0 <xTaskIncrementTick+0x168>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b568:	429a      	cmp	r2, r3
 800b56a:	d3b8      	bcc.n	800b4de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b56c:	2301      	movs	r3, #1
 800b56e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b570:	e7b5      	b.n	800b4de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b572:	4b17      	ldr	r3, [pc, #92]	@ (800b5d0 <xTaskIncrementTick+0x168>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b578:	4914      	ldr	r1, [pc, #80]	@ (800b5cc <xTaskIncrementTick+0x164>)
 800b57a:	4613      	mov	r3, r2
 800b57c:	009b      	lsls	r3, r3, #2
 800b57e:	4413      	add	r3, r2
 800b580:	009b      	lsls	r3, r3, #2
 800b582:	440b      	add	r3, r1
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	2b01      	cmp	r3, #1
 800b588:	d901      	bls.n	800b58e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b58a:	2301      	movs	r3, #1
 800b58c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b58e:	4b11      	ldr	r3, [pc, #68]	@ (800b5d4 <xTaskIncrementTick+0x16c>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d007      	beq.n	800b5a6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b596:	2301      	movs	r3, #1
 800b598:	617b      	str	r3, [r7, #20]
 800b59a:	e004      	b.n	800b5a6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b59c:	4b0e      	ldr	r3, [pc, #56]	@ (800b5d8 <xTaskIncrementTick+0x170>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	4a0d      	ldr	r2, [pc, #52]	@ (800b5d8 <xTaskIncrementTick+0x170>)
 800b5a4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b5a6:	697b      	ldr	r3, [r7, #20]
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3718      	adds	r7, #24
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}
 800b5b0:	20001228 	.word	0x20001228
 800b5b4:	20001204 	.word	0x20001204
 800b5b8:	200011b8 	.word	0x200011b8
 800b5bc:	200011bc 	.word	0x200011bc
 800b5c0:	20001218 	.word	0x20001218
 800b5c4:	20001220 	.word	0x20001220
 800b5c8:	20001208 	.word	0x20001208
 800b5cc:	20000d30 	.word	0x20000d30
 800b5d0:	20000d2c 	.word	0x20000d2c
 800b5d4:	20001214 	.word	0x20001214
 800b5d8:	20001210 	.word	0x20001210

0800b5dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b085      	sub	sp, #20
 800b5e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b5e2:	4b2b      	ldr	r3, [pc, #172]	@ (800b690 <vTaskSwitchContext+0xb4>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d003      	beq.n	800b5f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b5ea:	4b2a      	ldr	r3, [pc, #168]	@ (800b694 <vTaskSwitchContext+0xb8>)
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b5f0:	e047      	b.n	800b682 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b5f2:	4b28      	ldr	r3, [pc, #160]	@ (800b694 <vTaskSwitchContext+0xb8>)
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5f8:	4b27      	ldr	r3, [pc, #156]	@ (800b698 <vTaskSwitchContext+0xbc>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	60fb      	str	r3, [r7, #12]
 800b5fe:	e011      	b.n	800b624 <vTaskSwitchContext+0x48>
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d10b      	bne.n	800b61e <vTaskSwitchContext+0x42>
	__asm volatile
 800b606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b60a:	f383 8811 	msr	BASEPRI, r3
 800b60e:	f3bf 8f6f 	isb	sy
 800b612:	f3bf 8f4f 	dsb	sy
 800b616:	607b      	str	r3, [r7, #4]
}
 800b618:	bf00      	nop
 800b61a:	bf00      	nop
 800b61c:	e7fd      	b.n	800b61a <vTaskSwitchContext+0x3e>
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	3b01      	subs	r3, #1
 800b622:	60fb      	str	r3, [r7, #12]
 800b624:	491d      	ldr	r1, [pc, #116]	@ (800b69c <vTaskSwitchContext+0xc0>)
 800b626:	68fa      	ldr	r2, [r7, #12]
 800b628:	4613      	mov	r3, r2
 800b62a:	009b      	lsls	r3, r3, #2
 800b62c:	4413      	add	r3, r2
 800b62e:	009b      	lsls	r3, r3, #2
 800b630:	440b      	add	r3, r1
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d0e3      	beq.n	800b600 <vTaskSwitchContext+0x24>
 800b638:	68fa      	ldr	r2, [r7, #12]
 800b63a:	4613      	mov	r3, r2
 800b63c:	009b      	lsls	r3, r3, #2
 800b63e:	4413      	add	r3, r2
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	4a16      	ldr	r2, [pc, #88]	@ (800b69c <vTaskSwitchContext+0xc0>)
 800b644:	4413      	add	r3, r2
 800b646:	60bb      	str	r3, [r7, #8]
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	685a      	ldr	r2, [r3, #4]
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	605a      	str	r2, [r3, #4]
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	685a      	ldr	r2, [r3, #4]
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	3308      	adds	r3, #8
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d104      	bne.n	800b668 <vTaskSwitchContext+0x8c>
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	685a      	ldr	r2, [r3, #4]
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	605a      	str	r2, [r3, #4]
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	68db      	ldr	r3, [r3, #12]
 800b66e:	4a0c      	ldr	r2, [pc, #48]	@ (800b6a0 <vTaskSwitchContext+0xc4>)
 800b670:	6013      	str	r3, [r2, #0]
 800b672:	4a09      	ldr	r2, [pc, #36]	@ (800b698 <vTaskSwitchContext+0xbc>)
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b678:	4b09      	ldr	r3, [pc, #36]	@ (800b6a0 <vTaskSwitchContext+0xc4>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	3354      	adds	r3, #84	@ 0x54
 800b67e:	4a09      	ldr	r2, [pc, #36]	@ (800b6a4 <vTaskSwitchContext+0xc8>)
 800b680:	6013      	str	r3, [r2, #0]
}
 800b682:	bf00      	nop
 800b684:	3714      	adds	r7, #20
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr
 800b68e:	bf00      	nop
 800b690:	20001228 	.word	0x20001228
 800b694:	20001214 	.word	0x20001214
 800b698:	20001208 	.word	0x20001208
 800b69c:	20000d30 	.word	0x20000d30
 800b6a0:	20000d2c 	.word	0x20000d2c
 800b6a4:	20000064 	.word	0x20000064

0800b6a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d10b      	bne.n	800b6d0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b6b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6bc:	f383 8811 	msr	BASEPRI, r3
 800b6c0:	f3bf 8f6f 	isb	sy
 800b6c4:	f3bf 8f4f 	dsb	sy
 800b6c8:	60fb      	str	r3, [r7, #12]
}
 800b6ca:	bf00      	nop
 800b6cc:	bf00      	nop
 800b6ce:	e7fd      	b.n	800b6cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b6d0:	4b07      	ldr	r3, [pc, #28]	@ (800b6f0 <vTaskPlaceOnEventList+0x48>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	3318      	adds	r3, #24
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f7fe fce4 	bl	800a0a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b6de:	2101      	movs	r1, #1
 800b6e0:	6838      	ldr	r0, [r7, #0]
 800b6e2:	f000 fb87 	bl	800bdf4 <prvAddCurrentTaskToDelayedList>
}
 800b6e6:	bf00      	nop
 800b6e8:	3710      	adds	r7, #16
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	20000d2c 	.word	0x20000d2c

0800b6f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b086      	sub	sp, #24
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d10b      	bne.n	800b71e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b70a:	f383 8811 	msr	BASEPRI, r3
 800b70e:	f3bf 8f6f 	isb	sy
 800b712:	f3bf 8f4f 	dsb	sy
 800b716:	617b      	str	r3, [r7, #20]
}
 800b718:	bf00      	nop
 800b71a:	bf00      	nop
 800b71c:	e7fd      	b.n	800b71a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b71e:	4b0a      	ldr	r3, [pc, #40]	@ (800b748 <vTaskPlaceOnEventListRestricted+0x54>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	3318      	adds	r3, #24
 800b724:	4619      	mov	r1, r3
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	f7fe fc99 	bl	800a05e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d002      	beq.n	800b738 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b732:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b736:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b738:	6879      	ldr	r1, [r7, #4]
 800b73a:	68b8      	ldr	r0, [r7, #8]
 800b73c:	f000 fb5a 	bl	800bdf4 <prvAddCurrentTaskToDelayedList>
	}
 800b740:	bf00      	nop
 800b742:	3718      	adds	r7, #24
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	20000d2c 	.word	0x20000d2c

0800b74c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b086      	sub	sp, #24
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	68db      	ldr	r3, [r3, #12]
 800b758:	68db      	ldr	r3, [r3, #12]
 800b75a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d10b      	bne.n	800b77a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b766:	f383 8811 	msr	BASEPRI, r3
 800b76a:	f3bf 8f6f 	isb	sy
 800b76e:	f3bf 8f4f 	dsb	sy
 800b772:	60fb      	str	r3, [r7, #12]
}
 800b774:	bf00      	nop
 800b776:	bf00      	nop
 800b778:	e7fd      	b.n	800b776 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	3318      	adds	r3, #24
 800b77e:	4618      	mov	r0, r3
 800b780:	f7fe fcca 	bl	800a118 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b784:	4b1d      	ldr	r3, [pc, #116]	@ (800b7fc <xTaskRemoveFromEventList+0xb0>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d11d      	bne.n	800b7c8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	3304      	adds	r3, #4
 800b790:	4618      	mov	r0, r3
 800b792:	f7fe fcc1 	bl	800a118 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b79a:	4b19      	ldr	r3, [pc, #100]	@ (800b800 <xTaskRemoveFromEventList+0xb4>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d903      	bls.n	800b7aa <xTaskRemoveFromEventList+0x5e>
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7a6:	4a16      	ldr	r2, [pc, #88]	@ (800b800 <xTaskRemoveFromEventList+0xb4>)
 800b7a8:	6013      	str	r3, [r2, #0]
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7ae:	4613      	mov	r3, r2
 800b7b0:	009b      	lsls	r3, r3, #2
 800b7b2:	4413      	add	r3, r2
 800b7b4:	009b      	lsls	r3, r3, #2
 800b7b6:	4a13      	ldr	r2, [pc, #76]	@ (800b804 <xTaskRemoveFromEventList+0xb8>)
 800b7b8:	441a      	add	r2, r3
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	3304      	adds	r3, #4
 800b7be:	4619      	mov	r1, r3
 800b7c0:	4610      	mov	r0, r2
 800b7c2:	f7fe fc4c 	bl	800a05e <vListInsertEnd>
 800b7c6:	e005      	b.n	800b7d4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	3318      	adds	r3, #24
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	480e      	ldr	r0, [pc, #56]	@ (800b808 <xTaskRemoveFromEventList+0xbc>)
 800b7d0:	f7fe fc45 	bl	800a05e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7d8:	4b0c      	ldr	r3, [pc, #48]	@ (800b80c <xTaskRemoveFromEventList+0xc0>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d905      	bls.n	800b7ee <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b7e6:	4b0a      	ldr	r3, [pc, #40]	@ (800b810 <xTaskRemoveFromEventList+0xc4>)
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	601a      	str	r2, [r3, #0]
 800b7ec:	e001      	b.n	800b7f2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b7f2:	697b      	ldr	r3, [r7, #20]
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3718      	adds	r7, #24
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}
 800b7fc:	20001228 	.word	0x20001228
 800b800:	20001208 	.word	0x20001208
 800b804:	20000d30 	.word	0x20000d30
 800b808:	200011c0 	.word	0x200011c0
 800b80c:	20000d2c 	.word	0x20000d2c
 800b810:	20001214 	.word	0x20001214

0800b814 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b814:	b480      	push	{r7}
 800b816:	b083      	sub	sp, #12
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b81c:	4b06      	ldr	r3, [pc, #24]	@ (800b838 <vTaskInternalSetTimeOutState+0x24>)
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b824:	4b05      	ldr	r3, [pc, #20]	@ (800b83c <vTaskInternalSetTimeOutState+0x28>)
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	605a      	str	r2, [r3, #4]
}
 800b82c:	bf00      	nop
 800b82e:	370c      	adds	r7, #12
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr
 800b838:	20001218 	.word	0x20001218
 800b83c:	20001204 	.word	0x20001204

0800b840 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b088      	sub	sp, #32
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d10b      	bne.n	800b868 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b854:	f383 8811 	msr	BASEPRI, r3
 800b858:	f3bf 8f6f 	isb	sy
 800b85c:	f3bf 8f4f 	dsb	sy
 800b860:	613b      	str	r3, [r7, #16]
}
 800b862:	bf00      	nop
 800b864:	bf00      	nop
 800b866:	e7fd      	b.n	800b864 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d10b      	bne.n	800b886 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b86e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b872:	f383 8811 	msr	BASEPRI, r3
 800b876:	f3bf 8f6f 	isb	sy
 800b87a:	f3bf 8f4f 	dsb	sy
 800b87e:	60fb      	str	r3, [r7, #12]
}
 800b880:	bf00      	nop
 800b882:	bf00      	nop
 800b884:	e7fd      	b.n	800b882 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b886:	f000 ffef 	bl	800c868 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b88a:	4b1d      	ldr	r3, [pc, #116]	@ (800b900 <xTaskCheckForTimeOut+0xc0>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	69ba      	ldr	r2, [r7, #24]
 800b896:	1ad3      	subs	r3, r2, r3
 800b898:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b8a2:	d102      	bne.n	800b8aa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	61fb      	str	r3, [r7, #28]
 800b8a8:	e023      	b.n	800b8f2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681a      	ldr	r2, [r3, #0]
 800b8ae:	4b15      	ldr	r3, [pc, #84]	@ (800b904 <xTaskCheckForTimeOut+0xc4>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	429a      	cmp	r2, r3
 800b8b4:	d007      	beq.n	800b8c6 <xTaskCheckForTimeOut+0x86>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	69ba      	ldr	r2, [r7, #24]
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d302      	bcc.n	800b8c6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	61fb      	str	r3, [r7, #28]
 800b8c4:	e015      	b.n	800b8f2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	697a      	ldr	r2, [r7, #20]
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d20b      	bcs.n	800b8e8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	1ad2      	subs	r2, r2, r3
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f7ff ff99 	bl	800b814 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	61fb      	str	r3, [r7, #28]
 800b8e6:	e004      	b.n	800b8f2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b8f2:	f000 ffeb 	bl	800c8cc <vPortExitCritical>

	return xReturn;
 800b8f6:	69fb      	ldr	r3, [r7, #28]
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3720      	adds	r7, #32
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	20001204 	.word	0x20001204
 800b904:	20001218 	.word	0x20001218

0800b908 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b908:	b480      	push	{r7}
 800b90a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b90c:	4b03      	ldr	r3, [pc, #12]	@ (800b91c <vTaskMissedYield+0x14>)
 800b90e:	2201      	movs	r2, #1
 800b910:	601a      	str	r2, [r3, #0]
}
 800b912:	bf00      	nop
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr
 800b91c:	20001214 	.word	0x20001214

0800b920 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b928:	f000 f852 	bl	800b9d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b92c:	4b06      	ldr	r3, [pc, #24]	@ (800b948 <prvIdleTask+0x28>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	2b01      	cmp	r3, #1
 800b932:	d9f9      	bls.n	800b928 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b934:	4b05      	ldr	r3, [pc, #20]	@ (800b94c <prvIdleTask+0x2c>)
 800b936:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b93a:	601a      	str	r2, [r3, #0]
 800b93c:	f3bf 8f4f 	dsb	sy
 800b940:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b944:	e7f0      	b.n	800b928 <prvIdleTask+0x8>
 800b946:	bf00      	nop
 800b948:	20000d30 	.word	0x20000d30
 800b94c:	e000ed04 	.word	0xe000ed04

0800b950 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b956:	2300      	movs	r3, #0
 800b958:	607b      	str	r3, [r7, #4]
 800b95a:	e00c      	b.n	800b976 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b95c:	687a      	ldr	r2, [r7, #4]
 800b95e:	4613      	mov	r3, r2
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	4413      	add	r3, r2
 800b964:	009b      	lsls	r3, r3, #2
 800b966:	4a12      	ldr	r2, [pc, #72]	@ (800b9b0 <prvInitialiseTaskLists+0x60>)
 800b968:	4413      	add	r3, r2
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7fe fb4a 	bl	800a004 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	3301      	adds	r3, #1
 800b974:	607b      	str	r3, [r7, #4]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2b37      	cmp	r3, #55	@ 0x37
 800b97a:	d9ef      	bls.n	800b95c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b97c:	480d      	ldr	r0, [pc, #52]	@ (800b9b4 <prvInitialiseTaskLists+0x64>)
 800b97e:	f7fe fb41 	bl	800a004 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b982:	480d      	ldr	r0, [pc, #52]	@ (800b9b8 <prvInitialiseTaskLists+0x68>)
 800b984:	f7fe fb3e 	bl	800a004 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b988:	480c      	ldr	r0, [pc, #48]	@ (800b9bc <prvInitialiseTaskLists+0x6c>)
 800b98a:	f7fe fb3b 	bl	800a004 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b98e:	480c      	ldr	r0, [pc, #48]	@ (800b9c0 <prvInitialiseTaskLists+0x70>)
 800b990:	f7fe fb38 	bl	800a004 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b994:	480b      	ldr	r0, [pc, #44]	@ (800b9c4 <prvInitialiseTaskLists+0x74>)
 800b996:	f7fe fb35 	bl	800a004 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b99a:	4b0b      	ldr	r3, [pc, #44]	@ (800b9c8 <prvInitialiseTaskLists+0x78>)
 800b99c:	4a05      	ldr	r2, [pc, #20]	@ (800b9b4 <prvInitialiseTaskLists+0x64>)
 800b99e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b9a0:	4b0a      	ldr	r3, [pc, #40]	@ (800b9cc <prvInitialiseTaskLists+0x7c>)
 800b9a2:	4a05      	ldr	r2, [pc, #20]	@ (800b9b8 <prvInitialiseTaskLists+0x68>)
 800b9a4:	601a      	str	r2, [r3, #0]
}
 800b9a6:	bf00      	nop
 800b9a8:	3708      	adds	r7, #8
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	20000d30 	.word	0x20000d30
 800b9b4:	20001190 	.word	0x20001190
 800b9b8:	200011a4 	.word	0x200011a4
 800b9bc:	200011c0 	.word	0x200011c0
 800b9c0:	200011d4 	.word	0x200011d4
 800b9c4:	200011ec 	.word	0x200011ec
 800b9c8:	200011b8 	.word	0x200011b8
 800b9cc:	200011bc 	.word	0x200011bc

0800b9d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b9d6:	e019      	b.n	800ba0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b9d8:	f000 ff46 	bl	800c868 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9dc:	4b10      	ldr	r3, [pc, #64]	@ (800ba20 <prvCheckTasksWaitingTermination+0x50>)
 800b9de:	68db      	ldr	r3, [r3, #12]
 800b9e0:	68db      	ldr	r3, [r3, #12]
 800b9e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	3304      	adds	r3, #4
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7fe fb95 	bl	800a118 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b9ee:	4b0d      	ldr	r3, [pc, #52]	@ (800ba24 <prvCheckTasksWaitingTermination+0x54>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	3b01      	subs	r3, #1
 800b9f4:	4a0b      	ldr	r2, [pc, #44]	@ (800ba24 <prvCheckTasksWaitingTermination+0x54>)
 800b9f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b9f8:	4b0b      	ldr	r3, [pc, #44]	@ (800ba28 <prvCheckTasksWaitingTermination+0x58>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	3b01      	subs	r3, #1
 800b9fe:	4a0a      	ldr	r2, [pc, #40]	@ (800ba28 <prvCheckTasksWaitingTermination+0x58>)
 800ba00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ba02:	f000 ff63 	bl	800c8cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 f810 	bl	800ba2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba0c:	4b06      	ldr	r3, [pc, #24]	@ (800ba28 <prvCheckTasksWaitingTermination+0x58>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d1e1      	bne.n	800b9d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ba14:	bf00      	nop
 800ba16:	bf00      	nop
 800ba18:	3708      	adds	r7, #8
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	200011d4 	.word	0x200011d4
 800ba24:	20001200 	.word	0x20001200
 800ba28:	200011e8 	.word	0x200011e8

0800ba2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	3354      	adds	r3, #84	@ 0x54
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f002 f8d1 	bl	800dbe0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d108      	bne.n	800ba5a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f001 f8fb 	bl	800cc48 <vPortFree>
				vPortFree( pxTCB );
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f001 f8f8 	bl	800cc48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ba58:	e019      	b.n	800ba8e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ba60:	2b01      	cmp	r3, #1
 800ba62:	d103      	bne.n	800ba6c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f001 f8ef 	bl	800cc48 <vPortFree>
	}
 800ba6a:	e010      	b.n	800ba8e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ba72:	2b02      	cmp	r3, #2
 800ba74:	d00b      	beq.n	800ba8e <prvDeleteTCB+0x62>
	__asm volatile
 800ba76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba7a:	f383 8811 	msr	BASEPRI, r3
 800ba7e:	f3bf 8f6f 	isb	sy
 800ba82:	f3bf 8f4f 	dsb	sy
 800ba86:	60fb      	str	r3, [r7, #12]
}
 800ba88:	bf00      	nop
 800ba8a:	bf00      	nop
 800ba8c:	e7fd      	b.n	800ba8a <prvDeleteTCB+0x5e>
	}
 800ba8e:	bf00      	nop
 800ba90:	3710      	adds	r7, #16
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}
	...

0800ba98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba9e:	4b0c      	ldr	r3, [pc, #48]	@ (800bad0 <prvResetNextTaskUnblockTime+0x38>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d104      	bne.n	800bab2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800baa8:	4b0a      	ldr	r3, [pc, #40]	@ (800bad4 <prvResetNextTaskUnblockTime+0x3c>)
 800baaa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800baae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bab0:	e008      	b.n	800bac4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bab2:	4b07      	ldr	r3, [pc, #28]	@ (800bad0 <prvResetNextTaskUnblockTime+0x38>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	68db      	ldr	r3, [r3, #12]
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	4a04      	ldr	r2, [pc, #16]	@ (800bad4 <prvResetNextTaskUnblockTime+0x3c>)
 800bac2:	6013      	str	r3, [r2, #0]
}
 800bac4:	bf00      	nop
 800bac6:	370c      	adds	r7, #12
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr
 800bad0:	200011b8 	.word	0x200011b8
 800bad4:	20001220 	.word	0x20001220

0800bad8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bad8:	b480      	push	{r7}
 800bada:	b083      	sub	sp, #12
 800badc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bade:	4b0b      	ldr	r3, [pc, #44]	@ (800bb0c <xTaskGetSchedulerState+0x34>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d102      	bne.n	800baec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bae6:	2301      	movs	r3, #1
 800bae8:	607b      	str	r3, [r7, #4]
 800baea:	e008      	b.n	800bafe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800baec:	4b08      	ldr	r3, [pc, #32]	@ (800bb10 <xTaskGetSchedulerState+0x38>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d102      	bne.n	800bafa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800baf4:	2302      	movs	r3, #2
 800baf6:	607b      	str	r3, [r7, #4]
 800baf8:	e001      	b.n	800bafe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bafa:	2300      	movs	r3, #0
 800bafc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bafe:	687b      	ldr	r3, [r7, #4]
	}
 800bb00:	4618      	mov	r0, r3
 800bb02:	370c      	adds	r7, #12
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr
 800bb0c:	2000120c 	.word	0x2000120c
 800bb10:	20001228 	.word	0x20001228

0800bb14 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bb20:	2300      	movs	r3, #0
 800bb22:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d051      	beq.n	800bbce <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb2e:	4b2a      	ldr	r3, [pc, #168]	@ (800bbd8 <xTaskPriorityInherit+0xc4>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d241      	bcs.n	800bbbc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	699b      	ldr	r3, [r3, #24]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	db06      	blt.n	800bb4e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb40:	4b25      	ldr	r3, [pc, #148]	@ (800bbd8 <xTaskPriorityInherit+0xc4>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb46:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	6959      	ldr	r1, [r3, #20]
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb56:	4613      	mov	r3, r2
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	4413      	add	r3, r2
 800bb5c:	009b      	lsls	r3, r3, #2
 800bb5e:	4a1f      	ldr	r2, [pc, #124]	@ (800bbdc <xTaskPriorityInherit+0xc8>)
 800bb60:	4413      	add	r3, r2
 800bb62:	4299      	cmp	r1, r3
 800bb64:	d122      	bne.n	800bbac <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	3304      	adds	r3, #4
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7fe fad4 	bl	800a118 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bb70:	4b19      	ldr	r3, [pc, #100]	@ (800bbd8 <xTaskPriorityInherit+0xc4>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb7e:	4b18      	ldr	r3, [pc, #96]	@ (800bbe0 <xTaskPriorityInherit+0xcc>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d903      	bls.n	800bb8e <xTaskPriorityInherit+0x7a>
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb8a:	4a15      	ldr	r2, [pc, #84]	@ (800bbe0 <xTaskPriorityInherit+0xcc>)
 800bb8c:	6013      	str	r3, [r2, #0]
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb92:	4613      	mov	r3, r2
 800bb94:	009b      	lsls	r3, r3, #2
 800bb96:	4413      	add	r3, r2
 800bb98:	009b      	lsls	r3, r3, #2
 800bb9a:	4a10      	ldr	r2, [pc, #64]	@ (800bbdc <xTaskPriorityInherit+0xc8>)
 800bb9c:	441a      	add	r2, r3
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	3304      	adds	r3, #4
 800bba2:	4619      	mov	r1, r3
 800bba4:	4610      	mov	r0, r2
 800bba6:	f7fe fa5a 	bl	800a05e <vListInsertEnd>
 800bbaa:	e004      	b.n	800bbb6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bbac:	4b0a      	ldr	r3, [pc, #40]	@ (800bbd8 <xTaskPriorityInherit+0xc4>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	60fb      	str	r3, [r7, #12]
 800bbba:	e008      	b.n	800bbce <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bbc0:	4b05      	ldr	r3, [pc, #20]	@ (800bbd8 <xTaskPriorityInherit+0xc4>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d201      	bcs.n	800bbce <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bbce:	68fb      	ldr	r3, [r7, #12]
	}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3710      	adds	r7, #16
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	20000d2c 	.word	0x20000d2c
 800bbdc:	20000d30 	.word	0x20000d30
 800bbe0:	20001208 	.word	0x20001208

0800bbe4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b086      	sub	sp, #24
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d058      	beq.n	800bcac <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bbfa:	4b2f      	ldr	r3, [pc, #188]	@ (800bcb8 <xTaskPriorityDisinherit+0xd4>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	693a      	ldr	r2, [r7, #16]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d00b      	beq.n	800bc1c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bc04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc08:	f383 8811 	msr	BASEPRI, r3
 800bc0c:	f3bf 8f6f 	isb	sy
 800bc10:	f3bf 8f4f 	dsb	sy
 800bc14:	60fb      	str	r3, [r7, #12]
}
 800bc16:	bf00      	nop
 800bc18:	bf00      	nop
 800bc1a:	e7fd      	b.n	800bc18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d10b      	bne.n	800bc3c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bc24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc28:	f383 8811 	msr	BASEPRI, r3
 800bc2c:	f3bf 8f6f 	isb	sy
 800bc30:	f3bf 8f4f 	dsb	sy
 800bc34:	60bb      	str	r3, [r7, #8]
}
 800bc36:	bf00      	nop
 800bc38:	bf00      	nop
 800bc3a:	e7fd      	b.n	800bc38 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc40:	1e5a      	subs	r2, r3, #1
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d02c      	beq.n	800bcac <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d128      	bne.n	800bcac <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	3304      	adds	r3, #4
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f7fe fa5a 	bl	800a118 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc70:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc7c:	4b0f      	ldr	r3, [pc, #60]	@ (800bcbc <xTaskPriorityDisinherit+0xd8>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d903      	bls.n	800bc8c <xTaskPriorityDisinherit+0xa8>
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc88:	4a0c      	ldr	r2, [pc, #48]	@ (800bcbc <xTaskPriorityDisinherit+0xd8>)
 800bc8a:	6013      	str	r3, [r2, #0]
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc90:	4613      	mov	r3, r2
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	4413      	add	r3, r2
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	4a09      	ldr	r2, [pc, #36]	@ (800bcc0 <xTaskPriorityDisinherit+0xdc>)
 800bc9a:	441a      	add	r2, r3
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	3304      	adds	r3, #4
 800bca0:	4619      	mov	r1, r3
 800bca2:	4610      	mov	r0, r2
 800bca4:	f7fe f9db 	bl	800a05e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bca8:	2301      	movs	r3, #1
 800bcaa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bcac:	697b      	ldr	r3, [r7, #20]
	}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3718      	adds	r7, #24
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	20000d2c 	.word	0x20000d2c
 800bcbc:	20001208 	.word	0x20001208
 800bcc0:	20000d30 	.word	0x20000d30

0800bcc4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b088      	sub	sp, #32
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d06c      	beq.n	800bdb6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bcdc:	69bb      	ldr	r3, [r7, #24]
 800bcde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d10b      	bne.n	800bcfc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800bce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bce8:	f383 8811 	msr	BASEPRI, r3
 800bcec:	f3bf 8f6f 	isb	sy
 800bcf0:	f3bf 8f4f 	dsb	sy
 800bcf4:	60fb      	str	r3, [r7, #12]
}
 800bcf6:	bf00      	nop
 800bcf8:	bf00      	nop
 800bcfa:	e7fd      	b.n	800bcf8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bcfc:	69bb      	ldr	r3, [r7, #24]
 800bcfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd00:	683a      	ldr	r2, [r7, #0]
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d902      	bls.n	800bd0c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	61fb      	str	r3, [r7, #28]
 800bd0a:	e002      	b.n	800bd12 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bd0c:	69bb      	ldr	r3, [r7, #24]
 800bd0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd10:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd16:	69fa      	ldr	r2, [r7, #28]
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d04c      	beq.n	800bdb6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bd1c:	69bb      	ldr	r3, [r7, #24]
 800bd1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd20:	697a      	ldr	r2, [r7, #20]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d147      	bne.n	800bdb6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bd26:	4b26      	ldr	r3, [pc, #152]	@ (800bdc0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	69ba      	ldr	r2, [r7, #24]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d10b      	bne.n	800bd48 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800bd30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd34:	f383 8811 	msr	BASEPRI, r3
 800bd38:	f3bf 8f6f 	isb	sy
 800bd3c:	f3bf 8f4f 	dsb	sy
 800bd40:	60bb      	str	r3, [r7, #8]
}
 800bd42:	bf00      	nop
 800bd44:	bf00      	nop
 800bd46:	e7fd      	b.n	800bd44 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bd48:	69bb      	ldr	r3, [r7, #24]
 800bd4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd4c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bd4e:	69bb      	ldr	r3, [r7, #24]
 800bd50:	69fa      	ldr	r2, [r7, #28]
 800bd52:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bd54:	69bb      	ldr	r3, [r7, #24]
 800bd56:	699b      	ldr	r3, [r3, #24]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	db04      	blt.n	800bd66 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd5c:	69fb      	ldr	r3, [r7, #28]
 800bd5e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bd62:	69bb      	ldr	r3, [r7, #24]
 800bd64:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bd66:	69bb      	ldr	r3, [r7, #24]
 800bd68:	6959      	ldr	r1, [r3, #20]
 800bd6a:	693a      	ldr	r2, [r7, #16]
 800bd6c:	4613      	mov	r3, r2
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	4413      	add	r3, r2
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	4a13      	ldr	r2, [pc, #76]	@ (800bdc4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bd76:	4413      	add	r3, r2
 800bd78:	4299      	cmp	r1, r3
 800bd7a:	d11c      	bne.n	800bdb6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd7c:	69bb      	ldr	r3, [r7, #24]
 800bd7e:	3304      	adds	r3, #4
 800bd80:	4618      	mov	r0, r3
 800bd82:	f7fe f9c9 	bl	800a118 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bd86:	69bb      	ldr	r3, [r7, #24]
 800bd88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd8a:	4b0f      	ldr	r3, [pc, #60]	@ (800bdc8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d903      	bls.n	800bd9a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800bd92:	69bb      	ldr	r3, [r7, #24]
 800bd94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd96:	4a0c      	ldr	r2, [pc, #48]	@ (800bdc8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bd98:	6013      	str	r3, [r2, #0]
 800bd9a:	69bb      	ldr	r3, [r7, #24]
 800bd9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd9e:	4613      	mov	r3, r2
 800bda0:	009b      	lsls	r3, r3, #2
 800bda2:	4413      	add	r3, r2
 800bda4:	009b      	lsls	r3, r3, #2
 800bda6:	4a07      	ldr	r2, [pc, #28]	@ (800bdc4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bda8:	441a      	add	r2, r3
 800bdaa:	69bb      	ldr	r3, [r7, #24]
 800bdac:	3304      	adds	r3, #4
 800bdae:	4619      	mov	r1, r3
 800bdb0:	4610      	mov	r0, r2
 800bdb2:	f7fe f954 	bl	800a05e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bdb6:	bf00      	nop
 800bdb8:	3720      	adds	r7, #32
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}
 800bdbe:	bf00      	nop
 800bdc0:	20000d2c 	.word	0x20000d2c
 800bdc4:	20000d30 	.word	0x20000d30
 800bdc8:	20001208 	.word	0x20001208

0800bdcc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bdcc:	b480      	push	{r7}
 800bdce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bdd0:	4b07      	ldr	r3, [pc, #28]	@ (800bdf0 <pvTaskIncrementMutexHeldCount+0x24>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d004      	beq.n	800bde2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bdd8:	4b05      	ldr	r3, [pc, #20]	@ (800bdf0 <pvTaskIncrementMutexHeldCount+0x24>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bdde:	3201      	adds	r2, #1
 800bde0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800bde2:	4b03      	ldr	r3, [pc, #12]	@ (800bdf0 <pvTaskIncrementMutexHeldCount+0x24>)
 800bde4:	681b      	ldr	r3, [r3, #0]
	}
 800bde6:	4618      	mov	r0, r3
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr
 800bdf0:	20000d2c 	.word	0x20000d2c

0800bdf4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b084      	sub	sp, #16
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
 800bdfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bdfe:	4b21      	ldr	r3, [pc, #132]	@ (800be84 <prvAddCurrentTaskToDelayedList+0x90>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be04:	4b20      	ldr	r3, [pc, #128]	@ (800be88 <prvAddCurrentTaskToDelayedList+0x94>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	3304      	adds	r3, #4
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7fe f984 	bl	800a118 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be16:	d10a      	bne.n	800be2e <prvAddCurrentTaskToDelayedList+0x3a>
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d007      	beq.n	800be2e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be1e:	4b1a      	ldr	r3, [pc, #104]	@ (800be88 <prvAddCurrentTaskToDelayedList+0x94>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	3304      	adds	r3, #4
 800be24:	4619      	mov	r1, r3
 800be26:	4819      	ldr	r0, [pc, #100]	@ (800be8c <prvAddCurrentTaskToDelayedList+0x98>)
 800be28:	f7fe f919 	bl	800a05e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800be2c:	e026      	b.n	800be7c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800be2e:	68fa      	ldr	r2, [r7, #12]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	4413      	add	r3, r2
 800be34:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800be36:	4b14      	ldr	r3, [pc, #80]	@ (800be88 <prvAddCurrentTaskToDelayedList+0x94>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	68ba      	ldr	r2, [r7, #8]
 800be3c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800be3e:	68ba      	ldr	r2, [r7, #8]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	429a      	cmp	r2, r3
 800be44:	d209      	bcs.n	800be5a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be46:	4b12      	ldr	r3, [pc, #72]	@ (800be90 <prvAddCurrentTaskToDelayedList+0x9c>)
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	4b0f      	ldr	r3, [pc, #60]	@ (800be88 <prvAddCurrentTaskToDelayedList+0x94>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	3304      	adds	r3, #4
 800be50:	4619      	mov	r1, r3
 800be52:	4610      	mov	r0, r2
 800be54:	f7fe f927 	bl	800a0a6 <vListInsert>
}
 800be58:	e010      	b.n	800be7c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be5a:	4b0e      	ldr	r3, [pc, #56]	@ (800be94 <prvAddCurrentTaskToDelayedList+0xa0>)
 800be5c:	681a      	ldr	r2, [r3, #0]
 800be5e:	4b0a      	ldr	r3, [pc, #40]	@ (800be88 <prvAddCurrentTaskToDelayedList+0x94>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	3304      	adds	r3, #4
 800be64:	4619      	mov	r1, r3
 800be66:	4610      	mov	r0, r2
 800be68:	f7fe f91d 	bl	800a0a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800be6c:	4b0a      	ldr	r3, [pc, #40]	@ (800be98 <prvAddCurrentTaskToDelayedList+0xa4>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	68ba      	ldr	r2, [r7, #8]
 800be72:	429a      	cmp	r2, r3
 800be74:	d202      	bcs.n	800be7c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800be76:	4a08      	ldr	r2, [pc, #32]	@ (800be98 <prvAddCurrentTaskToDelayedList+0xa4>)
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	6013      	str	r3, [r2, #0]
}
 800be7c:	bf00      	nop
 800be7e:	3710      	adds	r7, #16
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}
 800be84:	20001204 	.word	0x20001204
 800be88:	20000d2c 	.word	0x20000d2c
 800be8c:	200011ec 	.word	0x200011ec
 800be90:	200011bc 	.word	0x200011bc
 800be94:	200011b8 	.word	0x200011b8
 800be98:	20001220 	.word	0x20001220

0800be9c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b08a      	sub	sp, #40	@ 0x28
 800bea0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bea2:	2300      	movs	r3, #0
 800bea4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bea6:	f000 fb71 	bl	800c58c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800beaa:	4b1d      	ldr	r3, [pc, #116]	@ (800bf20 <xTimerCreateTimerTask+0x84>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d021      	beq.n	800bef6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800beb2:	2300      	movs	r3, #0
 800beb4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800beb6:	2300      	movs	r3, #0
 800beb8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800beba:	1d3a      	adds	r2, r7, #4
 800bebc:	f107 0108 	add.w	r1, r7, #8
 800bec0:	f107 030c 	add.w	r3, r7, #12
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7fe f883 	bl	8009fd0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800beca:	6879      	ldr	r1, [r7, #4]
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	68fa      	ldr	r2, [r7, #12]
 800bed0:	9202      	str	r2, [sp, #8]
 800bed2:	9301      	str	r3, [sp, #4]
 800bed4:	2319      	movs	r3, #25
 800bed6:	9300      	str	r3, [sp, #0]
 800bed8:	2300      	movs	r3, #0
 800beda:	460a      	mov	r2, r1
 800bedc:	4911      	ldr	r1, [pc, #68]	@ (800bf24 <xTimerCreateTimerTask+0x88>)
 800bede:	4812      	ldr	r0, [pc, #72]	@ (800bf28 <xTimerCreateTimerTask+0x8c>)
 800bee0:	f7fe ffa2 	bl	800ae28 <xTaskCreateStatic>
 800bee4:	4603      	mov	r3, r0
 800bee6:	4a11      	ldr	r2, [pc, #68]	@ (800bf2c <xTimerCreateTimerTask+0x90>)
 800bee8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800beea:	4b10      	ldr	r3, [pc, #64]	@ (800bf2c <xTimerCreateTimerTask+0x90>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d001      	beq.n	800bef6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bef2:	2301      	movs	r3, #1
 800bef4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d10b      	bne.n	800bf14 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800befc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf00:	f383 8811 	msr	BASEPRI, r3
 800bf04:	f3bf 8f6f 	isb	sy
 800bf08:	f3bf 8f4f 	dsb	sy
 800bf0c:	613b      	str	r3, [r7, #16]
}
 800bf0e:	bf00      	nop
 800bf10:	bf00      	nop
 800bf12:	e7fd      	b.n	800bf10 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bf14:	697b      	ldr	r3, [r7, #20]
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3718      	adds	r7, #24
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	2000125c 	.word	0x2000125c
 800bf24:	08010aa0 	.word	0x08010aa0
 800bf28:	0800c125 	.word	0x0800c125
 800bf2c:	20001260 	.word	0x20001260

0800bf30 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b088      	sub	sp, #32
 800bf34:	af02      	add	r7, sp, #8
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	607a      	str	r2, [r7, #4]
 800bf3c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800bf3e:	202c      	movs	r0, #44	@ 0x2c
 800bf40:	f000 fdb4 	bl	800caac <pvPortMalloc>
 800bf44:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d00d      	beq.n	800bf68 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	9301      	str	r3, [sp, #4]
 800bf58:	6a3b      	ldr	r3, [r7, #32]
 800bf5a:	9300      	str	r3, [sp, #0]
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	68b9      	ldr	r1, [r7, #8]
 800bf62:	68f8      	ldr	r0, [r7, #12]
 800bf64:	f000 f805 	bl	800bf72 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800bf68:	697b      	ldr	r3, [r7, #20]
	}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3718      	adds	r7, #24
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}

0800bf72 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b086      	sub	sp, #24
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	60f8      	str	r0, [r7, #12]
 800bf7a:	60b9      	str	r1, [r7, #8]
 800bf7c:	607a      	str	r2, [r7, #4]
 800bf7e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d10b      	bne.n	800bf9e <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800bf86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf8a:	f383 8811 	msr	BASEPRI, r3
 800bf8e:	f3bf 8f6f 	isb	sy
 800bf92:	f3bf 8f4f 	dsb	sy
 800bf96:	617b      	str	r3, [r7, #20]
}
 800bf98:	bf00      	nop
 800bf9a:	bf00      	nop
 800bf9c:	e7fd      	b.n	800bf9a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800bf9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d01e      	beq.n	800bfe2 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800bfa4:	f000 faf2 	bl	800c58c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800bfa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfaa:	68fa      	ldr	r2, [r7, #12]
 800bfac:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800bfae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfb0:	68ba      	ldr	r2, [r7, #8]
 800bfb2:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800bfb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfb6:	683a      	ldr	r2, [r7, #0]
 800bfb8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800bfba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfbc:	6a3a      	ldr	r2, [r7, #32]
 800bfbe:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800bfc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfc2:	3304      	adds	r3, #4
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7fe f83d 	bl	800a044 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d008      	beq.n	800bfe2 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800bfd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bfd6:	f043 0304 	orr.w	r3, r3, #4
 800bfda:	b2da      	uxtb	r2, r3
 800bfdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfde:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800bfe2:	bf00      	nop
 800bfe4:	3718      	adds	r7, #24
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
	...

0800bfec <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b08a      	sub	sp, #40	@ 0x28
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	607a      	str	r2, [r7, #4]
 800bff8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bffa:	2300      	movs	r3, #0
 800bffc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d10b      	bne.n	800c01c <xTimerGenericCommand+0x30>
	__asm volatile
 800c004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c008:	f383 8811 	msr	BASEPRI, r3
 800c00c:	f3bf 8f6f 	isb	sy
 800c010:	f3bf 8f4f 	dsb	sy
 800c014:	623b      	str	r3, [r7, #32]
}
 800c016:	bf00      	nop
 800c018:	bf00      	nop
 800c01a:	e7fd      	b.n	800c018 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c01c:	4b19      	ldr	r3, [pc, #100]	@ (800c084 <xTimerGenericCommand+0x98>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d02a      	beq.n	800c07a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	2b05      	cmp	r3, #5
 800c034:	dc18      	bgt.n	800c068 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c036:	f7ff fd4f 	bl	800bad8 <xTaskGetSchedulerState>
 800c03a:	4603      	mov	r3, r0
 800c03c:	2b02      	cmp	r3, #2
 800c03e:	d109      	bne.n	800c054 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c040:	4b10      	ldr	r3, [pc, #64]	@ (800c084 <xTimerGenericCommand+0x98>)
 800c042:	6818      	ldr	r0, [r3, #0]
 800c044:	f107 0110 	add.w	r1, r7, #16
 800c048:	2300      	movs	r3, #0
 800c04a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c04c:	f7fe f9d4 	bl	800a3f8 <xQueueGenericSend>
 800c050:	6278      	str	r0, [r7, #36]	@ 0x24
 800c052:	e012      	b.n	800c07a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c054:	4b0b      	ldr	r3, [pc, #44]	@ (800c084 <xTimerGenericCommand+0x98>)
 800c056:	6818      	ldr	r0, [r3, #0]
 800c058:	f107 0110 	add.w	r1, r7, #16
 800c05c:	2300      	movs	r3, #0
 800c05e:	2200      	movs	r2, #0
 800c060:	f7fe f9ca 	bl	800a3f8 <xQueueGenericSend>
 800c064:	6278      	str	r0, [r7, #36]	@ 0x24
 800c066:	e008      	b.n	800c07a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c068:	4b06      	ldr	r3, [pc, #24]	@ (800c084 <xTimerGenericCommand+0x98>)
 800c06a:	6818      	ldr	r0, [r3, #0]
 800c06c:	f107 0110 	add.w	r1, r7, #16
 800c070:	2300      	movs	r3, #0
 800c072:	683a      	ldr	r2, [r7, #0]
 800c074:	f7fe fac2 	bl	800a5fc <xQueueGenericSendFromISR>
 800c078:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c07a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3728      	adds	r7, #40	@ 0x28
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}
 800c084:	2000125c 	.word	0x2000125c

0800c088 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b088      	sub	sp, #32
 800c08c:	af02      	add	r7, sp, #8
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c092:	4b23      	ldr	r3, [pc, #140]	@ (800c120 <prvProcessExpiredTimer+0x98>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	68db      	ldr	r3, [r3, #12]
 800c098:	68db      	ldr	r3, [r3, #12]
 800c09a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	3304      	adds	r3, #4
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f7fe f839 	bl	800a118 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0ac:	f003 0304 	and.w	r3, r3, #4
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d023      	beq.n	800c0fc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	699a      	ldr	r2, [r3, #24]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	18d1      	adds	r1, r2, r3
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	683a      	ldr	r2, [r7, #0]
 800c0c0:	6978      	ldr	r0, [r7, #20]
 800c0c2:	f000 f8d5 	bl	800c270 <prvInsertTimerInActiveList>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d020      	beq.n	800c10e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	9300      	str	r3, [sp, #0]
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	687a      	ldr	r2, [r7, #4]
 800c0d4:	2100      	movs	r1, #0
 800c0d6:	6978      	ldr	r0, [r7, #20]
 800c0d8:	f7ff ff88 	bl	800bfec <xTimerGenericCommand>
 800c0dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d114      	bne.n	800c10e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c0e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0e8:	f383 8811 	msr	BASEPRI, r3
 800c0ec:	f3bf 8f6f 	isb	sy
 800c0f0:	f3bf 8f4f 	dsb	sy
 800c0f4:	60fb      	str	r3, [r7, #12]
}
 800c0f6:	bf00      	nop
 800c0f8:	bf00      	nop
 800c0fa:	e7fd      	b.n	800c0f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c102:	f023 0301 	bic.w	r3, r3, #1
 800c106:	b2da      	uxtb	r2, r3
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	6a1b      	ldr	r3, [r3, #32]
 800c112:	6978      	ldr	r0, [r7, #20]
 800c114:	4798      	blx	r3
}
 800c116:	bf00      	nop
 800c118:	3718      	adds	r7, #24
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	20001254 	.word	0x20001254

0800c124 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c12c:	f107 0308 	add.w	r3, r7, #8
 800c130:	4618      	mov	r0, r3
 800c132:	f000 f859 	bl	800c1e8 <prvGetNextExpireTime>
 800c136:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	4619      	mov	r1, r3
 800c13c:	68f8      	ldr	r0, [r7, #12]
 800c13e:	f000 f805 	bl	800c14c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c142:	f000 f8d7 	bl	800c2f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c146:	bf00      	nop
 800c148:	e7f0      	b.n	800c12c <prvTimerTask+0x8>
	...

0800c14c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b084      	sub	sp, #16
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c156:	f7ff f8cb 	bl	800b2f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c15a:	f107 0308 	add.w	r3, r7, #8
 800c15e:	4618      	mov	r0, r3
 800c160:	f000 f866 	bl	800c230 <prvSampleTimeNow>
 800c164:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d130      	bne.n	800c1ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d10a      	bne.n	800c188 <prvProcessTimerOrBlockTask+0x3c>
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	429a      	cmp	r2, r3
 800c178:	d806      	bhi.n	800c188 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c17a:	f7ff f8c7 	bl	800b30c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c17e:	68f9      	ldr	r1, [r7, #12]
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f7ff ff81 	bl	800c088 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c186:	e024      	b.n	800c1d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d008      	beq.n	800c1a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c18e:	4b13      	ldr	r3, [pc, #76]	@ (800c1dc <prvProcessTimerOrBlockTask+0x90>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d101      	bne.n	800c19c <prvProcessTimerOrBlockTask+0x50>
 800c198:	2301      	movs	r3, #1
 800c19a:	e000      	b.n	800c19e <prvProcessTimerOrBlockTask+0x52>
 800c19c:	2300      	movs	r3, #0
 800c19e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c1a0:	4b0f      	ldr	r3, [pc, #60]	@ (800c1e0 <prvProcessTimerOrBlockTask+0x94>)
 800c1a2:	6818      	ldr	r0, [r3, #0]
 800c1a4:	687a      	ldr	r2, [r7, #4]
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	1ad3      	subs	r3, r2, r3
 800c1aa:	683a      	ldr	r2, [r7, #0]
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	f7fe fe07 	bl	800adc0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c1b2:	f7ff f8ab 	bl	800b30c <xTaskResumeAll>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d10a      	bne.n	800c1d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c1bc:	4b09      	ldr	r3, [pc, #36]	@ (800c1e4 <prvProcessTimerOrBlockTask+0x98>)
 800c1be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1c2:	601a      	str	r2, [r3, #0]
 800c1c4:	f3bf 8f4f 	dsb	sy
 800c1c8:	f3bf 8f6f 	isb	sy
}
 800c1cc:	e001      	b.n	800c1d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c1ce:	f7ff f89d 	bl	800b30c <xTaskResumeAll>
}
 800c1d2:	bf00      	nop
 800c1d4:	3710      	adds	r7, #16
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	20001258 	.word	0x20001258
 800c1e0:	2000125c 	.word	0x2000125c
 800c1e4:	e000ed04 	.word	0xe000ed04

0800c1e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b085      	sub	sp, #20
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c1f0:	4b0e      	ldr	r3, [pc, #56]	@ (800c22c <prvGetNextExpireTime+0x44>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d101      	bne.n	800c1fe <prvGetNextExpireTime+0x16>
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	e000      	b.n	800c200 <prvGetNextExpireTime+0x18>
 800c1fe:	2200      	movs	r2, #0
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d105      	bne.n	800c218 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c20c:	4b07      	ldr	r3, [pc, #28]	@ (800c22c <prvGetNextExpireTime+0x44>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	60fb      	str	r3, [r7, #12]
 800c216:	e001      	b.n	800c21c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c218:	2300      	movs	r3, #0
 800c21a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c21c:	68fb      	ldr	r3, [r7, #12]
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3714      	adds	r7, #20
 800c222:	46bd      	mov	sp, r7
 800c224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c228:	4770      	bx	lr
 800c22a:	bf00      	nop
 800c22c:	20001254 	.word	0x20001254

0800c230 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b084      	sub	sp, #16
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c238:	f7ff f906 	bl	800b448 <xTaskGetTickCount>
 800c23c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c23e:	4b0b      	ldr	r3, [pc, #44]	@ (800c26c <prvSampleTimeNow+0x3c>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	68fa      	ldr	r2, [r7, #12]
 800c244:	429a      	cmp	r2, r3
 800c246:	d205      	bcs.n	800c254 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c248:	f000 f93a 	bl	800c4c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2201      	movs	r2, #1
 800c250:	601a      	str	r2, [r3, #0]
 800c252:	e002      	b.n	800c25a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2200      	movs	r2, #0
 800c258:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c25a:	4a04      	ldr	r2, [pc, #16]	@ (800c26c <prvSampleTimeNow+0x3c>)
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c260:	68fb      	ldr	r3, [r7, #12]
}
 800c262:	4618      	mov	r0, r3
 800c264:	3710      	adds	r7, #16
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}
 800c26a:	bf00      	nop
 800c26c:	20001264 	.word	0x20001264

0800c270 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b086      	sub	sp, #24
 800c274:	af00      	add	r7, sp, #0
 800c276:	60f8      	str	r0, [r7, #12]
 800c278:	60b9      	str	r1, [r7, #8]
 800c27a:	607a      	str	r2, [r7, #4]
 800c27c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c27e:	2300      	movs	r3, #0
 800c280:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	68ba      	ldr	r2, [r7, #8]
 800c286:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	68fa      	ldr	r2, [r7, #12]
 800c28c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c28e:	68ba      	ldr	r2, [r7, #8]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	429a      	cmp	r2, r3
 800c294:	d812      	bhi.n	800c2bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c296:	687a      	ldr	r2, [r7, #4]
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	1ad2      	subs	r2, r2, r3
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	699b      	ldr	r3, [r3, #24]
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d302      	bcc.n	800c2aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	617b      	str	r3, [r7, #20]
 800c2a8:	e01b      	b.n	800c2e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c2aa:	4b10      	ldr	r3, [pc, #64]	@ (800c2ec <prvInsertTimerInActiveList+0x7c>)
 800c2ac:	681a      	ldr	r2, [r3, #0]
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	3304      	adds	r3, #4
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	4610      	mov	r0, r2
 800c2b6:	f7fd fef6 	bl	800a0a6 <vListInsert>
 800c2ba:	e012      	b.n	800c2e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c2bc:	687a      	ldr	r2, [r7, #4]
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d206      	bcs.n	800c2d2 <prvInsertTimerInActiveList+0x62>
 800c2c4:	68ba      	ldr	r2, [r7, #8]
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d302      	bcc.n	800c2d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	617b      	str	r3, [r7, #20]
 800c2d0:	e007      	b.n	800c2e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c2d2:	4b07      	ldr	r3, [pc, #28]	@ (800c2f0 <prvInsertTimerInActiveList+0x80>)
 800c2d4:	681a      	ldr	r2, [r3, #0]
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	3304      	adds	r3, #4
 800c2da:	4619      	mov	r1, r3
 800c2dc:	4610      	mov	r0, r2
 800c2de:	f7fd fee2 	bl	800a0a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c2e2:	697b      	ldr	r3, [r7, #20]
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3718      	adds	r7, #24
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	20001258 	.word	0x20001258
 800c2f0:	20001254 	.word	0x20001254

0800c2f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b08e      	sub	sp, #56	@ 0x38
 800c2f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c2fa:	e0ce      	b.n	800c49a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	da19      	bge.n	800c336 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c302:	1d3b      	adds	r3, r7, #4
 800c304:	3304      	adds	r3, #4
 800c306:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d10b      	bne.n	800c326 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c312:	f383 8811 	msr	BASEPRI, r3
 800c316:	f3bf 8f6f 	isb	sy
 800c31a:	f3bf 8f4f 	dsb	sy
 800c31e:	61fb      	str	r3, [r7, #28]
}
 800c320:	bf00      	nop
 800c322:	bf00      	nop
 800c324:	e7fd      	b.n	800c322 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c32c:	6850      	ldr	r0, [r2, #4]
 800c32e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c330:	6892      	ldr	r2, [r2, #8]
 800c332:	4611      	mov	r1, r2
 800c334:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	f2c0 80ae 	blt.w	800c49a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c344:	695b      	ldr	r3, [r3, #20]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d004      	beq.n	800c354 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c34a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c34c:	3304      	adds	r3, #4
 800c34e:	4618      	mov	r0, r3
 800c350:	f7fd fee2 	bl	800a118 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c354:	463b      	mov	r3, r7
 800c356:	4618      	mov	r0, r3
 800c358:	f7ff ff6a 	bl	800c230 <prvSampleTimeNow>
 800c35c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2b09      	cmp	r3, #9
 800c362:	f200 8097 	bhi.w	800c494 <prvProcessReceivedCommands+0x1a0>
 800c366:	a201      	add	r2, pc, #4	@ (adr r2, 800c36c <prvProcessReceivedCommands+0x78>)
 800c368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c36c:	0800c395 	.word	0x0800c395
 800c370:	0800c395 	.word	0x0800c395
 800c374:	0800c395 	.word	0x0800c395
 800c378:	0800c40b 	.word	0x0800c40b
 800c37c:	0800c41f 	.word	0x0800c41f
 800c380:	0800c46b 	.word	0x0800c46b
 800c384:	0800c395 	.word	0x0800c395
 800c388:	0800c395 	.word	0x0800c395
 800c38c:	0800c40b 	.word	0x0800c40b
 800c390:	0800c41f 	.word	0x0800c41f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c396:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c39a:	f043 0301 	orr.w	r3, r3, #1
 800c39e:	b2da      	uxtb	r2, r3
 800c3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c3a6:	68ba      	ldr	r2, [r7, #8]
 800c3a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3aa:	699b      	ldr	r3, [r3, #24]
 800c3ac:	18d1      	adds	r1, r2, r3
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c3b4:	f7ff ff5c 	bl	800c270 <prvInsertTimerInActiveList>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d06c      	beq.n	800c498 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3c0:	6a1b      	ldr	r3, [r3, #32]
 800c3c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c3c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c3cc:	f003 0304 	and.w	r3, r3, #4
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d061      	beq.n	800c498 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c3d4:	68ba      	ldr	r2, [r7, #8]
 800c3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3d8:	699b      	ldr	r3, [r3, #24]
 800c3da:	441a      	add	r2, r3
 800c3dc:	2300      	movs	r3, #0
 800c3de:	9300      	str	r3, [sp, #0]
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	2100      	movs	r1, #0
 800c3e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c3e6:	f7ff fe01 	bl	800bfec <xTimerGenericCommand>
 800c3ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c3ec:	6a3b      	ldr	r3, [r7, #32]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d152      	bne.n	800c498 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c3f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3f6:	f383 8811 	msr	BASEPRI, r3
 800c3fa:	f3bf 8f6f 	isb	sy
 800c3fe:	f3bf 8f4f 	dsb	sy
 800c402:	61bb      	str	r3, [r7, #24]
}
 800c404:	bf00      	nop
 800c406:	bf00      	nop
 800c408:	e7fd      	b.n	800c406 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c40a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c40c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c410:	f023 0301 	bic.w	r3, r3, #1
 800c414:	b2da      	uxtb	r2, r3
 800c416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c418:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c41c:	e03d      	b.n	800c49a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c41e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c420:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c424:	f043 0301 	orr.w	r3, r3, #1
 800c428:	b2da      	uxtb	r2, r3
 800c42a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c42c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c430:	68ba      	ldr	r2, [r7, #8]
 800c432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c434:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c438:	699b      	ldr	r3, [r3, #24]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d10b      	bne.n	800c456 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c442:	f383 8811 	msr	BASEPRI, r3
 800c446:	f3bf 8f6f 	isb	sy
 800c44a:	f3bf 8f4f 	dsb	sy
 800c44e:	617b      	str	r3, [r7, #20]
}
 800c450:	bf00      	nop
 800c452:	bf00      	nop
 800c454:	e7fd      	b.n	800c452 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c458:	699a      	ldr	r2, [r3, #24]
 800c45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c45c:	18d1      	adds	r1, r2, r3
 800c45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c460:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c462:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c464:	f7ff ff04 	bl	800c270 <prvInsertTimerInActiveList>
					break;
 800c468:	e017      	b.n	800c49a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c46a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c46c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c470:	f003 0302 	and.w	r3, r3, #2
 800c474:	2b00      	cmp	r3, #0
 800c476:	d103      	bne.n	800c480 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c478:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c47a:	f000 fbe5 	bl	800cc48 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c47e:	e00c      	b.n	800c49a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c482:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c486:	f023 0301 	bic.w	r3, r3, #1
 800c48a:	b2da      	uxtb	r2, r3
 800c48c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c48e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c492:	e002      	b.n	800c49a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c494:	bf00      	nop
 800c496:	e000      	b.n	800c49a <prvProcessReceivedCommands+0x1a6>
					break;
 800c498:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c49a:	4b08      	ldr	r3, [pc, #32]	@ (800c4bc <prvProcessReceivedCommands+0x1c8>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	1d39      	adds	r1, r7, #4
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f7fe f948 	bl	800a738 <xQueueReceive>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	f47f af26 	bne.w	800c2fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c4b0:	bf00      	nop
 800c4b2:	bf00      	nop
 800c4b4:	3730      	adds	r7, #48	@ 0x30
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
 800c4ba:	bf00      	nop
 800c4bc:	2000125c 	.word	0x2000125c

0800c4c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b088      	sub	sp, #32
 800c4c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c4c6:	e049      	b.n	800c55c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c4c8:	4b2e      	ldr	r3, [pc, #184]	@ (800c584 <prvSwitchTimerLists+0xc4>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	68db      	ldr	r3, [r3, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4d2:	4b2c      	ldr	r3, [pc, #176]	@ (800c584 <prvSwitchTimerLists+0xc4>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	68db      	ldr	r3, [r3, #12]
 800c4d8:	68db      	ldr	r3, [r3, #12]
 800c4da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	3304      	adds	r3, #4
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f7fd fe19 	bl	800a118 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	6a1b      	ldr	r3, [r3, #32]
 800c4ea:	68f8      	ldr	r0, [r7, #12]
 800c4ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c4f4:	f003 0304 	and.w	r3, r3, #4
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d02f      	beq.n	800c55c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	699b      	ldr	r3, [r3, #24]
 800c500:	693a      	ldr	r2, [r7, #16]
 800c502:	4413      	add	r3, r2
 800c504:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c506:	68ba      	ldr	r2, [r7, #8]
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d90e      	bls.n	800c52c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	68ba      	ldr	r2, [r7, #8]
 800c512:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	68fa      	ldr	r2, [r7, #12]
 800c518:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c51a:	4b1a      	ldr	r3, [pc, #104]	@ (800c584 <prvSwitchTimerLists+0xc4>)
 800c51c:	681a      	ldr	r2, [r3, #0]
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	3304      	adds	r3, #4
 800c522:	4619      	mov	r1, r3
 800c524:	4610      	mov	r0, r2
 800c526:	f7fd fdbe 	bl	800a0a6 <vListInsert>
 800c52a:	e017      	b.n	800c55c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c52c:	2300      	movs	r3, #0
 800c52e:	9300      	str	r3, [sp, #0]
 800c530:	2300      	movs	r3, #0
 800c532:	693a      	ldr	r2, [r7, #16]
 800c534:	2100      	movs	r1, #0
 800c536:	68f8      	ldr	r0, [r7, #12]
 800c538:	f7ff fd58 	bl	800bfec <xTimerGenericCommand>
 800c53c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d10b      	bne.n	800c55c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c548:	f383 8811 	msr	BASEPRI, r3
 800c54c:	f3bf 8f6f 	isb	sy
 800c550:	f3bf 8f4f 	dsb	sy
 800c554:	603b      	str	r3, [r7, #0]
}
 800c556:	bf00      	nop
 800c558:	bf00      	nop
 800c55a:	e7fd      	b.n	800c558 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c55c:	4b09      	ldr	r3, [pc, #36]	@ (800c584 <prvSwitchTimerLists+0xc4>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d1b0      	bne.n	800c4c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c566:	4b07      	ldr	r3, [pc, #28]	@ (800c584 <prvSwitchTimerLists+0xc4>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c56c:	4b06      	ldr	r3, [pc, #24]	@ (800c588 <prvSwitchTimerLists+0xc8>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	4a04      	ldr	r2, [pc, #16]	@ (800c584 <prvSwitchTimerLists+0xc4>)
 800c572:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c574:	4a04      	ldr	r2, [pc, #16]	@ (800c588 <prvSwitchTimerLists+0xc8>)
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	6013      	str	r3, [r2, #0]
}
 800c57a:	bf00      	nop
 800c57c:	3718      	adds	r7, #24
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}
 800c582:	bf00      	nop
 800c584:	20001254 	.word	0x20001254
 800c588:	20001258 	.word	0x20001258

0800c58c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b082      	sub	sp, #8
 800c590:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c592:	f000 f969 	bl	800c868 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c596:	4b15      	ldr	r3, [pc, #84]	@ (800c5ec <prvCheckForValidListAndQueue+0x60>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d120      	bne.n	800c5e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c59e:	4814      	ldr	r0, [pc, #80]	@ (800c5f0 <prvCheckForValidListAndQueue+0x64>)
 800c5a0:	f7fd fd30 	bl	800a004 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c5a4:	4813      	ldr	r0, [pc, #76]	@ (800c5f4 <prvCheckForValidListAndQueue+0x68>)
 800c5a6:	f7fd fd2d 	bl	800a004 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c5aa:	4b13      	ldr	r3, [pc, #76]	@ (800c5f8 <prvCheckForValidListAndQueue+0x6c>)
 800c5ac:	4a10      	ldr	r2, [pc, #64]	@ (800c5f0 <prvCheckForValidListAndQueue+0x64>)
 800c5ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c5b0:	4b12      	ldr	r3, [pc, #72]	@ (800c5fc <prvCheckForValidListAndQueue+0x70>)
 800c5b2:	4a10      	ldr	r2, [pc, #64]	@ (800c5f4 <prvCheckForValidListAndQueue+0x68>)
 800c5b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	9300      	str	r3, [sp, #0]
 800c5ba:	4b11      	ldr	r3, [pc, #68]	@ (800c600 <prvCheckForValidListAndQueue+0x74>)
 800c5bc:	4a11      	ldr	r2, [pc, #68]	@ (800c604 <prvCheckForValidListAndQueue+0x78>)
 800c5be:	2110      	movs	r1, #16
 800c5c0:	200a      	movs	r0, #10
 800c5c2:	f7fd fe3d 	bl	800a240 <xQueueGenericCreateStatic>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	4a08      	ldr	r2, [pc, #32]	@ (800c5ec <prvCheckForValidListAndQueue+0x60>)
 800c5ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c5cc:	4b07      	ldr	r3, [pc, #28]	@ (800c5ec <prvCheckForValidListAndQueue+0x60>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d005      	beq.n	800c5e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c5d4:	4b05      	ldr	r3, [pc, #20]	@ (800c5ec <prvCheckForValidListAndQueue+0x60>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	490b      	ldr	r1, [pc, #44]	@ (800c608 <prvCheckForValidListAndQueue+0x7c>)
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f7fe fbc6 	bl	800ad6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c5e0:	f000 f974 	bl	800c8cc <vPortExitCritical>
}
 800c5e4:	bf00      	nop
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
 800c5ea:	bf00      	nop
 800c5ec:	2000125c 	.word	0x2000125c
 800c5f0:	2000122c 	.word	0x2000122c
 800c5f4:	20001240 	.word	0x20001240
 800c5f8:	20001254 	.word	0x20001254
 800c5fc:	20001258 	.word	0x20001258
 800c600:	20001308 	.word	0x20001308
 800c604:	20001268 	.word	0x20001268
 800c608:	08010aa8 	.word	0x08010aa8

0800c60c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c60c:	b480      	push	{r7}
 800c60e:	b085      	sub	sp, #20
 800c610:	af00      	add	r7, sp, #0
 800c612:	60f8      	str	r0, [r7, #12]
 800c614:	60b9      	str	r1, [r7, #8]
 800c616:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	3b04      	subs	r3, #4
 800c61c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c624:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	3b04      	subs	r3, #4
 800c62a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	f023 0201 	bic.w	r2, r3, #1
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	3b04      	subs	r3, #4
 800c63a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c63c:	4a0c      	ldr	r2, [pc, #48]	@ (800c670 <pxPortInitialiseStack+0x64>)
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	3b14      	subs	r3, #20
 800c646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c648:	687a      	ldr	r2, [r7, #4]
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	3b04      	subs	r3, #4
 800c652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f06f 0202 	mvn.w	r2, #2
 800c65a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	3b20      	subs	r3, #32
 800c660:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c662:	68fb      	ldr	r3, [r7, #12]
}
 800c664:	4618      	mov	r0, r3
 800c666:	3714      	adds	r7, #20
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr
 800c670:	0800c675 	.word	0x0800c675

0800c674 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c674:	b480      	push	{r7}
 800c676:	b085      	sub	sp, #20
 800c678:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c67a:	2300      	movs	r3, #0
 800c67c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c67e:	4b13      	ldr	r3, [pc, #76]	@ (800c6cc <prvTaskExitError+0x58>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c686:	d00b      	beq.n	800c6a0 <prvTaskExitError+0x2c>
	__asm volatile
 800c688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c68c:	f383 8811 	msr	BASEPRI, r3
 800c690:	f3bf 8f6f 	isb	sy
 800c694:	f3bf 8f4f 	dsb	sy
 800c698:	60fb      	str	r3, [r7, #12]
}
 800c69a:	bf00      	nop
 800c69c:	bf00      	nop
 800c69e:	e7fd      	b.n	800c69c <prvTaskExitError+0x28>
	__asm volatile
 800c6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6a4:	f383 8811 	msr	BASEPRI, r3
 800c6a8:	f3bf 8f6f 	isb	sy
 800c6ac:	f3bf 8f4f 	dsb	sy
 800c6b0:	60bb      	str	r3, [r7, #8]
}
 800c6b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c6b4:	bf00      	nop
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d0fc      	beq.n	800c6b6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c6bc:	bf00      	nop
 800c6be:	bf00      	nop
 800c6c0:	3714      	adds	r7, #20
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c8:	4770      	bx	lr
 800c6ca:	bf00      	nop
 800c6cc:	2000004c 	.word	0x2000004c

0800c6d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c6d0:	4b07      	ldr	r3, [pc, #28]	@ (800c6f0 <pxCurrentTCBConst2>)
 800c6d2:	6819      	ldr	r1, [r3, #0]
 800c6d4:	6808      	ldr	r0, [r1, #0]
 800c6d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6da:	f380 8809 	msr	PSP, r0
 800c6de:	f3bf 8f6f 	isb	sy
 800c6e2:	f04f 0000 	mov.w	r0, #0
 800c6e6:	f380 8811 	msr	BASEPRI, r0
 800c6ea:	4770      	bx	lr
 800c6ec:	f3af 8000 	nop.w

0800c6f0 <pxCurrentTCBConst2>:
 800c6f0:	20000d2c 	.word	0x20000d2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c6f4:	bf00      	nop
 800c6f6:	bf00      	nop

0800c6f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c6f8:	4808      	ldr	r0, [pc, #32]	@ (800c71c <prvPortStartFirstTask+0x24>)
 800c6fa:	6800      	ldr	r0, [r0, #0]
 800c6fc:	6800      	ldr	r0, [r0, #0]
 800c6fe:	f380 8808 	msr	MSP, r0
 800c702:	f04f 0000 	mov.w	r0, #0
 800c706:	f380 8814 	msr	CONTROL, r0
 800c70a:	b662      	cpsie	i
 800c70c:	b661      	cpsie	f
 800c70e:	f3bf 8f4f 	dsb	sy
 800c712:	f3bf 8f6f 	isb	sy
 800c716:	df00      	svc	0
 800c718:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c71a:	bf00      	nop
 800c71c:	e000ed08 	.word	0xe000ed08

0800c720 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b086      	sub	sp, #24
 800c724:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c726:	4b47      	ldr	r3, [pc, #284]	@ (800c844 <xPortStartScheduler+0x124>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	4a47      	ldr	r2, [pc, #284]	@ (800c848 <xPortStartScheduler+0x128>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d10b      	bne.n	800c748 <xPortStartScheduler+0x28>
	__asm volatile
 800c730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c734:	f383 8811 	msr	BASEPRI, r3
 800c738:	f3bf 8f6f 	isb	sy
 800c73c:	f3bf 8f4f 	dsb	sy
 800c740:	613b      	str	r3, [r7, #16]
}
 800c742:	bf00      	nop
 800c744:	bf00      	nop
 800c746:	e7fd      	b.n	800c744 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c748:	4b3e      	ldr	r3, [pc, #248]	@ (800c844 <xPortStartScheduler+0x124>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	4a3f      	ldr	r2, [pc, #252]	@ (800c84c <xPortStartScheduler+0x12c>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d10b      	bne.n	800c76a <xPortStartScheduler+0x4a>
	__asm volatile
 800c752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c756:	f383 8811 	msr	BASEPRI, r3
 800c75a:	f3bf 8f6f 	isb	sy
 800c75e:	f3bf 8f4f 	dsb	sy
 800c762:	60fb      	str	r3, [r7, #12]
}
 800c764:	bf00      	nop
 800c766:	bf00      	nop
 800c768:	e7fd      	b.n	800c766 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c76a:	4b39      	ldr	r3, [pc, #228]	@ (800c850 <xPortStartScheduler+0x130>)
 800c76c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	b2db      	uxtb	r3, r3
 800c774:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	22ff      	movs	r2, #255	@ 0xff
 800c77a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	b2db      	uxtb	r3, r3
 800c782:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c784:	78fb      	ldrb	r3, [r7, #3]
 800c786:	b2db      	uxtb	r3, r3
 800c788:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c78c:	b2da      	uxtb	r2, r3
 800c78e:	4b31      	ldr	r3, [pc, #196]	@ (800c854 <xPortStartScheduler+0x134>)
 800c790:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c792:	4b31      	ldr	r3, [pc, #196]	@ (800c858 <xPortStartScheduler+0x138>)
 800c794:	2207      	movs	r2, #7
 800c796:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c798:	e009      	b.n	800c7ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c79a:	4b2f      	ldr	r3, [pc, #188]	@ (800c858 <xPortStartScheduler+0x138>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	3b01      	subs	r3, #1
 800c7a0:	4a2d      	ldr	r2, [pc, #180]	@ (800c858 <xPortStartScheduler+0x138>)
 800c7a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c7a4:	78fb      	ldrb	r3, [r7, #3]
 800c7a6:	b2db      	uxtb	r3, r3
 800c7a8:	005b      	lsls	r3, r3, #1
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c7ae:	78fb      	ldrb	r3, [r7, #3]
 800c7b0:	b2db      	uxtb	r3, r3
 800c7b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7b6:	2b80      	cmp	r3, #128	@ 0x80
 800c7b8:	d0ef      	beq.n	800c79a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c7ba:	4b27      	ldr	r3, [pc, #156]	@ (800c858 <xPortStartScheduler+0x138>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f1c3 0307 	rsb	r3, r3, #7
 800c7c2:	2b04      	cmp	r3, #4
 800c7c4:	d00b      	beq.n	800c7de <xPortStartScheduler+0xbe>
	__asm volatile
 800c7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ca:	f383 8811 	msr	BASEPRI, r3
 800c7ce:	f3bf 8f6f 	isb	sy
 800c7d2:	f3bf 8f4f 	dsb	sy
 800c7d6:	60bb      	str	r3, [r7, #8]
}
 800c7d8:	bf00      	nop
 800c7da:	bf00      	nop
 800c7dc:	e7fd      	b.n	800c7da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c7de:	4b1e      	ldr	r3, [pc, #120]	@ (800c858 <xPortStartScheduler+0x138>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	021b      	lsls	r3, r3, #8
 800c7e4:	4a1c      	ldr	r2, [pc, #112]	@ (800c858 <xPortStartScheduler+0x138>)
 800c7e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c7e8:	4b1b      	ldr	r3, [pc, #108]	@ (800c858 <xPortStartScheduler+0x138>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c7f0:	4a19      	ldr	r2, [pc, #100]	@ (800c858 <xPortStartScheduler+0x138>)
 800c7f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	b2da      	uxtb	r2, r3
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c7fc:	4b17      	ldr	r3, [pc, #92]	@ (800c85c <xPortStartScheduler+0x13c>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	4a16      	ldr	r2, [pc, #88]	@ (800c85c <xPortStartScheduler+0x13c>)
 800c802:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c806:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c808:	4b14      	ldr	r3, [pc, #80]	@ (800c85c <xPortStartScheduler+0x13c>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4a13      	ldr	r2, [pc, #76]	@ (800c85c <xPortStartScheduler+0x13c>)
 800c80e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c812:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c814:	f000 f8da 	bl	800c9cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c818:	4b11      	ldr	r3, [pc, #68]	@ (800c860 <xPortStartScheduler+0x140>)
 800c81a:	2200      	movs	r2, #0
 800c81c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c81e:	f000 f8f9 	bl	800ca14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c822:	4b10      	ldr	r3, [pc, #64]	@ (800c864 <xPortStartScheduler+0x144>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	4a0f      	ldr	r2, [pc, #60]	@ (800c864 <xPortStartScheduler+0x144>)
 800c828:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c82c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c82e:	f7ff ff63 	bl	800c6f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c832:	f7fe fed3 	bl	800b5dc <vTaskSwitchContext>
	prvTaskExitError();
 800c836:	f7ff ff1d 	bl	800c674 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c83a:	2300      	movs	r3, #0
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3718      	adds	r7, #24
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}
 800c844:	e000ed00 	.word	0xe000ed00
 800c848:	410fc271 	.word	0x410fc271
 800c84c:	410fc270 	.word	0x410fc270
 800c850:	e000e400 	.word	0xe000e400
 800c854:	20001358 	.word	0x20001358
 800c858:	2000135c 	.word	0x2000135c
 800c85c:	e000ed20 	.word	0xe000ed20
 800c860:	2000004c 	.word	0x2000004c
 800c864:	e000ef34 	.word	0xe000ef34

0800c868 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c868:	b480      	push	{r7}
 800c86a:	b083      	sub	sp, #12
 800c86c:	af00      	add	r7, sp, #0
	__asm volatile
 800c86e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c872:	f383 8811 	msr	BASEPRI, r3
 800c876:	f3bf 8f6f 	isb	sy
 800c87a:	f3bf 8f4f 	dsb	sy
 800c87e:	607b      	str	r3, [r7, #4]
}
 800c880:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c882:	4b10      	ldr	r3, [pc, #64]	@ (800c8c4 <vPortEnterCritical+0x5c>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	3301      	adds	r3, #1
 800c888:	4a0e      	ldr	r2, [pc, #56]	@ (800c8c4 <vPortEnterCritical+0x5c>)
 800c88a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c88c:	4b0d      	ldr	r3, [pc, #52]	@ (800c8c4 <vPortEnterCritical+0x5c>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	2b01      	cmp	r3, #1
 800c892:	d110      	bne.n	800c8b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c894:	4b0c      	ldr	r3, [pc, #48]	@ (800c8c8 <vPortEnterCritical+0x60>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d00b      	beq.n	800c8b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8a2:	f383 8811 	msr	BASEPRI, r3
 800c8a6:	f3bf 8f6f 	isb	sy
 800c8aa:	f3bf 8f4f 	dsb	sy
 800c8ae:	603b      	str	r3, [r7, #0]
}
 800c8b0:	bf00      	nop
 800c8b2:	bf00      	nop
 800c8b4:	e7fd      	b.n	800c8b2 <vPortEnterCritical+0x4a>
	}
}
 800c8b6:	bf00      	nop
 800c8b8:	370c      	adds	r7, #12
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c0:	4770      	bx	lr
 800c8c2:	bf00      	nop
 800c8c4:	2000004c 	.word	0x2000004c
 800c8c8:	e000ed04 	.word	0xe000ed04

0800c8cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b083      	sub	sp, #12
 800c8d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c8d2:	4b12      	ldr	r3, [pc, #72]	@ (800c91c <vPortExitCritical+0x50>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d10b      	bne.n	800c8f2 <vPortExitCritical+0x26>
	__asm volatile
 800c8da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8de:	f383 8811 	msr	BASEPRI, r3
 800c8e2:	f3bf 8f6f 	isb	sy
 800c8e6:	f3bf 8f4f 	dsb	sy
 800c8ea:	607b      	str	r3, [r7, #4]
}
 800c8ec:	bf00      	nop
 800c8ee:	bf00      	nop
 800c8f0:	e7fd      	b.n	800c8ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c8f2:	4b0a      	ldr	r3, [pc, #40]	@ (800c91c <vPortExitCritical+0x50>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	3b01      	subs	r3, #1
 800c8f8:	4a08      	ldr	r2, [pc, #32]	@ (800c91c <vPortExitCritical+0x50>)
 800c8fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c8fc:	4b07      	ldr	r3, [pc, #28]	@ (800c91c <vPortExitCritical+0x50>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d105      	bne.n	800c910 <vPortExitCritical+0x44>
 800c904:	2300      	movs	r3, #0
 800c906:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	f383 8811 	msr	BASEPRI, r3
}
 800c90e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c910:	bf00      	nop
 800c912:	370c      	adds	r7, #12
 800c914:	46bd      	mov	sp, r7
 800c916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91a:	4770      	bx	lr
 800c91c:	2000004c 	.word	0x2000004c

0800c920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c920:	f3ef 8009 	mrs	r0, PSP
 800c924:	f3bf 8f6f 	isb	sy
 800c928:	4b15      	ldr	r3, [pc, #84]	@ (800c980 <pxCurrentTCBConst>)
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	f01e 0f10 	tst.w	lr, #16
 800c930:	bf08      	it	eq
 800c932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c93a:	6010      	str	r0, [r2, #0]
 800c93c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c940:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c944:	f380 8811 	msr	BASEPRI, r0
 800c948:	f3bf 8f4f 	dsb	sy
 800c94c:	f3bf 8f6f 	isb	sy
 800c950:	f7fe fe44 	bl	800b5dc <vTaskSwitchContext>
 800c954:	f04f 0000 	mov.w	r0, #0
 800c958:	f380 8811 	msr	BASEPRI, r0
 800c95c:	bc09      	pop	{r0, r3}
 800c95e:	6819      	ldr	r1, [r3, #0]
 800c960:	6808      	ldr	r0, [r1, #0]
 800c962:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c966:	f01e 0f10 	tst.w	lr, #16
 800c96a:	bf08      	it	eq
 800c96c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c970:	f380 8809 	msr	PSP, r0
 800c974:	f3bf 8f6f 	isb	sy
 800c978:	4770      	bx	lr
 800c97a:	bf00      	nop
 800c97c:	f3af 8000 	nop.w

0800c980 <pxCurrentTCBConst>:
 800c980:	20000d2c 	.word	0x20000d2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c984:	bf00      	nop
 800c986:	bf00      	nop

0800c988 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af00      	add	r7, sp, #0
	__asm volatile
 800c98e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c992:	f383 8811 	msr	BASEPRI, r3
 800c996:	f3bf 8f6f 	isb	sy
 800c99a:	f3bf 8f4f 	dsb	sy
 800c99e:	607b      	str	r3, [r7, #4]
}
 800c9a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c9a2:	f7fe fd61 	bl	800b468 <xTaskIncrementTick>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d003      	beq.n	800c9b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c9ac:	4b06      	ldr	r3, [pc, #24]	@ (800c9c8 <xPortSysTickHandler+0x40>)
 800c9ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9b2:	601a      	str	r2, [r3, #0]
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	f383 8811 	msr	BASEPRI, r3
}
 800c9be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c9c0:	bf00      	nop
 800c9c2:	3708      	adds	r7, #8
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}
 800c9c8:	e000ed04 	.word	0xe000ed04

0800c9cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c9d0:	4b0b      	ldr	r3, [pc, #44]	@ (800ca00 <vPortSetupTimerInterrupt+0x34>)
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c9d6:	4b0b      	ldr	r3, [pc, #44]	@ (800ca04 <vPortSetupTimerInterrupt+0x38>)
 800c9d8:	2200      	movs	r2, #0
 800c9da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c9dc:	4b0a      	ldr	r3, [pc, #40]	@ (800ca08 <vPortSetupTimerInterrupt+0x3c>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	4a0a      	ldr	r2, [pc, #40]	@ (800ca0c <vPortSetupTimerInterrupt+0x40>)
 800c9e2:	fba2 2303 	umull	r2, r3, r2, r3
 800c9e6:	099b      	lsrs	r3, r3, #6
 800c9e8:	4a09      	ldr	r2, [pc, #36]	@ (800ca10 <vPortSetupTimerInterrupt+0x44>)
 800c9ea:	3b01      	subs	r3, #1
 800c9ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c9ee:	4b04      	ldr	r3, [pc, #16]	@ (800ca00 <vPortSetupTimerInterrupt+0x34>)
 800c9f0:	2207      	movs	r2, #7
 800c9f2:	601a      	str	r2, [r3, #0]
}
 800c9f4:	bf00      	nop
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fc:	4770      	bx	lr
 800c9fe:	bf00      	nop
 800ca00:	e000e010 	.word	0xe000e010
 800ca04:	e000e018 	.word	0xe000e018
 800ca08:	20000040 	.word	0x20000040
 800ca0c:	10624dd3 	.word	0x10624dd3
 800ca10:	e000e014 	.word	0xe000e014

0800ca14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ca14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ca24 <vPortEnableVFP+0x10>
 800ca18:	6801      	ldr	r1, [r0, #0]
 800ca1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ca1e:	6001      	str	r1, [r0, #0]
 800ca20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ca22:	bf00      	nop
 800ca24:	e000ed88 	.word	0xe000ed88

0800ca28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ca28:	b480      	push	{r7}
 800ca2a:	b085      	sub	sp, #20
 800ca2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ca2e:	f3ef 8305 	mrs	r3, IPSR
 800ca32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	2b0f      	cmp	r3, #15
 800ca38:	d915      	bls.n	800ca66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ca3a:	4a18      	ldr	r2, [pc, #96]	@ (800ca9c <vPortValidateInterruptPriority+0x74>)
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	4413      	add	r3, r2
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ca44:	4b16      	ldr	r3, [pc, #88]	@ (800caa0 <vPortValidateInterruptPriority+0x78>)
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	7afa      	ldrb	r2, [r7, #11]
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d20b      	bcs.n	800ca66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ca4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca52:	f383 8811 	msr	BASEPRI, r3
 800ca56:	f3bf 8f6f 	isb	sy
 800ca5a:	f3bf 8f4f 	dsb	sy
 800ca5e:	607b      	str	r3, [r7, #4]
}
 800ca60:	bf00      	nop
 800ca62:	bf00      	nop
 800ca64:	e7fd      	b.n	800ca62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ca66:	4b0f      	ldr	r3, [pc, #60]	@ (800caa4 <vPortValidateInterruptPriority+0x7c>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ca6e:	4b0e      	ldr	r3, [pc, #56]	@ (800caa8 <vPortValidateInterruptPriority+0x80>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d90b      	bls.n	800ca8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ca76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca7a:	f383 8811 	msr	BASEPRI, r3
 800ca7e:	f3bf 8f6f 	isb	sy
 800ca82:	f3bf 8f4f 	dsb	sy
 800ca86:	603b      	str	r3, [r7, #0]
}
 800ca88:	bf00      	nop
 800ca8a:	bf00      	nop
 800ca8c:	e7fd      	b.n	800ca8a <vPortValidateInterruptPriority+0x62>
	}
 800ca8e:	bf00      	nop
 800ca90:	3714      	adds	r7, #20
 800ca92:	46bd      	mov	sp, r7
 800ca94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca98:	4770      	bx	lr
 800ca9a:	bf00      	nop
 800ca9c:	e000e3f0 	.word	0xe000e3f0
 800caa0:	20001358 	.word	0x20001358
 800caa4:	e000ed0c 	.word	0xe000ed0c
 800caa8:	2000135c 	.word	0x2000135c

0800caac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b08a      	sub	sp, #40	@ 0x28
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cab4:	2300      	movs	r3, #0
 800cab6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cab8:	f7fe fc1a 	bl	800b2f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cabc:	4b5c      	ldr	r3, [pc, #368]	@ (800cc30 <pvPortMalloc+0x184>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d101      	bne.n	800cac8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cac4:	f000 f924 	bl	800cd10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cac8:	4b5a      	ldr	r3, [pc, #360]	@ (800cc34 <pvPortMalloc+0x188>)
 800caca:	681a      	ldr	r2, [r3, #0]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	4013      	ands	r3, r2
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	f040 8095 	bne.w	800cc00 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d01e      	beq.n	800cb1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cadc:	2208      	movs	r2, #8
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	4413      	add	r3, r2
 800cae2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f003 0307 	and.w	r3, r3, #7
 800caea:	2b00      	cmp	r3, #0
 800caec:	d015      	beq.n	800cb1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f023 0307 	bic.w	r3, r3, #7
 800caf4:	3308      	adds	r3, #8
 800caf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f003 0307 	and.w	r3, r3, #7
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d00b      	beq.n	800cb1a <pvPortMalloc+0x6e>
	__asm volatile
 800cb02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb06:	f383 8811 	msr	BASEPRI, r3
 800cb0a:	f3bf 8f6f 	isb	sy
 800cb0e:	f3bf 8f4f 	dsb	sy
 800cb12:	617b      	str	r3, [r7, #20]
}
 800cb14:	bf00      	nop
 800cb16:	bf00      	nop
 800cb18:	e7fd      	b.n	800cb16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d06f      	beq.n	800cc00 <pvPortMalloc+0x154>
 800cb20:	4b45      	ldr	r3, [pc, #276]	@ (800cc38 <pvPortMalloc+0x18c>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d86a      	bhi.n	800cc00 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cb2a:	4b44      	ldr	r3, [pc, #272]	@ (800cc3c <pvPortMalloc+0x190>)
 800cb2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cb2e:	4b43      	ldr	r3, [pc, #268]	@ (800cc3c <pvPortMalloc+0x190>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb34:	e004      	b.n	800cb40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cb36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cb3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb42:	685b      	ldr	r3, [r3, #4]
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d903      	bls.n	800cb52 <pvPortMalloc+0xa6>
 800cb4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d1f1      	bne.n	800cb36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cb52:	4b37      	ldr	r3, [pc, #220]	@ (800cc30 <pvPortMalloc+0x184>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	d051      	beq.n	800cc00 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cb5c:	6a3b      	ldr	r3, [r7, #32]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	2208      	movs	r2, #8
 800cb62:	4413      	add	r3, r2
 800cb64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cb66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb68:	681a      	ldr	r2, [r3, #0]
 800cb6a:	6a3b      	ldr	r3, [r7, #32]
 800cb6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cb6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb70:	685a      	ldr	r2, [r3, #4]
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	1ad2      	subs	r2, r2, r3
 800cb76:	2308      	movs	r3, #8
 800cb78:	005b      	lsls	r3, r3, #1
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d920      	bls.n	800cbc0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cb7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	4413      	add	r3, r2
 800cb84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb86:	69bb      	ldr	r3, [r7, #24]
 800cb88:	f003 0307 	and.w	r3, r3, #7
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d00b      	beq.n	800cba8 <pvPortMalloc+0xfc>
	__asm volatile
 800cb90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb94:	f383 8811 	msr	BASEPRI, r3
 800cb98:	f3bf 8f6f 	isb	sy
 800cb9c:	f3bf 8f4f 	dsb	sy
 800cba0:	613b      	str	r3, [r7, #16]
}
 800cba2:	bf00      	nop
 800cba4:	bf00      	nop
 800cba6:	e7fd      	b.n	800cba4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbaa:	685a      	ldr	r2, [r3, #4]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	1ad2      	subs	r2, r2, r3
 800cbb0:	69bb      	ldr	r3, [r7, #24]
 800cbb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cbb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cbba:	69b8      	ldr	r0, [r7, #24]
 800cbbc:	f000 f90a 	bl	800cdd4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cbc0:	4b1d      	ldr	r3, [pc, #116]	@ (800cc38 <pvPortMalloc+0x18c>)
 800cbc2:	681a      	ldr	r2, [r3, #0]
 800cbc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbc6:	685b      	ldr	r3, [r3, #4]
 800cbc8:	1ad3      	subs	r3, r2, r3
 800cbca:	4a1b      	ldr	r2, [pc, #108]	@ (800cc38 <pvPortMalloc+0x18c>)
 800cbcc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cbce:	4b1a      	ldr	r3, [pc, #104]	@ (800cc38 <pvPortMalloc+0x18c>)
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	4b1b      	ldr	r3, [pc, #108]	@ (800cc40 <pvPortMalloc+0x194>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d203      	bcs.n	800cbe2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cbda:	4b17      	ldr	r3, [pc, #92]	@ (800cc38 <pvPortMalloc+0x18c>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	4a18      	ldr	r2, [pc, #96]	@ (800cc40 <pvPortMalloc+0x194>)
 800cbe0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cbe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe4:	685a      	ldr	r2, [r3, #4]
 800cbe6:	4b13      	ldr	r3, [pc, #76]	@ (800cc34 <pvPortMalloc+0x188>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	431a      	orrs	r2, r3
 800cbec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cbf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cbf6:	4b13      	ldr	r3, [pc, #76]	@ (800cc44 <pvPortMalloc+0x198>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	4a11      	ldr	r2, [pc, #68]	@ (800cc44 <pvPortMalloc+0x198>)
 800cbfe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cc00:	f7fe fb84 	bl	800b30c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc04:	69fb      	ldr	r3, [r7, #28]
 800cc06:	f003 0307 	and.w	r3, r3, #7
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d00b      	beq.n	800cc26 <pvPortMalloc+0x17a>
	__asm volatile
 800cc0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc12:	f383 8811 	msr	BASEPRI, r3
 800cc16:	f3bf 8f6f 	isb	sy
 800cc1a:	f3bf 8f4f 	dsb	sy
 800cc1e:	60fb      	str	r3, [r7, #12]
}
 800cc20:	bf00      	nop
 800cc22:	bf00      	nop
 800cc24:	e7fd      	b.n	800cc22 <pvPortMalloc+0x176>
	return pvReturn;
 800cc26:	69fb      	ldr	r3, [r7, #28]
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3728      	adds	r7, #40	@ 0x28
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}
 800cc30:	20004f68 	.word	0x20004f68
 800cc34:	20004f7c 	.word	0x20004f7c
 800cc38:	20004f6c 	.word	0x20004f6c
 800cc3c:	20004f60 	.word	0x20004f60
 800cc40:	20004f70 	.word	0x20004f70
 800cc44:	20004f74 	.word	0x20004f74

0800cc48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b086      	sub	sp, #24
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d04f      	beq.n	800ccfa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cc5a:	2308      	movs	r3, #8
 800cc5c:	425b      	negs	r3, r3
 800cc5e:	697a      	ldr	r2, [r7, #20]
 800cc60:	4413      	add	r3, r2
 800cc62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	685a      	ldr	r2, [r3, #4]
 800cc6c:	4b25      	ldr	r3, [pc, #148]	@ (800cd04 <vPortFree+0xbc>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	4013      	ands	r3, r2
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d10b      	bne.n	800cc8e <vPortFree+0x46>
	__asm volatile
 800cc76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc7a:	f383 8811 	msr	BASEPRI, r3
 800cc7e:	f3bf 8f6f 	isb	sy
 800cc82:	f3bf 8f4f 	dsb	sy
 800cc86:	60fb      	str	r3, [r7, #12]
}
 800cc88:	bf00      	nop
 800cc8a:	bf00      	nop
 800cc8c:	e7fd      	b.n	800cc8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d00b      	beq.n	800ccae <vPortFree+0x66>
	__asm volatile
 800cc96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc9a:	f383 8811 	msr	BASEPRI, r3
 800cc9e:	f3bf 8f6f 	isb	sy
 800cca2:	f3bf 8f4f 	dsb	sy
 800cca6:	60bb      	str	r3, [r7, #8]
}
 800cca8:	bf00      	nop
 800ccaa:	bf00      	nop
 800ccac:	e7fd      	b.n	800ccaa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	685a      	ldr	r2, [r3, #4]
 800ccb2:	4b14      	ldr	r3, [pc, #80]	@ (800cd04 <vPortFree+0xbc>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	4013      	ands	r3, r2
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d01e      	beq.n	800ccfa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d11a      	bne.n	800ccfa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	685a      	ldr	r2, [r3, #4]
 800ccc8:	4b0e      	ldr	r3, [pc, #56]	@ (800cd04 <vPortFree+0xbc>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	43db      	mvns	r3, r3
 800ccce:	401a      	ands	r2, r3
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ccd4:	f7fe fb0c 	bl	800b2f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	685a      	ldr	r2, [r3, #4]
 800ccdc:	4b0a      	ldr	r3, [pc, #40]	@ (800cd08 <vPortFree+0xc0>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	4413      	add	r3, r2
 800cce2:	4a09      	ldr	r2, [pc, #36]	@ (800cd08 <vPortFree+0xc0>)
 800cce4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cce6:	6938      	ldr	r0, [r7, #16]
 800cce8:	f000 f874 	bl	800cdd4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ccec:	4b07      	ldr	r3, [pc, #28]	@ (800cd0c <vPortFree+0xc4>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	3301      	adds	r3, #1
 800ccf2:	4a06      	ldr	r2, [pc, #24]	@ (800cd0c <vPortFree+0xc4>)
 800ccf4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ccf6:	f7fe fb09 	bl	800b30c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ccfa:	bf00      	nop
 800ccfc:	3718      	adds	r7, #24
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}
 800cd02:	bf00      	nop
 800cd04:	20004f7c 	.word	0x20004f7c
 800cd08:	20004f6c 	.word	0x20004f6c
 800cd0c:	20004f78 	.word	0x20004f78

0800cd10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cd10:	b480      	push	{r7}
 800cd12:	b085      	sub	sp, #20
 800cd14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cd16:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800cd1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cd1c:	4b27      	ldr	r3, [pc, #156]	@ (800cdbc <prvHeapInit+0xac>)
 800cd1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	f003 0307 	and.w	r3, r3, #7
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d00c      	beq.n	800cd44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	3307      	adds	r3, #7
 800cd2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	f023 0307 	bic.w	r3, r3, #7
 800cd36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cd38:	68ba      	ldr	r2, [r7, #8]
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	1ad3      	subs	r3, r2, r3
 800cd3e:	4a1f      	ldr	r2, [pc, #124]	@ (800cdbc <prvHeapInit+0xac>)
 800cd40:	4413      	add	r3, r2
 800cd42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cd48:	4a1d      	ldr	r2, [pc, #116]	@ (800cdc0 <prvHeapInit+0xb0>)
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cd4e:	4b1c      	ldr	r3, [pc, #112]	@ (800cdc0 <prvHeapInit+0xb0>)
 800cd50:	2200      	movs	r2, #0
 800cd52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	68ba      	ldr	r2, [r7, #8]
 800cd58:	4413      	add	r3, r2
 800cd5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cd5c:	2208      	movs	r2, #8
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	1a9b      	subs	r3, r3, r2
 800cd62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	f023 0307 	bic.w	r3, r3, #7
 800cd6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	4a15      	ldr	r2, [pc, #84]	@ (800cdc4 <prvHeapInit+0xb4>)
 800cd70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cd72:	4b14      	ldr	r3, [pc, #80]	@ (800cdc4 <prvHeapInit+0xb4>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	2200      	movs	r2, #0
 800cd78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cd7a:	4b12      	ldr	r3, [pc, #72]	@ (800cdc4 <prvHeapInit+0xb4>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	68fa      	ldr	r2, [r7, #12]
 800cd8a:	1ad2      	subs	r2, r2, r3
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cd90:	4b0c      	ldr	r3, [pc, #48]	@ (800cdc4 <prvHeapInit+0xb4>)
 800cd92:	681a      	ldr	r2, [r3, #0]
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	685b      	ldr	r3, [r3, #4]
 800cd9c:	4a0a      	ldr	r2, [pc, #40]	@ (800cdc8 <prvHeapInit+0xb8>)
 800cd9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	685b      	ldr	r3, [r3, #4]
 800cda4:	4a09      	ldr	r2, [pc, #36]	@ (800cdcc <prvHeapInit+0xbc>)
 800cda6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cda8:	4b09      	ldr	r3, [pc, #36]	@ (800cdd0 <prvHeapInit+0xc0>)
 800cdaa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cdae:	601a      	str	r2, [r3, #0]
}
 800cdb0:	bf00      	nop
 800cdb2:	3714      	adds	r7, #20
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr
 800cdbc:	20001360 	.word	0x20001360
 800cdc0:	20004f60 	.word	0x20004f60
 800cdc4:	20004f68 	.word	0x20004f68
 800cdc8:	20004f70 	.word	0x20004f70
 800cdcc:	20004f6c 	.word	0x20004f6c
 800cdd0:	20004f7c 	.word	0x20004f7c

0800cdd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b085      	sub	sp, #20
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cddc:	4b28      	ldr	r3, [pc, #160]	@ (800ce80 <prvInsertBlockIntoFreeList+0xac>)
 800cdde:	60fb      	str	r3, [r7, #12]
 800cde0:	e002      	b.n	800cde8 <prvInsertBlockIntoFreeList+0x14>
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	60fb      	str	r3, [r7, #12]
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	687a      	ldr	r2, [r7, #4]
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	d8f7      	bhi.n	800cde2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	685b      	ldr	r3, [r3, #4]
 800cdfa:	68ba      	ldr	r2, [r7, #8]
 800cdfc:	4413      	add	r3, r2
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d108      	bne.n	800ce16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	685a      	ldr	r2, [r3, #4]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	441a      	add	r2, r3
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	685b      	ldr	r3, [r3, #4]
 800ce1e:	68ba      	ldr	r2, [r7, #8]
 800ce20:	441a      	add	r2, r3
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d118      	bne.n	800ce5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	681a      	ldr	r2, [r3, #0]
 800ce2e:	4b15      	ldr	r3, [pc, #84]	@ (800ce84 <prvInsertBlockIntoFreeList+0xb0>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d00d      	beq.n	800ce52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	685a      	ldr	r2, [r3, #4]
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	685b      	ldr	r3, [r3, #4]
 800ce40:	441a      	add	r2, r3
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	681a      	ldr	r2, [r3, #0]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	601a      	str	r2, [r3, #0]
 800ce50:	e008      	b.n	800ce64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ce52:	4b0c      	ldr	r3, [pc, #48]	@ (800ce84 <prvInsertBlockIntoFreeList+0xb0>)
 800ce54:	681a      	ldr	r2, [r3, #0]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	601a      	str	r2, [r3, #0]
 800ce5a:	e003      	b.n	800ce64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	681a      	ldr	r2, [r3, #0]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ce64:	68fa      	ldr	r2, [r7, #12]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d002      	beq.n	800ce72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	687a      	ldr	r2, [r7, #4]
 800ce70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce72:	bf00      	nop
 800ce74:	3714      	adds	r7, #20
 800ce76:	46bd      	mov	sp, r7
 800ce78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7c:	4770      	bx	lr
 800ce7e:	bf00      	nop
 800ce80:	20004f60 	.word	0x20004f60
 800ce84:	20004f68 	.word	0x20004f68

0800ce88 <atoi>:
 800ce88:	220a      	movs	r2, #10
 800ce8a:	2100      	movs	r1, #0
 800ce8c:	f000 b9fe 	b.w	800d28c <strtol>

0800ce90 <malloc>:
 800ce90:	4b02      	ldr	r3, [pc, #8]	@ (800ce9c <malloc+0xc>)
 800ce92:	4601      	mov	r1, r0
 800ce94:	6818      	ldr	r0, [r3, #0]
 800ce96:	f000 b82d 	b.w	800cef4 <_malloc_r>
 800ce9a:	bf00      	nop
 800ce9c:	20000064 	.word	0x20000064

0800cea0 <free>:
 800cea0:	4b02      	ldr	r3, [pc, #8]	@ (800ceac <free+0xc>)
 800cea2:	4601      	mov	r1, r0
 800cea4:	6818      	ldr	r0, [r3, #0]
 800cea6:	f000 bf69 	b.w	800dd7c <_free_r>
 800ceaa:	bf00      	nop
 800ceac:	20000064 	.word	0x20000064

0800ceb0 <sbrk_aligned>:
 800ceb0:	b570      	push	{r4, r5, r6, lr}
 800ceb2:	4e0f      	ldr	r6, [pc, #60]	@ (800cef0 <sbrk_aligned+0x40>)
 800ceb4:	460c      	mov	r4, r1
 800ceb6:	6831      	ldr	r1, [r6, #0]
 800ceb8:	4605      	mov	r5, r0
 800ceba:	b911      	cbnz	r1, 800cec2 <sbrk_aligned+0x12>
 800cebc:	f000 fee6 	bl	800dc8c <_sbrk_r>
 800cec0:	6030      	str	r0, [r6, #0]
 800cec2:	4621      	mov	r1, r4
 800cec4:	4628      	mov	r0, r5
 800cec6:	f000 fee1 	bl	800dc8c <_sbrk_r>
 800ceca:	1c43      	adds	r3, r0, #1
 800cecc:	d103      	bne.n	800ced6 <sbrk_aligned+0x26>
 800cece:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ced2:	4620      	mov	r0, r4
 800ced4:	bd70      	pop	{r4, r5, r6, pc}
 800ced6:	1cc4      	adds	r4, r0, #3
 800ced8:	f024 0403 	bic.w	r4, r4, #3
 800cedc:	42a0      	cmp	r0, r4
 800cede:	d0f8      	beq.n	800ced2 <sbrk_aligned+0x22>
 800cee0:	1a21      	subs	r1, r4, r0
 800cee2:	4628      	mov	r0, r5
 800cee4:	f000 fed2 	bl	800dc8c <_sbrk_r>
 800cee8:	3001      	adds	r0, #1
 800ceea:	d1f2      	bne.n	800ced2 <sbrk_aligned+0x22>
 800ceec:	e7ef      	b.n	800cece <sbrk_aligned+0x1e>
 800ceee:	bf00      	nop
 800cef0:	20004f80 	.word	0x20004f80

0800cef4 <_malloc_r>:
 800cef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cef8:	1ccd      	adds	r5, r1, #3
 800cefa:	f025 0503 	bic.w	r5, r5, #3
 800cefe:	3508      	adds	r5, #8
 800cf00:	2d0c      	cmp	r5, #12
 800cf02:	bf38      	it	cc
 800cf04:	250c      	movcc	r5, #12
 800cf06:	2d00      	cmp	r5, #0
 800cf08:	4606      	mov	r6, r0
 800cf0a:	db01      	blt.n	800cf10 <_malloc_r+0x1c>
 800cf0c:	42a9      	cmp	r1, r5
 800cf0e:	d904      	bls.n	800cf1a <_malloc_r+0x26>
 800cf10:	230c      	movs	r3, #12
 800cf12:	6033      	str	r3, [r6, #0]
 800cf14:	2000      	movs	r0, #0
 800cf16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cff0 <_malloc_r+0xfc>
 800cf1e:	f000 f869 	bl	800cff4 <__malloc_lock>
 800cf22:	f8d8 3000 	ldr.w	r3, [r8]
 800cf26:	461c      	mov	r4, r3
 800cf28:	bb44      	cbnz	r4, 800cf7c <_malloc_r+0x88>
 800cf2a:	4629      	mov	r1, r5
 800cf2c:	4630      	mov	r0, r6
 800cf2e:	f7ff ffbf 	bl	800ceb0 <sbrk_aligned>
 800cf32:	1c43      	adds	r3, r0, #1
 800cf34:	4604      	mov	r4, r0
 800cf36:	d158      	bne.n	800cfea <_malloc_r+0xf6>
 800cf38:	f8d8 4000 	ldr.w	r4, [r8]
 800cf3c:	4627      	mov	r7, r4
 800cf3e:	2f00      	cmp	r7, #0
 800cf40:	d143      	bne.n	800cfca <_malloc_r+0xd6>
 800cf42:	2c00      	cmp	r4, #0
 800cf44:	d04b      	beq.n	800cfde <_malloc_r+0xea>
 800cf46:	6823      	ldr	r3, [r4, #0]
 800cf48:	4639      	mov	r1, r7
 800cf4a:	4630      	mov	r0, r6
 800cf4c:	eb04 0903 	add.w	r9, r4, r3
 800cf50:	f000 fe9c 	bl	800dc8c <_sbrk_r>
 800cf54:	4581      	cmp	r9, r0
 800cf56:	d142      	bne.n	800cfde <_malloc_r+0xea>
 800cf58:	6821      	ldr	r1, [r4, #0]
 800cf5a:	1a6d      	subs	r5, r5, r1
 800cf5c:	4629      	mov	r1, r5
 800cf5e:	4630      	mov	r0, r6
 800cf60:	f7ff ffa6 	bl	800ceb0 <sbrk_aligned>
 800cf64:	3001      	adds	r0, #1
 800cf66:	d03a      	beq.n	800cfde <_malloc_r+0xea>
 800cf68:	6823      	ldr	r3, [r4, #0]
 800cf6a:	442b      	add	r3, r5
 800cf6c:	6023      	str	r3, [r4, #0]
 800cf6e:	f8d8 3000 	ldr.w	r3, [r8]
 800cf72:	685a      	ldr	r2, [r3, #4]
 800cf74:	bb62      	cbnz	r2, 800cfd0 <_malloc_r+0xdc>
 800cf76:	f8c8 7000 	str.w	r7, [r8]
 800cf7a:	e00f      	b.n	800cf9c <_malloc_r+0xa8>
 800cf7c:	6822      	ldr	r2, [r4, #0]
 800cf7e:	1b52      	subs	r2, r2, r5
 800cf80:	d420      	bmi.n	800cfc4 <_malloc_r+0xd0>
 800cf82:	2a0b      	cmp	r2, #11
 800cf84:	d917      	bls.n	800cfb6 <_malloc_r+0xc2>
 800cf86:	1961      	adds	r1, r4, r5
 800cf88:	42a3      	cmp	r3, r4
 800cf8a:	6025      	str	r5, [r4, #0]
 800cf8c:	bf18      	it	ne
 800cf8e:	6059      	strne	r1, [r3, #4]
 800cf90:	6863      	ldr	r3, [r4, #4]
 800cf92:	bf08      	it	eq
 800cf94:	f8c8 1000 	streq.w	r1, [r8]
 800cf98:	5162      	str	r2, [r4, r5]
 800cf9a:	604b      	str	r3, [r1, #4]
 800cf9c:	4630      	mov	r0, r6
 800cf9e:	f000 f82f 	bl	800d000 <__malloc_unlock>
 800cfa2:	f104 000b 	add.w	r0, r4, #11
 800cfa6:	1d23      	adds	r3, r4, #4
 800cfa8:	f020 0007 	bic.w	r0, r0, #7
 800cfac:	1ac2      	subs	r2, r0, r3
 800cfae:	bf1c      	itt	ne
 800cfb0:	1a1b      	subne	r3, r3, r0
 800cfb2:	50a3      	strne	r3, [r4, r2]
 800cfb4:	e7af      	b.n	800cf16 <_malloc_r+0x22>
 800cfb6:	6862      	ldr	r2, [r4, #4]
 800cfb8:	42a3      	cmp	r3, r4
 800cfba:	bf0c      	ite	eq
 800cfbc:	f8c8 2000 	streq.w	r2, [r8]
 800cfc0:	605a      	strne	r2, [r3, #4]
 800cfc2:	e7eb      	b.n	800cf9c <_malloc_r+0xa8>
 800cfc4:	4623      	mov	r3, r4
 800cfc6:	6864      	ldr	r4, [r4, #4]
 800cfc8:	e7ae      	b.n	800cf28 <_malloc_r+0x34>
 800cfca:	463c      	mov	r4, r7
 800cfcc:	687f      	ldr	r7, [r7, #4]
 800cfce:	e7b6      	b.n	800cf3e <_malloc_r+0x4a>
 800cfd0:	461a      	mov	r2, r3
 800cfd2:	685b      	ldr	r3, [r3, #4]
 800cfd4:	42a3      	cmp	r3, r4
 800cfd6:	d1fb      	bne.n	800cfd0 <_malloc_r+0xdc>
 800cfd8:	2300      	movs	r3, #0
 800cfda:	6053      	str	r3, [r2, #4]
 800cfdc:	e7de      	b.n	800cf9c <_malloc_r+0xa8>
 800cfde:	230c      	movs	r3, #12
 800cfe0:	6033      	str	r3, [r6, #0]
 800cfe2:	4630      	mov	r0, r6
 800cfe4:	f000 f80c 	bl	800d000 <__malloc_unlock>
 800cfe8:	e794      	b.n	800cf14 <_malloc_r+0x20>
 800cfea:	6005      	str	r5, [r0, #0]
 800cfec:	e7d6      	b.n	800cf9c <_malloc_r+0xa8>
 800cfee:	bf00      	nop
 800cff0:	20004f84 	.word	0x20004f84

0800cff4 <__malloc_lock>:
 800cff4:	4801      	ldr	r0, [pc, #4]	@ (800cffc <__malloc_lock+0x8>)
 800cff6:	f000 be89 	b.w	800dd0c <__retarget_lock_acquire_recursive>
 800cffa:	bf00      	nop
 800cffc:	200050ee 	.word	0x200050ee

0800d000 <__malloc_unlock>:
 800d000:	4801      	ldr	r0, [pc, #4]	@ (800d008 <__malloc_unlock+0x8>)
 800d002:	f000 be85 	b.w	800dd10 <__retarget_lock_release_recursive>
 800d006:	bf00      	nop
 800d008:	200050ee 	.word	0x200050ee

0800d00c <siprintf>:
 800d00c:	b40e      	push	{r1, r2, r3}
 800d00e:	b500      	push	{lr}
 800d010:	b09c      	sub	sp, #112	@ 0x70
 800d012:	ab1d      	add	r3, sp, #116	@ 0x74
 800d014:	9002      	str	r0, [sp, #8]
 800d016:	9006      	str	r0, [sp, #24]
 800d018:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d01c:	4809      	ldr	r0, [pc, #36]	@ (800d044 <siprintf+0x38>)
 800d01e:	9107      	str	r1, [sp, #28]
 800d020:	9104      	str	r1, [sp, #16]
 800d022:	4909      	ldr	r1, [pc, #36]	@ (800d048 <siprintf+0x3c>)
 800d024:	f853 2b04 	ldr.w	r2, [r3], #4
 800d028:	9105      	str	r1, [sp, #20]
 800d02a:	6800      	ldr	r0, [r0, #0]
 800d02c:	9301      	str	r3, [sp, #4]
 800d02e:	a902      	add	r1, sp, #8
 800d030:	f000 ff8c 	bl	800df4c <_svfiprintf_r>
 800d034:	9b02      	ldr	r3, [sp, #8]
 800d036:	2200      	movs	r2, #0
 800d038:	701a      	strb	r2, [r3, #0]
 800d03a:	b01c      	add	sp, #112	@ 0x70
 800d03c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d040:	b003      	add	sp, #12
 800d042:	4770      	bx	lr
 800d044:	20000064 	.word	0x20000064
 800d048:	ffff0208 	.word	0xffff0208

0800d04c <std>:
 800d04c:	2300      	movs	r3, #0
 800d04e:	b510      	push	{r4, lr}
 800d050:	4604      	mov	r4, r0
 800d052:	e9c0 3300 	strd	r3, r3, [r0]
 800d056:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d05a:	6083      	str	r3, [r0, #8]
 800d05c:	8181      	strh	r1, [r0, #12]
 800d05e:	6643      	str	r3, [r0, #100]	@ 0x64
 800d060:	81c2      	strh	r2, [r0, #14]
 800d062:	6183      	str	r3, [r0, #24]
 800d064:	4619      	mov	r1, r3
 800d066:	2208      	movs	r2, #8
 800d068:	305c      	adds	r0, #92	@ 0x5c
 800d06a:	f000 f9c6 	bl	800d3fa <memset>
 800d06e:	4b0d      	ldr	r3, [pc, #52]	@ (800d0a4 <std+0x58>)
 800d070:	6263      	str	r3, [r4, #36]	@ 0x24
 800d072:	4b0d      	ldr	r3, [pc, #52]	@ (800d0a8 <std+0x5c>)
 800d074:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d076:	4b0d      	ldr	r3, [pc, #52]	@ (800d0ac <std+0x60>)
 800d078:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d07a:	4b0d      	ldr	r3, [pc, #52]	@ (800d0b0 <std+0x64>)
 800d07c:	6323      	str	r3, [r4, #48]	@ 0x30
 800d07e:	4b0d      	ldr	r3, [pc, #52]	@ (800d0b4 <std+0x68>)
 800d080:	6224      	str	r4, [r4, #32]
 800d082:	429c      	cmp	r4, r3
 800d084:	d006      	beq.n	800d094 <std+0x48>
 800d086:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d08a:	4294      	cmp	r4, r2
 800d08c:	d002      	beq.n	800d094 <std+0x48>
 800d08e:	33d0      	adds	r3, #208	@ 0xd0
 800d090:	429c      	cmp	r4, r3
 800d092:	d105      	bne.n	800d0a0 <std+0x54>
 800d094:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d09c:	f000 be34 	b.w	800dd08 <__retarget_lock_init_recursive>
 800d0a0:	bd10      	pop	{r4, pc}
 800d0a2:	bf00      	nop
 800d0a4:	0800e891 	.word	0x0800e891
 800d0a8:	0800e8b7 	.word	0x0800e8b7
 800d0ac:	0800e8ef 	.word	0x0800e8ef
 800d0b0:	0800e913 	.word	0x0800e913
 800d0b4:	20004f88 	.word	0x20004f88

0800d0b8 <stdio_exit_handler>:
 800d0b8:	4a02      	ldr	r2, [pc, #8]	@ (800d0c4 <stdio_exit_handler+0xc>)
 800d0ba:	4903      	ldr	r1, [pc, #12]	@ (800d0c8 <stdio_exit_handler+0x10>)
 800d0bc:	4803      	ldr	r0, [pc, #12]	@ (800d0cc <stdio_exit_handler+0x14>)
 800d0be:	f000 b8ef 	b.w	800d2a0 <_fwalk_sglue>
 800d0c2:	bf00      	nop
 800d0c4:	20000050 	.word	0x20000050
 800d0c8:	0800e7ed 	.word	0x0800e7ed
 800d0cc:	20000068 	.word	0x20000068

0800d0d0 <cleanup_stdio>:
 800d0d0:	6841      	ldr	r1, [r0, #4]
 800d0d2:	4b0c      	ldr	r3, [pc, #48]	@ (800d104 <cleanup_stdio+0x34>)
 800d0d4:	4299      	cmp	r1, r3
 800d0d6:	b510      	push	{r4, lr}
 800d0d8:	4604      	mov	r4, r0
 800d0da:	d001      	beq.n	800d0e0 <cleanup_stdio+0x10>
 800d0dc:	f001 fb86 	bl	800e7ec <_fflush_r>
 800d0e0:	68a1      	ldr	r1, [r4, #8]
 800d0e2:	4b09      	ldr	r3, [pc, #36]	@ (800d108 <cleanup_stdio+0x38>)
 800d0e4:	4299      	cmp	r1, r3
 800d0e6:	d002      	beq.n	800d0ee <cleanup_stdio+0x1e>
 800d0e8:	4620      	mov	r0, r4
 800d0ea:	f001 fb7f 	bl	800e7ec <_fflush_r>
 800d0ee:	68e1      	ldr	r1, [r4, #12]
 800d0f0:	4b06      	ldr	r3, [pc, #24]	@ (800d10c <cleanup_stdio+0x3c>)
 800d0f2:	4299      	cmp	r1, r3
 800d0f4:	d004      	beq.n	800d100 <cleanup_stdio+0x30>
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0fc:	f001 bb76 	b.w	800e7ec <_fflush_r>
 800d100:	bd10      	pop	{r4, pc}
 800d102:	bf00      	nop
 800d104:	20004f88 	.word	0x20004f88
 800d108:	20004ff0 	.word	0x20004ff0
 800d10c:	20005058 	.word	0x20005058

0800d110 <global_stdio_init.part.0>:
 800d110:	b510      	push	{r4, lr}
 800d112:	4b0b      	ldr	r3, [pc, #44]	@ (800d140 <global_stdio_init.part.0+0x30>)
 800d114:	4c0b      	ldr	r4, [pc, #44]	@ (800d144 <global_stdio_init.part.0+0x34>)
 800d116:	4a0c      	ldr	r2, [pc, #48]	@ (800d148 <global_stdio_init.part.0+0x38>)
 800d118:	601a      	str	r2, [r3, #0]
 800d11a:	4620      	mov	r0, r4
 800d11c:	2200      	movs	r2, #0
 800d11e:	2104      	movs	r1, #4
 800d120:	f7ff ff94 	bl	800d04c <std>
 800d124:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d128:	2201      	movs	r2, #1
 800d12a:	2109      	movs	r1, #9
 800d12c:	f7ff ff8e 	bl	800d04c <std>
 800d130:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d134:	2202      	movs	r2, #2
 800d136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d13a:	2112      	movs	r1, #18
 800d13c:	f7ff bf86 	b.w	800d04c <std>
 800d140:	200050c0 	.word	0x200050c0
 800d144:	20004f88 	.word	0x20004f88
 800d148:	0800d0b9 	.word	0x0800d0b9

0800d14c <__sfp_lock_acquire>:
 800d14c:	4801      	ldr	r0, [pc, #4]	@ (800d154 <__sfp_lock_acquire+0x8>)
 800d14e:	f000 bddd 	b.w	800dd0c <__retarget_lock_acquire_recursive>
 800d152:	bf00      	nop
 800d154:	200050ef 	.word	0x200050ef

0800d158 <__sfp_lock_release>:
 800d158:	4801      	ldr	r0, [pc, #4]	@ (800d160 <__sfp_lock_release+0x8>)
 800d15a:	f000 bdd9 	b.w	800dd10 <__retarget_lock_release_recursive>
 800d15e:	bf00      	nop
 800d160:	200050ef 	.word	0x200050ef

0800d164 <__sinit>:
 800d164:	b510      	push	{r4, lr}
 800d166:	4604      	mov	r4, r0
 800d168:	f7ff fff0 	bl	800d14c <__sfp_lock_acquire>
 800d16c:	6a23      	ldr	r3, [r4, #32]
 800d16e:	b11b      	cbz	r3, 800d178 <__sinit+0x14>
 800d170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d174:	f7ff bff0 	b.w	800d158 <__sfp_lock_release>
 800d178:	4b04      	ldr	r3, [pc, #16]	@ (800d18c <__sinit+0x28>)
 800d17a:	6223      	str	r3, [r4, #32]
 800d17c:	4b04      	ldr	r3, [pc, #16]	@ (800d190 <__sinit+0x2c>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d1f5      	bne.n	800d170 <__sinit+0xc>
 800d184:	f7ff ffc4 	bl	800d110 <global_stdio_init.part.0>
 800d188:	e7f2      	b.n	800d170 <__sinit+0xc>
 800d18a:	bf00      	nop
 800d18c:	0800d0d1 	.word	0x0800d0d1
 800d190:	200050c0 	.word	0x200050c0

0800d194 <_strtol_l.constprop.0>:
 800d194:	2b24      	cmp	r3, #36	@ 0x24
 800d196:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d19a:	4686      	mov	lr, r0
 800d19c:	4690      	mov	r8, r2
 800d19e:	d801      	bhi.n	800d1a4 <_strtol_l.constprop.0+0x10>
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d106      	bne.n	800d1b2 <_strtol_l.constprop.0+0x1e>
 800d1a4:	f000 fd86 	bl	800dcb4 <__errno>
 800d1a8:	2316      	movs	r3, #22
 800d1aa:	6003      	str	r3, [r0, #0]
 800d1ac:	2000      	movs	r0, #0
 800d1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1b2:	4834      	ldr	r0, [pc, #208]	@ (800d284 <_strtol_l.constprop.0+0xf0>)
 800d1b4:	460d      	mov	r5, r1
 800d1b6:	462a      	mov	r2, r5
 800d1b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d1bc:	5d06      	ldrb	r6, [r0, r4]
 800d1be:	f016 0608 	ands.w	r6, r6, #8
 800d1c2:	d1f8      	bne.n	800d1b6 <_strtol_l.constprop.0+0x22>
 800d1c4:	2c2d      	cmp	r4, #45	@ 0x2d
 800d1c6:	d12d      	bne.n	800d224 <_strtol_l.constprop.0+0x90>
 800d1c8:	782c      	ldrb	r4, [r5, #0]
 800d1ca:	2601      	movs	r6, #1
 800d1cc:	1c95      	adds	r5, r2, #2
 800d1ce:	f033 0210 	bics.w	r2, r3, #16
 800d1d2:	d109      	bne.n	800d1e8 <_strtol_l.constprop.0+0x54>
 800d1d4:	2c30      	cmp	r4, #48	@ 0x30
 800d1d6:	d12a      	bne.n	800d22e <_strtol_l.constprop.0+0x9a>
 800d1d8:	782a      	ldrb	r2, [r5, #0]
 800d1da:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d1de:	2a58      	cmp	r2, #88	@ 0x58
 800d1e0:	d125      	bne.n	800d22e <_strtol_l.constprop.0+0x9a>
 800d1e2:	786c      	ldrb	r4, [r5, #1]
 800d1e4:	2310      	movs	r3, #16
 800d1e6:	3502      	adds	r5, #2
 800d1e8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d1ec:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	fbbc f9f3 	udiv	r9, ip, r3
 800d1f6:	4610      	mov	r0, r2
 800d1f8:	fb03 ca19 	mls	sl, r3, r9, ip
 800d1fc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d200:	2f09      	cmp	r7, #9
 800d202:	d81b      	bhi.n	800d23c <_strtol_l.constprop.0+0xa8>
 800d204:	463c      	mov	r4, r7
 800d206:	42a3      	cmp	r3, r4
 800d208:	dd27      	ble.n	800d25a <_strtol_l.constprop.0+0xc6>
 800d20a:	1c57      	adds	r7, r2, #1
 800d20c:	d007      	beq.n	800d21e <_strtol_l.constprop.0+0x8a>
 800d20e:	4581      	cmp	r9, r0
 800d210:	d320      	bcc.n	800d254 <_strtol_l.constprop.0+0xc0>
 800d212:	d101      	bne.n	800d218 <_strtol_l.constprop.0+0x84>
 800d214:	45a2      	cmp	sl, r4
 800d216:	db1d      	blt.n	800d254 <_strtol_l.constprop.0+0xc0>
 800d218:	fb00 4003 	mla	r0, r0, r3, r4
 800d21c:	2201      	movs	r2, #1
 800d21e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d222:	e7eb      	b.n	800d1fc <_strtol_l.constprop.0+0x68>
 800d224:	2c2b      	cmp	r4, #43	@ 0x2b
 800d226:	bf04      	itt	eq
 800d228:	782c      	ldrbeq	r4, [r5, #0]
 800d22a:	1c95      	addeq	r5, r2, #2
 800d22c:	e7cf      	b.n	800d1ce <_strtol_l.constprop.0+0x3a>
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d1da      	bne.n	800d1e8 <_strtol_l.constprop.0+0x54>
 800d232:	2c30      	cmp	r4, #48	@ 0x30
 800d234:	bf0c      	ite	eq
 800d236:	2308      	moveq	r3, #8
 800d238:	230a      	movne	r3, #10
 800d23a:	e7d5      	b.n	800d1e8 <_strtol_l.constprop.0+0x54>
 800d23c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d240:	2f19      	cmp	r7, #25
 800d242:	d801      	bhi.n	800d248 <_strtol_l.constprop.0+0xb4>
 800d244:	3c37      	subs	r4, #55	@ 0x37
 800d246:	e7de      	b.n	800d206 <_strtol_l.constprop.0+0x72>
 800d248:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d24c:	2f19      	cmp	r7, #25
 800d24e:	d804      	bhi.n	800d25a <_strtol_l.constprop.0+0xc6>
 800d250:	3c57      	subs	r4, #87	@ 0x57
 800d252:	e7d8      	b.n	800d206 <_strtol_l.constprop.0+0x72>
 800d254:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d258:	e7e1      	b.n	800d21e <_strtol_l.constprop.0+0x8a>
 800d25a:	1c53      	adds	r3, r2, #1
 800d25c:	d108      	bne.n	800d270 <_strtol_l.constprop.0+0xdc>
 800d25e:	2322      	movs	r3, #34	@ 0x22
 800d260:	f8ce 3000 	str.w	r3, [lr]
 800d264:	4660      	mov	r0, ip
 800d266:	f1b8 0f00 	cmp.w	r8, #0
 800d26a:	d0a0      	beq.n	800d1ae <_strtol_l.constprop.0+0x1a>
 800d26c:	1e69      	subs	r1, r5, #1
 800d26e:	e006      	b.n	800d27e <_strtol_l.constprop.0+0xea>
 800d270:	b106      	cbz	r6, 800d274 <_strtol_l.constprop.0+0xe0>
 800d272:	4240      	negs	r0, r0
 800d274:	f1b8 0f00 	cmp.w	r8, #0
 800d278:	d099      	beq.n	800d1ae <_strtol_l.constprop.0+0x1a>
 800d27a:	2a00      	cmp	r2, #0
 800d27c:	d1f6      	bne.n	800d26c <_strtol_l.constprop.0+0xd8>
 800d27e:	f8c8 1000 	str.w	r1, [r8]
 800d282:	e794      	b.n	800d1ae <_strtol_l.constprop.0+0x1a>
 800d284:	08012c37 	.word	0x08012c37

0800d288 <_strtol_r>:
 800d288:	f7ff bf84 	b.w	800d194 <_strtol_l.constprop.0>

0800d28c <strtol>:
 800d28c:	4613      	mov	r3, r2
 800d28e:	460a      	mov	r2, r1
 800d290:	4601      	mov	r1, r0
 800d292:	4802      	ldr	r0, [pc, #8]	@ (800d29c <strtol+0x10>)
 800d294:	6800      	ldr	r0, [r0, #0]
 800d296:	f7ff bf7d 	b.w	800d194 <_strtol_l.constprop.0>
 800d29a:	bf00      	nop
 800d29c:	20000064 	.word	0x20000064

0800d2a0 <_fwalk_sglue>:
 800d2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2a4:	4607      	mov	r7, r0
 800d2a6:	4688      	mov	r8, r1
 800d2a8:	4614      	mov	r4, r2
 800d2aa:	2600      	movs	r6, #0
 800d2ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d2b0:	f1b9 0901 	subs.w	r9, r9, #1
 800d2b4:	d505      	bpl.n	800d2c2 <_fwalk_sglue+0x22>
 800d2b6:	6824      	ldr	r4, [r4, #0]
 800d2b8:	2c00      	cmp	r4, #0
 800d2ba:	d1f7      	bne.n	800d2ac <_fwalk_sglue+0xc>
 800d2bc:	4630      	mov	r0, r6
 800d2be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2c2:	89ab      	ldrh	r3, [r5, #12]
 800d2c4:	2b01      	cmp	r3, #1
 800d2c6:	d907      	bls.n	800d2d8 <_fwalk_sglue+0x38>
 800d2c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	d003      	beq.n	800d2d8 <_fwalk_sglue+0x38>
 800d2d0:	4629      	mov	r1, r5
 800d2d2:	4638      	mov	r0, r7
 800d2d4:	47c0      	blx	r8
 800d2d6:	4306      	orrs	r6, r0
 800d2d8:	3568      	adds	r5, #104	@ 0x68
 800d2da:	e7e9      	b.n	800d2b0 <_fwalk_sglue+0x10>

0800d2dc <iprintf>:
 800d2dc:	b40f      	push	{r0, r1, r2, r3}
 800d2de:	b507      	push	{r0, r1, r2, lr}
 800d2e0:	4906      	ldr	r1, [pc, #24]	@ (800d2fc <iprintf+0x20>)
 800d2e2:	ab04      	add	r3, sp, #16
 800d2e4:	6808      	ldr	r0, [r1, #0]
 800d2e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2ea:	6881      	ldr	r1, [r0, #8]
 800d2ec:	9301      	str	r3, [sp, #4]
 800d2ee:	f000 ff53 	bl	800e198 <_vfiprintf_r>
 800d2f2:	b003      	add	sp, #12
 800d2f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2f8:	b004      	add	sp, #16
 800d2fa:	4770      	bx	lr
 800d2fc:	20000064 	.word	0x20000064

0800d300 <_puts_r>:
 800d300:	6a03      	ldr	r3, [r0, #32]
 800d302:	b570      	push	{r4, r5, r6, lr}
 800d304:	6884      	ldr	r4, [r0, #8]
 800d306:	4605      	mov	r5, r0
 800d308:	460e      	mov	r6, r1
 800d30a:	b90b      	cbnz	r3, 800d310 <_puts_r+0x10>
 800d30c:	f7ff ff2a 	bl	800d164 <__sinit>
 800d310:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d312:	07db      	lsls	r3, r3, #31
 800d314:	d405      	bmi.n	800d322 <_puts_r+0x22>
 800d316:	89a3      	ldrh	r3, [r4, #12]
 800d318:	0598      	lsls	r0, r3, #22
 800d31a:	d402      	bmi.n	800d322 <_puts_r+0x22>
 800d31c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d31e:	f000 fcf5 	bl	800dd0c <__retarget_lock_acquire_recursive>
 800d322:	89a3      	ldrh	r3, [r4, #12]
 800d324:	0719      	lsls	r1, r3, #28
 800d326:	d502      	bpl.n	800d32e <_puts_r+0x2e>
 800d328:	6923      	ldr	r3, [r4, #16]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d135      	bne.n	800d39a <_puts_r+0x9a>
 800d32e:	4621      	mov	r1, r4
 800d330:	4628      	mov	r0, r5
 800d332:	f001 fbeb 	bl	800eb0c <__swsetup_r>
 800d336:	b380      	cbz	r0, 800d39a <_puts_r+0x9a>
 800d338:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800d33c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d33e:	07da      	lsls	r2, r3, #31
 800d340:	d405      	bmi.n	800d34e <_puts_r+0x4e>
 800d342:	89a3      	ldrh	r3, [r4, #12]
 800d344:	059b      	lsls	r3, r3, #22
 800d346:	d402      	bmi.n	800d34e <_puts_r+0x4e>
 800d348:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d34a:	f000 fce1 	bl	800dd10 <__retarget_lock_release_recursive>
 800d34e:	4628      	mov	r0, r5
 800d350:	bd70      	pop	{r4, r5, r6, pc}
 800d352:	2b00      	cmp	r3, #0
 800d354:	da04      	bge.n	800d360 <_puts_r+0x60>
 800d356:	69a2      	ldr	r2, [r4, #24]
 800d358:	429a      	cmp	r2, r3
 800d35a:	dc17      	bgt.n	800d38c <_puts_r+0x8c>
 800d35c:	290a      	cmp	r1, #10
 800d35e:	d015      	beq.n	800d38c <_puts_r+0x8c>
 800d360:	6823      	ldr	r3, [r4, #0]
 800d362:	1c5a      	adds	r2, r3, #1
 800d364:	6022      	str	r2, [r4, #0]
 800d366:	7019      	strb	r1, [r3, #0]
 800d368:	68a3      	ldr	r3, [r4, #8]
 800d36a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d36e:	3b01      	subs	r3, #1
 800d370:	60a3      	str	r3, [r4, #8]
 800d372:	2900      	cmp	r1, #0
 800d374:	d1ed      	bne.n	800d352 <_puts_r+0x52>
 800d376:	2b00      	cmp	r3, #0
 800d378:	da11      	bge.n	800d39e <_puts_r+0x9e>
 800d37a:	4622      	mov	r2, r4
 800d37c:	210a      	movs	r1, #10
 800d37e:	4628      	mov	r0, r5
 800d380:	f001 fb86 	bl	800ea90 <__swbuf_r>
 800d384:	3001      	adds	r0, #1
 800d386:	d0d7      	beq.n	800d338 <_puts_r+0x38>
 800d388:	250a      	movs	r5, #10
 800d38a:	e7d7      	b.n	800d33c <_puts_r+0x3c>
 800d38c:	4622      	mov	r2, r4
 800d38e:	4628      	mov	r0, r5
 800d390:	f001 fb7e 	bl	800ea90 <__swbuf_r>
 800d394:	3001      	adds	r0, #1
 800d396:	d1e7      	bne.n	800d368 <_puts_r+0x68>
 800d398:	e7ce      	b.n	800d338 <_puts_r+0x38>
 800d39a:	3e01      	subs	r6, #1
 800d39c:	e7e4      	b.n	800d368 <_puts_r+0x68>
 800d39e:	6823      	ldr	r3, [r4, #0]
 800d3a0:	1c5a      	adds	r2, r3, #1
 800d3a2:	6022      	str	r2, [r4, #0]
 800d3a4:	220a      	movs	r2, #10
 800d3a6:	701a      	strb	r2, [r3, #0]
 800d3a8:	e7ee      	b.n	800d388 <_puts_r+0x88>
	...

0800d3ac <puts>:
 800d3ac:	4b02      	ldr	r3, [pc, #8]	@ (800d3b8 <puts+0xc>)
 800d3ae:	4601      	mov	r1, r0
 800d3b0:	6818      	ldr	r0, [r3, #0]
 800d3b2:	f7ff bfa5 	b.w	800d300 <_puts_r>
 800d3b6:	bf00      	nop
 800d3b8:	20000064 	.word	0x20000064

0800d3bc <strchr>:
 800d3bc:	b2c9      	uxtb	r1, r1
 800d3be:	4603      	mov	r3, r0
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3c6:	b112      	cbz	r2, 800d3ce <strchr+0x12>
 800d3c8:	428a      	cmp	r2, r1
 800d3ca:	d1f9      	bne.n	800d3c0 <strchr+0x4>
 800d3cc:	4770      	bx	lr
 800d3ce:	2900      	cmp	r1, #0
 800d3d0:	bf18      	it	ne
 800d3d2:	2000      	movne	r0, #0
 800d3d4:	4770      	bx	lr

0800d3d6 <strncmp>:
 800d3d6:	b510      	push	{r4, lr}
 800d3d8:	b16a      	cbz	r2, 800d3f6 <strncmp+0x20>
 800d3da:	3901      	subs	r1, #1
 800d3dc:	1884      	adds	r4, r0, r2
 800d3de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3e2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d103      	bne.n	800d3f2 <strncmp+0x1c>
 800d3ea:	42a0      	cmp	r0, r4
 800d3ec:	d001      	beq.n	800d3f2 <strncmp+0x1c>
 800d3ee:	2a00      	cmp	r2, #0
 800d3f0:	d1f5      	bne.n	800d3de <strncmp+0x8>
 800d3f2:	1ad0      	subs	r0, r2, r3
 800d3f4:	bd10      	pop	{r4, pc}
 800d3f6:	4610      	mov	r0, r2
 800d3f8:	e7fc      	b.n	800d3f4 <strncmp+0x1e>

0800d3fa <memset>:
 800d3fa:	4402      	add	r2, r0
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d100      	bne.n	800d404 <memset+0xa>
 800d402:	4770      	bx	lr
 800d404:	f803 1b01 	strb.w	r1, [r3], #1
 800d408:	e7f9      	b.n	800d3fe <memset+0x4>
	...

0800d40c <localtime>:
 800d40c:	b538      	push	{r3, r4, r5, lr}
 800d40e:	4b0b      	ldr	r3, [pc, #44]	@ (800d43c <localtime+0x30>)
 800d410:	681d      	ldr	r5, [r3, #0]
 800d412:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800d414:	4604      	mov	r4, r0
 800d416:	b953      	cbnz	r3, 800d42e <localtime+0x22>
 800d418:	2024      	movs	r0, #36	@ 0x24
 800d41a:	f7ff fd39 	bl	800ce90 <malloc>
 800d41e:	4602      	mov	r2, r0
 800d420:	6368      	str	r0, [r5, #52]	@ 0x34
 800d422:	b920      	cbnz	r0, 800d42e <localtime+0x22>
 800d424:	4b06      	ldr	r3, [pc, #24]	@ (800d440 <localtime+0x34>)
 800d426:	4807      	ldr	r0, [pc, #28]	@ (800d444 <localtime+0x38>)
 800d428:	2132      	movs	r1, #50	@ 0x32
 800d42a:	f000 fc89 	bl	800dd40 <__assert_func>
 800d42e:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800d430:	4620      	mov	r0, r4
 800d432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d436:	f000 b807 	b.w	800d448 <localtime_r>
 800d43a:	bf00      	nop
 800d43c:	20000064 	.word	0x20000064
 800d440:	08012b18 	.word	0x08012b18
 800d444:	08012b2f 	.word	0x08012b2f

0800d448 <localtime_r>:
 800d448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d44c:	460c      	mov	r4, r1
 800d44e:	4680      	mov	r8, r0
 800d450:	f000 fc2c 	bl	800dcac <__gettzinfo>
 800d454:	4621      	mov	r1, r4
 800d456:	4605      	mov	r5, r0
 800d458:	4640      	mov	r0, r8
 800d45a:	f001 fc29 	bl	800ecb0 <gmtime_r>
 800d45e:	6943      	ldr	r3, [r0, #20]
 800d460:	0799      	lsls	r1, r3, #30
 800d462:	4604      	mov	r4, r0
 800d464:	f203 776c 	addw	r7, r3, #1900	@ 0x76c
 800d468:	d106      	bne.n	800d478 <localtime_r+0x30>
 800d46a:	2264      	movs	r2, #100	@ 0x64
 800d46c:	fb97 f3f2 	sdiv	r3, r7, r2
 800d470:	fb02 7313 	mls	r3, r2, r3, r7
 800d474:	2b00      	cmp	r3, #0
 800d476:	d170      	bne.n	800d55a <localtime_r+0x112>
 800d478:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800d47c:	fb97 f3f2 	sdiv	r3, r7, r2
 800d480:	fb02 7313 	mls	r3, r2, r3, r7
 800d484:	fab3 f383 	clz	r3, r3
 800d488:	095b      	lsrs	r3, r3, #5
 800d48a:	4e64      	ldr	r6, [pc, #400]	@ (800d61c <localtime_r+0x1d4>)
 800d48c:	2230      	movs	r2, #48	@ 0x30
 800d48e:	fb02 6603 	mla	r6, r2, r3, r6
 800d492:	f000 f971 	bl	800d778 <__tz_lock>
 800d496:	f000 f97b 	bl	800d790 <_tzset_unlocked>
 800d49a:	4b61      	ldr	r3, [pc, #388]	@ (800d620 <localtime_r+0x1d8>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d06a      	beq.n	800d578 <localtime_r+0x130>
 800d4a2:	686b      	ldr	r3, [r5, #4]
 800d4a4:	42bb      	cmp	r3, r7
 800d4a6:	d15a      	bne.n	800d55e <localtime_r+0x116>
 800d4a8:	682f      	ldr	r7, [r5, #0]
 800d4aa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d4ae:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 800d4b2:	2f00      	cmp	r7, #0
 800d4b4:	d15b      	bne.n	800d56e <localtime_r+0x126>
 800d4b6:	4282      	cmp	r2, r0
 800d4b8:	eb73 0101 	sbcs.w	r1, r3, r1
 800d4bc:	db5e      	blt.n	800d57c <localtime_r+0x134>
 800d4be:	2301      	movs	r3, #1
 800d4c0:	6223      	str	r3, [r4, #32]
 800d4c2:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800d4c4:	6861      	ldr	r1, [r4, #4]
 800d4c6:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800d4ca:	fb93 f0f2 	sdiv	r0, r3, r2
 800d4ce:	fb02 3310 	mls	r3, r2, r0, r3
 800d4d2:	223c      	movs	r2, #60	@ 0x3c
 800d4d4:	fb93 f5f2 	sdiv	r5, r3, r2
 800d4d8:	fb02 3215 	mls	r2, r2, r5, r3
 800d4dc:	6823      	ldr	r3, [r4, #0]
 800d4de:	1a9b      	subs	r3, r3, r2
 800d4e0:	68a2      	ldr	r2, [r4, #8]
 800d4e2:	6023      	str	r3, [r4, #0]
 800d4e4:	1b49      	subs	r1, r1, r5
 800d4e6:	1a12      	subs	r2, r2, r0
 800d4e8:	2b3b      	cmp	r3, #59	@ 0x3b
 800d4ea:	6061      	str	r1, [r4, #4]
 800d4ec:	60a2      	str	r2, [r4, #8]
 800d4ee:	dd51      	ble.n	800d594 <localtime_r+0x14c>
 800d4f0:	3101      	adds	r1, #1
 800d4f2:	6061      	str	r1, [r4, #4]
 800d4f4:	3b3c      	subs	r3, #60	@ 0x3c
 800d4f6:	6023      	str	r3, [r4, #0]
 800d4f8:	6863      	ldr	r3, [r4, #4]
 800d4fa:	2b3b      	cmp	r3, #59	@ 0x3b
 800d4fc:	dd50      	ble.n	800d5a0 <localtime_r+0x158>
 800d4fe:	3201      	adds	r2, #1
 800d500:	60a2      	str	r2, [r4, #8]
 800d502:	3b3c      	subs	r3, #60	@ 0x3c
 800d504:	6063      	str	r3, [r4, #4]
 800d506:	68a3      	ldr	r3, [r4, #8]
 800d508:	2b17      	cmp	r3, #23
 800d50a:	dd4f      	ble.n	800d5ac <localtime_r+0x164>
 800d50c:	69e2      	ldr	r2, [r4, #28]
 800d50e:	3201      	adds	r2, #1
 800d510:	61e2      	str	r2, [r4, #28]
 800d512:	69a2      	ldr	r2, [r4, #24]
 800d514:	3201      	adds	r2, #1
 800d516:	2a07      	cmp	r2, #7
 800d518:	bfa8      	it	ge
 800d51a:	2200      	movge	r2, #0
 800d51c:	61a2      	str	r2, [r4, #24]
 800d51e:	68e2      	ldr	r2, [r4, #12]
 800d520:	3b18      	subs	r3, #24
 800d522:	3201      	adds	r2, #1
 800d524:	60a3      	str	r3, [r4, #8]
 800d526:	6923      	ldr	r3, [r4, #16]
 800d528:	60e2      	str	r2, [r4, #12]
 800d52a:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800d52e:	428a      	cmp	r2, r1
 800d530:	dd0e      	ble.n	800d550 <localtime_r+0x108>
 800d532:	2b0b      	cmp	r3, #11
 800d534:	eba2 0201 	sub.w	r2, r2, r1
 800d538:	60e2      	str	r2, [r4, #12]
 800d53a:	f103 0201 	add.w	r2, r3, #1
 800d53e:	bf09      	itett	eq
 800d540:	6963      	ldreq	r3, [r4, #20]
 800d542:	6122      	strne	r2, [r4, #16]
 800d544:	2200      	moveq	r2, #0
 800d546:	3301      	addeq	r3, #1
 800d548:	bf02      	ittt	eq
 800d54a:	6122      	streq	r2, [r4, #16]
 800d54c:	6163      	streq	r3, [r4, #20]
 800d54e:	61e2      	streq	r2, [r4, #28]
 800d550:	f000 f918 	bl	800d784 <__tz_unlock>
 800d554:	4620      	mov	r0, r4
 800d556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d55a:	2301      	movs	r3, #1
 800d55c:	e795      	b.n	800d48a <localtime_r+0x42>
 800d55e:	4638      	mov	r0, r7
 800d560:	f000 f860 	bl	800d624 <__tzcalc_limits>
 800d564:	2800      	cmp	r0, #0
 800d566:	d19f      	bne.n	800d4a8 <localtime_r+0x60>
 800d568:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d56c:	e004      	b.n	800d578 <localtime_r+0x130>
 800d56e:	4282      	cmp	r2, r0
 800d570:	eb73 0101 	sbcs.w	r1, r3, r1
 800d574:	da02      	bge.n	800d57c <localtime_r+0x134>
 800d576:	2300      	movs	r3, #0
 800d578:	6223      	str	r3, [r4, #32]
 800d57a:	e009      	b.n	800d590 <localtime_r+0x148>
 800d57c:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 800d580:	4282      	cmp	r2, r0
 800d582:	418b      	sbcs	r3, r1
 800d584:	bfb4      	ite	lt
 800d586:	2301      	movlt	r3, #1
 800d588:	2300      	movge	r3, #0
 800d58a:	6223      	str	r3, [r4, #32]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d198      	bne.n	800d4c2 <localtime_r+0x7a>
 800d590:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800d592:	e797      	b.n	800d4c4 <localtime_r+0x7c>
 800d594:	2b00      	cmp	r3, #0
 800d596:	daaf      	bge.n	800d4f8 <localtime_r+0xb0>
 800d598:	3901      	subs	r1, #1
 800d59a:	6061      	str	r1, [r4, #4]
 800d59c:	333c      	adds	r3, #60	@ 0x3c
 800d59e:	e7aa      	b.n	800d4f6 <localtime_r+0xae>
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	dab0      	bge.n	800d506 <localtime_r+0xbe>
 800d5a4:	3a01      	subs	r2, #1
 800d5a6:	60a2      	str	r2, [r4, #8]
 800d5a8:	333c      	adds	r3, #60	@ 0x3c
 800d5aa:	e7ab      	b.n	800d504 <localtime_r+0xbc>
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	dacf      	bge.n	800d550 <localtime_r+0x108>
 800d5b0:	69e2      	ldr	r2, [r4, #28]
 800d5b2:	3a01      	subs	r2, #1
 800d5b4:	61e2      	str	r2, [r4, #28]
 800d5b6:	69a2      	ldr	r2, [r4, #24]
 800d5b8:	3a01      	subs	r2, #1
 800d5ba:	bf48      	it	mi
 800d5bc:	2206      	movmi	r2, #6
 800d5be:	61a2      	str	r2, [r4, #24]
 800d5c0:	68e2      	ldr	r2, [r4, #12]
 800d5c2:	3318      	adds	r3, #24
 800d5c4:	3a01      	subs	r2, #1
 800d5c6:	60e2      	str	r2, [r4, #12]
 800d5c8:	60a3      	str	r3, [r4, #8]
 800d5ca:	2a00      	cmp	r2, #0
 800d5cc:	d1c0      	bne.n	800d550 <localtime_r+0x108>
 800d5ce:	6923      	ldr	r3, [r4, #16]
 800d5d0:	3b01      	subs	r3, #1
 800d5d2:	d405      	bmi.n	800d5e0 <localtime_r+0x198>
 800d5d4:	6123      	str	r3, [r4, #16]
 800d5d6:	6923      	ldr	r3, [r4, #16]
 800d5d8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800d5dc:	60e3      	str	r3, [r4, #12]
 800d5de:	e7b7      	b.n	800d550 <localtime_r+0x108>
 800d5e0:	230b      	movs	r3, #11
 800d5e2:	6123      	str	r3, [r4, #16]
 800d5e4:	6963      	ldr	r3, [r4, #20]
 800d5e6:	1e5a      	subs	r2, r3, #1
 800d5e8:	6162      	str	r2, [r4, #20]
 800d5ea:	0792      	lsls	r2, r2, #30
 800d5ec:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800d5f0:	d105      	bne.n	800d5fe <localtime_r+0x1b6>
 800d5f2:	2164      	movs	r1, #100	@ 0x64
 800d5f4:	fb93 f2f1 	sdiv	r2, r3, r1
 800d5f8:	fb01 3212 	mls	r2, r1, r2, r3
 800d5fc:	b962      	cbnz	r2, 800d618 <localtime_r+0x1d0>
 800d5fe:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800d602:	fb93 f1f2 	sdiv	r1, r3, r2
 800d606:	fb02 3311 	mls	r3, r2, r1, r3
 800d60a:	fab3 f383 	clz	r3, r3
 800d60e:	095b      	lsrs	r3, r3, #5
 800d610:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800d614:	61e3      	str	r3, [r4, #28]
 800d616:	e7de      	b.n	800d5d6 <localtime_r+0x18e>
 800d618:	2301      	movs	r3, #1
 800d61a:	e7f9      	b.n	800d610 <localtime_r+0x1c8>
 800d61c:	08012b88 	.word	0x08012b88
 800d620:	200050e4 	.word	0x200050e4

0800d624 <__tzcalc_limits>:
 800d624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d628:	4604      	mov	r4, r0
 800d62a:	f000 fb3f 	bl	800dcac <__gettzinfo>
 800d62e:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 800d632:	429c      	cmp	r4, r3
 800d634:	f340 8099 	ble.w	800d76a <__tzcalc_limits+0x146>
 800d638:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 800d63c:	19e5      	adds	r5, r4, r7
 800d63e:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800d642:	f240 126d 	movw	r2, #365	@ 0x16d
 800d646:	10ad      	asrs	r5, r5, #2
 800d648:	fb02 5503 	mla	r5, r2, r3, r5
 800d64c:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 800d650:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800d654:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 800d658:	4f45      	ldr	r7, [pc, #276]	@ (800d770 <__tzcalc_limits+0x14c>)
 800d65a:	fb93 f3f2 	sdiv	r3, r3, r2
 800d65e:	441d      	add	r5, r3
 800d660:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800d664:	eb04 030c 	add.w	r3, r4, ip
 800d668:	6044      	str	r4, [r0, #4]
 800d66a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d66e:	4601      	mov	r1, r0
 800d670:	441d      	add	r5, r3
 800d672:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 800d676:	7a0b      	ldrb	r3, [r1, #8]
 800d678:	694a      	ldr	r2, [r1, #20]
 800d67a:	2b4a      	cmp	r3, #74	@ 0x4a
 800d67c:	d133      	bne.n	800d6e6 <__tzcalc_limits+0xc2>
 800d67e:	07a6      	lsls	r6, r4, #30
 800d680:	eb05 0302 	add.w	r3, r5, r2
 800d684:	d106      	bne.n	800d694 <__tzcalc_limits+0x70>
 800d686:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800d68a:	fb94 f6fe 	sdiv	r6, r4, lr
 800d68e:	fb0e 4616 	mls	r6, lr, r6, r4
 800d692:	b936      	cbnz	r6, 800d6a2 <__tzcalc_limits+0x7e>
 800d694:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 800d698:	fb94 f6fe 	sdiv	r6, r4, lr
 800d69c:	fb0e 4616 	mls	r6, lr, r6, r4
 800d6a0:	b9fe      	cbnz	r6, 800d6e2 <__tzcalc_limits+0xbe>
 800d6a2:	2a3b      	cmp	r2, #59	@ 0x3b
 800d6a4:	bfd4      	ite	le
 800d6a6:	2200      	movle	r2, #0
 800d6a8:	2201      	movgt	r2, #1
 800d6aa:	4413      	add	r3, r2
 800d6ac:	3b01      	subs	r3, #1
 800d6ae:	698a      	ldr	r2, [r1, #24]
 800d6b0:	17d6      	asrs	r6, r2, #31
 800d6b2:	fbc3 2607 	smlal	r2, r6, r3, r7
 800d6b6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800d6b8:	18d2      	adds	r2, r2, r3
 800d6ba:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 800d6be:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800d6c2:	3128      	adds	r1, #40	@ 0x28
 800d6c4:	458c      	cmp	ip, r1
 800d6c6:	d1d6      	bne.n	800d676 <__tzcalc_limits+0x52>
 800d6c8:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800d6cc:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 800d6d0:	428c      	cmp	r4, r1
 800d6d2:	4193      	sbcs	r3, r2
 800d6d4:	bfb4      	ite	lt
 800d6d6:	2301      	movlt	r3, #1
 800d6d8:	2300      	movge	r3, #0
 800d6da:	6003      	str	r3, [r0, #0]
 800d6dc:	2001      	movs	r0, #1
 800d6de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	e7e1      	b.n	800d6aa <__tzcalc_limits+0x86>
 800d6e6:	2b44      	cmp	r3, #68	@ 0x44
 800d6e8:	d101      	bne.n	800d6ee <__tzcalc_limits+0xca>
 800d6ea:	18ab      	adds	r3, r5, r2
 800d6ec:	e7df      	b.n	800d6ae <__tzcalc_limits+0x8a>
 800d6ee:	07a3      	lsls	r3, r4, #30
 800d6f0:	d105      	bne.n	800d6fe <__tzcalc_limits+0xda>
 800d6f2:	2664      	movs	r6, #100	@ 0x64
 800d6f4:	fb94 f3f6 	sdiv	r3, r4, r6
 800d6f8:	fb06 4313 	mls	r3, r6, r3, r4
 800d6fc:	bb7b      	cbnz	r3, 800d75e <__tzcalc_limits+0x13a>
 800d6fe:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800d702:	fb94 f6f3 	sdiv	r6, r4, r3
 800d706:	fb03 4616 	mls	r6, r3, r6, r4
 800d70a:	fab6 f686 	clz	r6, r6
 800d70e:	0976      	lsrs	r6, r6, #5
 800d710:	f8df e060 	ldr.w	lr, [pc, #96]	@ 800d774 <__tzcalc_limits+0x150>
 800d714:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800d718:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 800d71c:	462b      	mov	r3, r5
 800d71e:	f04f 0800 	mov.w	r8, #0
 800d722:	fb0a e606 	mla	r6, sl, r6, lr
 800d726:	f108 0801 	add.w	r8, r8, #1
 800d72a:	45c1      	cmp	r9, r8
 800d72c:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 800d730:	dc17      	bgt.n	800d762 <__tzcalc_limits+0x13e>
 800d732:	f103 0804 	add.w	r8, r3, #4
 800d736:	2607      	movs	r6, #7
 800d738:	fb98 f6f6 	sdiv	r6, r8, r6
 800d73c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800d740:	eba8 0606 	sub.w	r6, r8, r6
 800d744:	1b92      	subs	r2, r2, r6
 800d746:	690e      	ldr	r6, [r1, #16]
 800d748:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 800d74c:	bf48      	it	mi
 800d74e:	3207      	addmi	r2, #7
 800d750:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800d754:	4432      	add	r2, r6
 800d756:	4572      	cmp	r2, lr
 800d758:	da05      	bge.n	800d766 <__tzcalc_limits+0x142>
 800d75a:	4413      	add	r3, r2
 800d75c:	e7a7      	b.n	800d6ae <__tzcalc_limits+0x8a>
 800d75e:	2601      	movs	r6, #1
 800d760:	e7d6      	b.n	800d710 <__tzcalc_limits+0xec>
 800d762:	4473      	add	r3, lr
 800d764:	e7df      	b.n	800d726 <__tzcalc_limits+0x102>
 800d766:	3a07      	subs	r2, #7
 800d768:	e7f5      	b.n	800d756 <__tzcalc_limits+0x132>
 800d76a:	2000      	movs	r0, #0
 800d76c:	e7b7      	b.n	800d6de <__tzcalc_limits+0xba>
 800d76e:	bf00      	nop
 800d770:	00015180 	.word	0x00015180
 800d774:	08012b84 	.word	0x08012b84

0800d778 <__tz_lock>:
 800d778:	4801      	ldr	r0, [pc, #4]	@ (800d780 <__tz_lock+0x8>)
 800d77a:	f000 bac6 	b.w	800dd0a <__retarget_lock_acquire>
 800d77e:	bf00      	nop
 800d780:	200050ec 	.word	0x200050ec

0800d784 <__tz_unlock>:
 800d784:	4801      	ldr	r0, [pc, #4]	@ (800d78c <__tz_unlock+0x8>)
 800d786:	f000 bac2 	b.w	800dd0e <__retarget_lock_release>
 800d78a:	bf00      	nop
 800d78c:	200050ec 	.word	0x200050ec

0800d790 <_tzset_unlocked>:
 800d790:	4b01      	ldr	r3, [pc, #4]	@ (800d798 <_tzset_unlocked+0x8>)
 800d792:	6818      	ldr	r0, [r3, #0]
 800d794:	f000 b802 	b.w	800d79c <_tzset_unlocked_r>
 800d798:	20000064 	.word	0x20000064

0800d79c <_tzset_unlocked_r>:
 800d79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7a0:	b08d      	sub	sp, #52	@ 0x34
 800d7a2:	4607      	mov	r7, r0
 800d7a4:	f000 fa82 	bl	800dcac <__gettzinfo>
 800d7a8:	49bc      	ldr	r1, [pc, #752]	@ (800da9c <_tzset_unlocked_r+0x300>)
 800d7aa:	4dbd      	ldr	r5, [pc, #756]	@ (800daa0 <_tzset_unlocked_r+0x304>)
 800d7ac:	4604      	mov	r4, r0
 800d7ae:	4638      	mov	r0, r7
 800d7b0:	f000 fb6a 	bl	800de88 <_getenv_r>
 800d7b4:	4606      	mov	r6, r0
 800d7b6:	bb10      	cbnz	r0, 800d7fe <_tzset_unlocked_r+0x62>
 800d7b8:	4bba      	ldr	r3, [pc, #744]	@ (800daa4 <_tzset_unlocked_r+0x308>)
 800d7ba:	4abb      	ldr	r2, [pc, #748]	@ (800daa8 <_tzset_unlocked_r+0x30c>)
 800d7bc:	6018      	str	r0, [r3, #0]
 800d7be:	4bbb      	ldr	r3, [pc, #748]	@ (800daac <_tzset_unlocked_r+0x310>)
 800d7c0:	62a0      	str	r0, [r4, #40]	@ 0x28
 800d7c2:	6018      	str	r0, [r3, #0]
 800d7c4:	4bba      	ldr	r3, [pc, #744]	@ (800dab0 <_tzset_unlocked_r+0x314>)
 800d7c6:	6520      	str	r0, [r4, #80]	@ 0x50
 800d7c8:	e9c3 2200 	strd	r2, r2, [r3]
 800d7cc:	214a      	movs	r1, #74	@ 0x4a
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800d7d6:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800d7da:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800d7de:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800d7e2:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800d7e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800d7ea:	6828      	ldr	r0, [r5, #0]
 800d7ec:	7221      	strb	r1, [r4, #8]
 800d7ee:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800d7f2:	f7ff fb55 	bl	800cea0 <free>
 800d7f6:	602e      	str	r6, [r5, #0]
 800d7f8:	b00d      	add	sp, #52	@ 0x34
 800d7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7fe:	6829      	ldr	r1, [r5, #0]
 800d800:	2900      	cmp	r1, #0
 800d802:	f040 808e 	bne.w	800d922 <_tzset_unlocked_r+0x186>
 800d806:	6828      	ldr	r0, [r5, #0]
 800d808:	f7ff fb4a 	bl	800cea0 <free>
 800d80c:	4630      	mov	r0, r6
 800d80e:	f7f2 fcdf 	bl	80001d0 <strlen>
 800d812:	1c41      	adds	r1, r0, #1
 800d814:	4638      	mov	r0, r7
 800d816:	f7ff fb6d 	bl	800cef4 <_malloc_r>
 800d81a:	6028      	str	r0, [r5, #0]
 800d81c:	2800      	cmp	r0, #0
 800d81e:	f040 8086 	bne.w	800d92e <_tzset_unlocked_r+0x192>
 800d822:	4aa2      	ldr	r2, [pc, #648]	@ (800daac <_tzset_unlocked_r+0x310>)
 800d824:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 800dab0 <_tzset_unlocked_r+0x314>
 800d828:	f8df a278 	ldr.w	sl, [pc, #632]	@ 800daa4 <_tzset_unlocked_r+0x308>
 800d82c:	2300      	movs	r3, #0
 800d82e:	6013      	str	r3, [r2, #0]
 800d830:	4aa0      	ldr	r2, [pc, #640]	@ (800dab4 <_tzset_unlocked_r+0x318>)
 800d832:	f8ca 3000 	str.w	r3, [sl]
 800d836:	2000      	movs	r0, #0
 800d838:	2100      	movs	r1, #0
 800d83a:	e9c8 2200 	strd	r2, r2, [r8]
 800d83e:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800d842:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800d846:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800d84a:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800d84e:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 800d852:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 800d856:	224a      	movs	r2, #74	@ 0x4a
 800d858:	7222      	strb	r2, [r4, #8]
 800d85a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d85c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 800d860:	6523      	str	r3, [r4, #80]	@ 0x50
 800d862:	7833      	ldrb	r3, [r6, #0]
 800d864:	2b3a      	cmp	r3, #58	@ 0x3a
 800d866:	bf08      	it	eq
 800d868:	3601      	addeq	r6, #1
 800d86a:	7833      	ldrb	r3, [r6, #0]
 800d86c:	2b3c      	cmp	r3, #60	@ 0x3c
 800d86e:	d162      	bne.n	800d936 <_tzset_unlocked_r+0x19a>
 800d870:	1c75      	adds	r5, r6, #1
 800d872:	4a91      	ldr	r2, [pc, #580]	@ (800dab8 <_tzset_unlocked_r+0x31c>)
 800d874:	4991      	ldr	r1, [pc, #580]	@ (800dabc <_tzset_unlocked_r+0x320>)
 800d876:	ab0a      	add	r3, sp, #40	@ 0x28
 800d878:	4628      	mov	r0, r5
 800d87a:	f000 ffdf 	bl	800e83c <siscanf>
 800d87e:	2800      	cmp	r0, #0
 800d880:	ddba      	ble.n	800d7f8 <_tzset_unlocked_r+0x5c>
 800d882:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d884:	1eda      	subs	r2, r3, #3
 800d886:	2a07      	cmp	r2, #7
 800d888:	d8b6      	bhi.n	800d7f8 <_tzset_unlocked_r+0x5c>
 800d88a:	5ceb      	ldrb	r3, [r5, r3]
 800d88c:	2b3e      	cmp	r3, #62	@ 0x3e
 800d88e:	d1b3      	bne.n	800d7f8 <_tzset_unlocked_r+0x5c>
 800d890:	3602      	adds	r6, #2
 800d892:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d894:	18f5      	adds	r5, r6, r3
 800d896:	5cf3      	ldrb	r3, [r6, r3]
 800d898:	2b2d      	cmp	r3, #45	@ 0x2d
 800d89a:	d15a      	bne.n	800d952 <_tzset_unlocked_r+0x1b6>
 800d89c:	3501      	adds	r5, #1
 800d89e:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d8a8:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d8ac:	af08      	add	r7, sp, #32
 800d8ae:	ab0a      	add	r3, sp, #40	@ 0x28
 800d8b0:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800d8b4:	9303      	str	r3, [sp, #12]
 800d8b6:	f10d 031e 	add.w	r3, sp, #30
 800d8ba:	9300      	str	r3, [sp, #0]
 800d8bc:	4980      	ldr	r1, [pc, #512]	@ (800dac0 <_tzset_unlocked_r+0x324>)
 800d8be:	ab0a      	add	r3, sp, #40	@ 0x28
 800d8c0:	aa07      	add	r2, sp, #28
 800d8c2:	4628      	mov	r0, r5
 800d8c4:	f000 ffba 	bl	800e83c <siscanf>
 800d8c8:	2800      	cmp	r0, #0
 800d8ca:	dd95      	ble.n	800d7f8 <_tzset_unlocked_r+0x5c>
 800d8cc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800d8d0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800d8d4:	223c      	movs	r2, #60	@ 0x3c
 800d8d6:	fb02 6603 	mla	r6, r2, r3, r6
 800d8da:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800d8de:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800d8e2:	fb02 6603 	mla	r6, r2, r3, r6
 800d8e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8e8:	fb09 f606 	mul.w	r6, r9, r6
 800d8ec:	eb05 0903 	add.w	r9, r5, r3
 800d8f0:	5ceb      	ldrb	r3, [r5, r3]
 800d8f2:	2b3c      	cmp	r3, #60	@ 0x3c
 800d8f4:	f040 80ee 	bne.w	800dad4 <_tzset_unlocked_r+0x338>
 800d8f8:	f109 0501 	add.w	r5, r9, #1
 800d8fc:	4a71      	ldr	r2, [pc, #452]	@ (800dac4 <_tzset_unlocked_r+0x328>)
 800d8fe:	496f      	ldr	r1, [pc, #444]	@ (800dabc <_tzset_unlocked_r+0x320>)
 800d900:	ab0a      	add	r3, sp, #40	@ 0x28
 800d902:	4628      	mov	r0, r5
 800d904:	f000 ff9a 	bl	800e83c <siscanf>
 800d908:	2800      	cmp	r0, #0
 800d90a:	dc28      	bgt.n	800d95e <_tzset_unlocked_r+0x1c2>
 800d90c:	f899 3001 	ldrb.w	r3, [r9, #1]
 800d910:	2b3e      	cmp	r3, #62	@ 0x3e
 800d912:	d124      	bne.n	800d95e <_tzset_unlocked_r+0x1c2>
 800d914:	4b68      	ldr	r3, [pc, #416]	@ (800dab8 <_tzset_unlocked_r+0x31c>)
 800d916:	62a6      	str	r6, [r4, #40]	@ 0x28
 800d918:	e9c8 3300 	strd	r3, r3, [r8]
 800d91c:	f8ca 6000 	str.w	r6, [sl]
 800d920:	e76a      	b.n	800d7f8 <_tzset_unlocked_r+0x5c>
 800d922:	f7f2 fc5d 	bl	80001e0 <strcmp>
 800d926:	2800      	cmp	r0, #0
 800d928:	f47f af6d 	bne.w	800d806 <_tzset_unlocked_r+0x6a>
 800d92c:	e764      	b.n	800d7f8 <_tzset_unlocked_r+0x5c>
 800d92e:	4631      	mov	r1, r6
 800d930:	f000 f9fd 	bl	800dd2e <strcpy>
 800d934:	e775      	b.n	800d822 <_tzset_unlocked_r+0x86>
 800d936:	4a60      	ldr	r2, [pc, #384]	@ (800dab8 <_tzset_unlocked_r+0x31c>)
 800d938:	4963      	ldr	r1, [pc, #396]	@ (800dac8 <_tzset_unlocked_r+0x32c>)
 800d93a:	ab0a      	add	r3, sp, #40	@ 0x28
 800d93c:	4630      	mov	r0, r6
 800d93e:	f000 ff7d 	bl	800e83c <siscanf>
 800d942:	2800      	cmp	r0, #0
 800d944:	f77f af58 	ble.w	800d7f8 <_tzset_unlocked_r+0x5c>
 800d948:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d94a:	3b03      	subs	r3, #3
 800d94c:	2b07      	cmp	r3, #7
 800d94e:	d9a0      	bls.n	800d892 <_tzset_unlocked_r+0xf6>
 800d950:	e752      	b.n	800d7f8 <_tzset_unlocked_r+0x5c>
 800d952:	2b2b      	cmp	r3, #43	@ 0x2b
 800d954:	bf08      	it	eq
 800d956:	3501      	addeq	r5, #1
 800d958:	f04f 0901 	mov.w	r9, #1
 800d95c:	e7a1      	b.n	800d8a2 <_tzset_unlocked_r+0x106>
 800d95e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d960:	1eda      	subs	r2, r3, #3
 800d962:	2a07      	cmp	r2, #7
 800d964:	f63f af48 	bhi.w	800d7f8 <_tzset_unlocked_r+0x5c>
 800d968:	5ceb      	ldrb	r3, [r5, r3]
 800d96a:	2b3e      	cmp	r3, #62	@ 0x3e
 800d96c:	f47f af44 	bne.w	800d7f8 <_tzset_unlocked_r+0x5c>
 800d970:	f109 0902 	add.w	r9, r9, #2
 800d974:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d976:	eb09 0503 	add.w	r5, r9, r3
 800d97a:	f819 3003 	ldrb.w	r3, [r9, r3]
 800d97e:	2b2d      	cmp	r3, #45	@ 0x2d
 800d980:	f040 80b7 	bne.w	800daf2 <_tzset_unlocked_r+0x356>
 800d984:	3501      	adds	r5, #1
 800d986:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 800d98a:	2300      	movs	r3, #0
 800d98c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d990:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d994:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d998:	930a      	str	r3, [sp, #40]	@ 0x28
 800d99a:	ab0a      	add	r3, sp, #40	@ 0x28
 800d99c:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800d9a0:	9301      	str	r3, [sp, #4]
 800d9a2:	f10d 031e 	add.w	r3, sp, #30
 800d9a6:	9300      	str	r3, [sp, #0]
 800d9a8:	4945      	ldr	r1, [pc, #276]	@ (800dac0 <_tzset_unlocked_r+0x324>)
 800d9aa:	ab0a      	add	r3, sp, #40	@ 0x28
 800d9ac:	aa07      	add	r2, sp, #28
 800d9ae:	4628      	mov	r0, r5
 800d9b0:	f000 ff44 	bl	800e83c <siscanf>
 800d9b4:	2800      	cmp	r0, #0
 800d9b6:	f300 80a2 	bgt.w	800dafe <_tzset_unlocked_r+0x362>
 800d9ba:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800d9be:	9304      	str	r3, [sp, #16]
 800d9c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9c2:	4627      	mov	r7, r4
 800d9c4:	441d      	add	r5, r3
 800d9c6:	f04f 0b00 	mov.w	fp, #0
 800d9ca:	782b      	ldrb	r3, [r5, #0]
 800d9cc:	2b2c      	cmp	r3, #44	@ 0x2c
 800d9ce:	bf08      	it	eq
 800d9d0:	3501      	addeq	r5, #1
 800d9d2:	f895 9000 	ldrb.w	r9, [r5]
 800d9d6:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800d9da:	f040 80a3 	bne.w	800db24 <_tzset_unlocked_r+0x388>
 800d9de:	ab0a      	add	r3, sp, #40	@ 0x28
 800d9e0:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 800d9e4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d9e8:	aa09      	add	r2, sp, #36	@ 0x24
 800d9ea:	9200      	str	r2, [sp, #0]
 800d9ec:	4937      	ldr	r1, [pc, #220]	@ (800dacc <_tzset_unlocked_r+0x330>)
 800d9ee:	9303      	str	r3, [sp, #12]
 800d9f0:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 800d9f4:	4628      	mov	r0, r5
 800d9f6:	f000 ff21 	bl	800e83c <siscanf>
 800d9fa:	2803      	cmp	r0, #3
 800d9fc:	f47f aefc 	bne.w	800d7f8 <_tzset_unlocked_r+0x5c>
 800da00:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800da04:	1e4b      	subs	r3, r1, #1
 800da06:	2b0b      	cmp	r3, #11
 800da08:	f63f aef6 	bhi.w	800d7f8 <_tzset_unlocked_r+0x5c>
 800da0c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 800da10:	1e53      	subs	r3, r2, #1
 800da12:	2b04      	cmp	r3, #4
 800da14:	f63f aef0 	bhi.w	800d7f8 <_tzset_unlocked_r+0x5c>
 800da18:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800da1c:	2b06      	cmp	r3, #6
 800da1e:	f63f aeeb 	bhi.w	800d7f8 <_tzset_unlocked_r+0x5c>
 800da22:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800da26:	f887 9008 	strb.w	r9, [r7, #8]
 800da2a:	617b      	str	r3, [r7, #20]
 800da2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da2e:	eb05 0903 	add.w	r9, r5, r3
 800da32:	2500      	movs	r5, #0
 800da34:	f04f 0302 	mov.w	r3, #2
 800da38:	f8ad 301c 	strh.w	r3, [sp, #28]
 800da3c:	f8ad 501e 	strh.w	r5, [sp, #30]
 800da40:	f8ad 5020 	strh.w	r5, [sp, #32]
 800da44:	950a      	str	r5, [sp, #40]	@ 0x28
 800da46:	f899 3000 	ldrb.w	r3, [r9]
 800da4a:	2b2f      	cmp	r3, #47	@ 0x2f
 800da4c:	f040 8096 	bne.w	800db7c <_tzset_unlocked_r+0x3e0>
 800da50:	ab0a      	add	r3, sp, #40	@ 0x28
 800da52:	aa08      	add	r2, sp, #32
 800da54:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800da58:	f10d 021e 	add.w	r2, sp, #30
 800da5c:	9200      	str	r2, [sp, #0]
 800da5e:	491c      	ldr	r1, [pc, #112]	@ (800dad0 <_tzset_unlocked_r+0x334>)
 800da60:	9303      	str	r3, [sp, #12]
 800da62:	aa07      	add	r2, sp, #28
 800da64:	4648      	mov	r0, r9
 800da66:	f000 fee9 	bl	800e83c <siscanf>
 800da6a:	42a8      	cmp	r0, r5
 800da6c:	f300 8086 	bgt.w	800db7c <_tzset_unlocked_r+0x3e0>
 800da70:	214a      	movs	r1, #74	@ 0x4a
 800da72:	2200      	movs	r2, #0
 800da74:	2300      	movs	r3, #0
 800da76:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800da7a:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800da7e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800da82:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800da86:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800da8a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800da8e:	7221      	strb	r1, [r4, #8]
 800da90:	62a5      	str	r5, [r4, #40]	@ 0x28
 800da92:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800da96:	6525      	str	r5, [r4, #80]	@ 0x50
 800da98:	e6ae      	b.n	800d7f8 <_tzset_unlocked_r+0x5c>
 800da9a:	bf00      	nop
 800da9c:	08012be8 	.word	0x08012be8
 800daa0:	200050c4 	.word	0x200050c4
 800daa4:	200050e0 	.word	0x200050e0
 800daa8:	08012beb 	.word	0x08012beb
 800daac:	200050e4 	.word	0x200050e4
 800dab0:	2000005c 	.word	0x2000005c
 800dab4:	08012d72 	.word	0x08012d72
 800dab8:	200050d4 	.word	0x200050d4
 800dabc:	08012bef 	.word	0x08012bef
 800dac0:	08012c24 	.word	0x08012c24
 800dac4:	200050c8 	.word	0x200050c8
 800dac8:	08012c02 	.word	0x08012c02
 800dacc:	08012c10 	.word	0x08012c10
 800dad0:	08012c23 	.word	0x08012c23
 800dad4:	4a3e      	ldr	r2, [pc, #248]	@ (800dbd0 <_tzset_unlocked_r+0x434>)
 800dad6:	493f      	ldr	r1, [pc, #252]	@ (800dbd4 <_tzset_unlocked_r+0x438>)
 800dad8:	ab0a      	add	r3, sp, #40	@ 0x28
 800dada:	4648      	mov	r0, r9
 800dadc:	f000 feae 	bl	800e83c <siscanf>
 800dae0:	2800      	cmp	r0, #0
 800dae2:	f77f af17 	ble.w	800d914 <_tzset_unlocked_r+0x178>
 800dae6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dae8:	3b03      	subs	r3, #3
 800daea:	2b07      	cmp	r3, #7
 800daec:	f67f af42 	bls.w	800d974 <_tzset_unlocked_r+0x1d8>
 800daf0:	e682      	b.n	800d7f8 <_tzset_unlocked_r+0x5c>
 800daf2:	2b2b      	cmp	r3, #43	@ 0x2b
 800daf4:	bf08      	it	eq
 800daf6:	3501      	addeq	r5, #1
 800daf8:	f04f 0901 	mov.w	r9, #1
 800dafc:	e745      	b.n	800d98a <_tzset_unlocked_r+0x1ee>
 800dafe:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800db02:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800db06:	213c      	movs	r1, #60	@ 0x3c
 800db08:	fb01 3302 	mla	r3, r1, r2, r3
 800db0c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800db10:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800db14:	fb01 3302 	mla	r3, r1, r2, r3
 800db18:	fb09 f303 	mul.w	r3, r9, r3
 800db1c:	e74f      	b.n	800d9be <_tzset_unlocked_r+0x222>
 800db1e:	f04f 0b01 	mov.w	fp, #1
 800db22:	e752      	b.n	800d9ca <_tzset_unlocked_r+0x22e>
 800db24:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 800db28:	bf06      	itte	eq
 800db2a:	3501      	addeq	r5, #1
 800db2c:	464b      	moveq	r3, r9
 800db2e:	2344      	movne	r3, #68	@ 0x44
 800db30:	220a      	movs	r2, #10
 800db32:	a90b      	add	r1, sp, #44	@ 0x2c
 800db34:	4628      	mov	r0, r5
 800db36:	9305      	str	r3, [sp, #20]
 800db38:	f000 ffa0 	bl	800ea7c <strtoul>
 800db3c:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800db40:	9b05      	ldr	r3, [sp, #20]
 800db42:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 800db46:	45a9      	cmp	r9, r5
 800db48:	d114      	bne.n	800db74 <_tzset_unlocked_r+0x3d8>
 800db4a:	234d      	movs	r3, #77	@ 0x4d
 800db4c:	f1bb 0f00 	cmp.w	fp, #0
 800db50:	d107      	bne.n	800db62 <_tzset_unlocked_r+0x3c6>
 800db52:	7223      	strb	r3, [r4, #8]
 800db54:	2103      	movs	r1, #3
 800db56:	2302      	movs	r3, #2
 800db58:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800db5c:	f8c4 b014 	str.w	fp, [r4, #20]
 800db60:	e767      	b.n	800da32 <_tzset_unlocked_r+0x296>
 800db62:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800db66:	220b      	movs	r2, #11
 800db68:	2301      	movs	r3, #1
 800db6a:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800db6e:	2300      	movs	r3, #0
 800db70:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800db72:	e75e      	b.n	800da32 <_tzset_unlocked_r+0x296>
 800db74:	b280      	uxth	r0, r0
 800db76:	723b      	strb	r3, [r7, #8]
 800db78:	6178      	str	r0, [r7, #20]
 800db7a:	e75a      	b.n	800da32 <_tzset_unlocked_r+0x296>
 800db7c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800db80:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800db84:	213c      	movs	r1, #60	@ 0x3c
 800db86:	fb01 3302 	mla	r3, r1, r2, r3
 800db8a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800db8e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800db92:	fb01 3302 	mla	r3, r1, r2, r3
 800db96:	61bb      	str	r3, [r7, #24]
 800db98:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800db9a:	3728      	adds	r7, #40	@ 0x28
 800db9c:	444d      	add	r5, r9
 800db9e:	f1bb 0f00 	cmp.w	fp, #0
 800dba2:	d0bc      	beq.n	800db1e <_tzset_unlocked_r+0x382>
 800dba4:	9b04      	ldr	r3, [sp, #16]
 800dba6:	6523      	str	r3, [r4, #80]	@ 0x50
 800dba8:	4b0b      	ldr	r3, [pc, #44]	@ (800dbd8 <_tzset_unlocked_r+0x43c>)
 800dbaa:	f8c8 3000 	str.w	r3, [r8]
 800dbae:	6860      	ldr	r0, [r4, #4]
 800dbb0:	4b07      	ldr	r3, [pc, #28]	@ (800dbd0 <_tzset_unlocked_r+0x434>)
 800dbb2:	62a6      	str	r6, [r4, #40]	@ 0x28
 800dbb4:	f8c8 3004 	str.w	r3, [r8, #4]
 800dbb8:	f7ff fd34 	bl	800d624 <__tzcalc_limits>
 800dbbc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800dbbe:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800dbc0:	f8ca 2000 	str.w	r2, [sl]
 800dbc4:	1a9b      	subs	r3, r3, r2
 800dbc6:	4a05      	ldr	r2, [pc, #20]	@ (800dbdc <_tzset_unlocked_r+0x440>)
 800dbc8:	bf18      	it	ne
 800dbca:	2301      	movne	r3, #1
 800dbcc:	6013      	str	r3, [r2, #0]
 800dbce:	e613      	b.n	800d7f8 <_tzset_unlocked_r+0x5c>
 800dbd0:	200050c8 	.word	0x200050c8
 800dbd4:	08012c02 	.word	0x08012c02
 800dbd8:	200050d4 	.word	0x200050d4
 800dbdc:	200050e4 	.word	0x200050e4

0800dbe0 <_reclaim_reent>:
 800dbe0:	4b29      	ldr	r3, [pc, #164]	@ (800dc88 <_reclaim_reent+0xa8>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	4283      	cmp	r3, r0
 800dbe6:	b570      	push	{r4, r5, r6, lr}
 800dbe8:	4604      	mov	r4, r0
 800dbea:	d04b      	beq.n	800dc84 <_reclaim_reent+0xa4>
 800dbec:	69c3      	ldr	r3, [r0, #28]
 800dbee:	b1ab      	cbz	r3, 800dc1c <_reclaim_reent+0x3c>
 800dbf0:	68db      	ldr	r3, [r3, #12]
 800dbf2:	b16b      	cbz	r3, 800dc10 <_reclaim_reent+0x30>
 800dbf4:	2500      	movs	r5, #0
 800dbf6:	69e3      	ldr	r3, [r4, #28]
 800dbf8:	68db      	ldr	r3, [r3, #12]
 800dbfa:	5959      	ldr	r1, [r3, r5]
 800dbfc:	2900      	cmp	r1, #0
 800dbfe:	d13b      	bne.n	800dc78 <_reclaim_reent+0x98>
 800dc00:	3504      	adds	r5, #4
 800dc02:	2d80      	cmp	r5, #128	@ 0x80
 800dc04:	d1f7      	bne.n	800dbf6 <_reclaim_reent+0x16>
 800dc06:	69e3      	ldr	r3, [r4, #28]
 800dc08:	4620      	mov	r0, r4
 800dc0a:	68d9      	ldr	r1, [r3, #12]
 800dc0c:	f000 f8b6 	bl	800dd7c <_free_r>
 800dc10:	69e3      	ldr	r3, [r4, #28]
 800dc12:	6819      	ldr	r1, [r3, #0]
 800dc14:	b111      	cbz	r1, 800dc1c <_reclaim_reent+0x3c>
 800dc16:	4620      	mov	r0, r4
 800dc18:	f000 f8b0 	bl	800dd7c <_free_r>
 800dc1c:	6961      	ldr	r1, [r4, #20]
 800dc1e:	b111      	cbz	r1, 800dc26 <_reclaim_reent+0x46>
 800dc20:	4620      	mov	r0, r4
 800dc22:	f000 f8ab 	bl	800dd7c <_free_r>
 800dc26:	69e1      	ldr	r1, [r4, #28]
 800dc28:	b111      	cbz	r1, 800dc30 <_reclaim_reent+0x50>
 800dc2a:	4620      	mov	r0, r4
 800dc2c:	f000 f8a6 	bl	800dd7c <_free_r>
 800dc30:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800dc32:	b111      	cbz	r1, 800dc3a <_reclaim_reent+0x5a>
 800dc34:	4620      	mov	r0, r4
 800dc36:	f000 f8a1 	bl	800dd7c <_free_r>
 800dc3a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc3c:	b111      	cbz	r1, 800dc44 <_reclaim_reent+0x64>
 800dc3e:	4620      	mov	r0, r4
 800dc40:	f000 f89c 	bl	800dd7c <_free_r>
 800dc44:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800dc46:	b111      	cbz	r1, 800dc4e <_reclaim_reent+0x6e>
 800dc48:	4620      	mov	r0, r4
 800dc4a:	f000 f897 	bl	800dd7c <_free_r>
 800dc4e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800dc50:	b111      	cbz	r1, 800dc58 <_reclaim_reent+0x78>
 800dc52:	4620      	mov	r0, r4
 800dc54:	f000 f892 	bl	800dd7c <_free_r>
 800dc58:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800dc5a:	b111      	cbz	r1, 800dc62 <_reclaim_reent+0x82>
 800dc5c:	4620      	mov	r0, r4
 800dc5e:	f000 f88d 	bl	800dd7c <_free_r>
 800dc62:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800dc64:	b111      	cbz	r1, 800dc6c <_reclaim_reent+0x8c>
 800dc66:	4620      	mov	r0, r4
 800dc68:	f000 f888 	bl	800dd7c <_free_r>
 800dc6c:	6a23      	ldr	r3, [r4, #32]
 800dc6e:	b14b      	cbz	r3, 800dc84 <_reclaim_reent+0xa4>
 800dc70:	4620      	mov	r0, r4
 800dc72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc76:	4718      	bx	r3
 800dc78:	680e      	ldr	r6, [r1, #0]
 800dc7a:	4620      	mov	r0, r4
 800dc7c:	f000 f87e 	bl	800dd7c <_free_r>
 800dc80:	4631      	mov	r1, r6
 800dc82:	e7bb      	b.n	800dbfc <_reclaim_reent+0x1c>
 800dc84:	bd70      	pop	{r4, r5, r6, pc}
 800dc86:	bf00      	nop
 800dc88:	20000064 	.word	0x20000064

0800dc8c <_sbrk_r>:
 800dc8c:	b538      	push	{r3, r4, r5, lr}
 800dc8e:	4d06      	ldr	r5, [pc, #24]	@ (800dca8 <_sbrk_r+0x1c>)
 800dc90:	2300      	movs	r3, #0
 800dc92:	4604      	mov	r4, r0
 800dc94:	4608      	mov	r0, r1
 800dc96:	602b      	str	r3, [r5, #0]
 800dc98:	f7f8 f858 	bl	8005d4c <_sbrk>
 800dc9c:	1c43      	adds	r3, r0, #1
 800dc9e:	d102      	bne.n	800dca6 <_sbrk_r+0x1a>
 800dca0:	682b      	ldr	r3, [r5, #0]
 800dca2:	b103      	cbz	r3, 800dca6 <_sbrk_r+0x1a>
 800dca4:	6023      	str	r3, [r4, #0]
 800dca6:	bd38      	pop	{r3, r4, r5, pc}
 800dca8:	200050e8 	.word	0x200050e8

0800dcac <__gettzinfo>:
 800dcac:	4800      	ldr	r0, [pc, #0]	@ (800dcb0 <__gettzinfo+0x4>)
 800dcae:	4770      	bx	lr
 800dcb0:	200000b8 	.word	0x200000b8

0800dcb4 <__errno>:
 800dcb4:	4b01      	ldr	r3, [pc, #4]	@ (800dcbc <__errno+0x8>)
 800dcb6:	6818      	ldr	r0, [r3, #0]
 800dcb8:	4770      	bx	lr
 800dcba:	bf00      	nop
 800dcbc:	20000064 	.word	0x20000064

0800dcc0 <__libc_init_array>:
 800dcc0:	b570      	push	{r4, r5, r6, lr}
 800dcc2:	4d0d      	ldr	r5, [pc, #52]	@ (800dcf8 <__libc_init_array+0x38>)
 800dcc4:	4c0d      	ldr	r4, [pc, #52]	@ (800dcfc <__libc_init_array+0x3c>)
 800dcc6:	1b64      	subs	r4, r4, r5
 800dcc8:	10a4      	asrs	r4, r4, #2
 800dcca:	2600      	movs	r6, #0
 800dccc:	42a6      	cmp	r6, r4
 800dcce:	d109      	bne.n	800dce4 <__libc_init_array+0x24>
 800dcd0:	4d0b      	ldr	r5, [pc, #44]	@ (800dd00 <__libc_init_array+0x40>)
 800dcd2:	4c0c      	ldr	r4, [pc, #48]	@ (800dd04 <__libc_init_array+0x44>)
 800dcd4:	f002 fcc0 	bl	8010658 <_init>
 800dcd8:	1b64      	subs	r4, r4, r5
 800dcda:	10a4      	asrs	r4, r4, #2
 800dcdc:	2600      	movs	r6, #0
 800dcde:	42a6      	cmp	r6, r4
 800dce0:	d105      	bne.n	800dcee <__libc_init_array+0x2e>
 800dce2:	bd70      	pop	{r4, r5, r6, pc}
 800dce4:	f855 3b04 	ldr.w	r3, [r5], #4
 800dce8:	4798      	blx	r3
 800dcea:	3601      	adds	r6, #1
 800dcec:	e7ee      	b.n	800dccc <__libc_init_array+0xc>
 800dcee:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcf2:	4798      	blx	r3
 800dcf4:	3601      	adds	r6, #1
 800dcf6:	e7f2      	b.n	800dcde <__libc_init_array+0x1e>
 800dcf8:	08012e00 	.word	0x08012e00
 800dcfc:	08012e00 	.word	0x08012e00
 800dd00:	08012e00 	.word	0x08012e00
 800dd04:	08012e04 	.word	0x08012e04

0800dd08 <__retarget_lock_init_recursive>:
 800dd08:	4770      	bx	lr

0800dd0a <__retarget_lock_acquire>:
 800dd0a:	4770      	bx	lr

0800dd0c <__retarget_lock_acquire_recursive>:
 800dd0c:	4770      	bx	lr

0800dd0e <__retarget_lock_release>:
 800dd0e:	4770      	bx	lr

0800dd10 <__retarget_lock_release_recursive>:
 800dd10:	4770      	bx	lr

0800dd12 <memcpy>:
 800dd12:	440a      	add	r2, r1
 800dd14:	4291      	cmp	r1, r2
 800dd16:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800dd1a:	d100      	bne.n	800dd1e <memcpy+0xc>
 800dd1c:	4770      	bx	lr
 800dd1e:	b510      	push	{r4, lr}
 800dd20:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd24:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd28:	4291      	cmp	r1, r2
 800dd2a:	d1f9      	bne.n	800dd20 <memcpy+0xe>
 800dd2c:	bd10      	pop	{r4, pc}

0800dd2e <strcpy>:
 800dd2e:	4603      	mov	r3, r0
 800dd30:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd34:	f803 2b01 	strb.w	r2, [r3], #1
 800dd38:	2a00      	cmp	r2, #0
 800dd3a:	d1f9      	bne.n	800dd30 <strcpy+0x2>
 800dd3c:	4770      	bx	lr
	...

0800dd40 <__assert_func>:
 800dd40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd42:	4614      	mov	r4, r2
 800dd44:	461a      	mov	r2, r3
 800dd46:	4b09      	ldr	r3, [pc, #36]	@ (800dd6c <__assert_func+0x2c>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	4605      	mov	r5, r0
 800dd4c:	68d8      	ldr	r0, [r3, #12]
 800dd4e:	b954      	cbnz	r4, 800dd66 <__assert_func+0x26>
 800dd50:	4b07      	ldr	r3, [pc, #28]	@ (800dd70 <__assert_func+0x30>)
 800dd52:	461c      	mov	r4, r3
 800dd54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dd58:	9100      	str	r1, [sp, #0]
 800dd5a:	462b      	mov	r3, r5
 800dd5c:	4905      	ldr	r1, [pc, #20]	@ (800dd74 <__assert_func+0x34>)
 800dd5e:	f000 fddd 	bl	800e91c <fiprintf>
 800dd62:	f001 f8b3 	bl	800eecc <abort>
 800dd66:	4b04      	ldr	r3, [pc, #16]	@ (800dd78 <__assert_func+0x38>)
 800dd68:	e7f4      	b.n	800dd54 <__assert_func+0x14>
 800dd6a:	bf00      	nop
 800dd6c:	20000064 	.word	0x20000064
 800dd70:	08012d72 	.word	0x08012d72
 800dd74:	08012d44 	.word	0x08012d44
 800dd78:	08012d37 	.word	0x08012d37

0800dd7c <_free_r>:
 800dd7c:	b538      	push	{r3, r4, r5, lr}
 800dd7e:	4605      	mov	r5, r0
 800dd80:	2900      	cmp	r1, #0
 800dd82:	d041      	beq.n	800de08 <_free_r+0x8c>
 800dd84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd88:	1f0c      	subs	r4, r1, #4
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	bfb8      	it	lt
 800dd8e:	18e4      	addlt	r4, r4, r3
 800dd90:	f7ff f930 	bl	800cff4 <__malloc_lock>
 800dd94:	4a1d      	ldr	r2, [pc, #116]	@ (800de0c <_free_r+0x90>)
 800dd96:	6813      	ldr	r3, [r2, #0]
 800dd98:	b933      	cbnz	r3, 800dda8 <_free_r+0x2c>
 800dd9a:	6063      	str	r3, [r4, #4]
 800dd9c:	6014      	str	r4, [r2, #0]
 800dd9e:	4628      	mov	r0, r5
 800dda0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dda4:	f7ff b92c 	b.w	800d000 <__malloc_unlock>
 800dda8:	42a3      	cmp	r3, r4
 800ddaa:	d908      	bls.n	800ddbe <_free_r+0x42>
 800ddac:	6820      	ldr	r0, [r4, #0]
 800ddae:	1821      	adds	r1, r4, r0
 800ddb0:	428b      	cmp	r3, r1
 800ddb2:	bf01      	itttt	eq
 800ddb4:	6819      	ldreq	r1, [r3, #0]
 800ddb6:	685b      	ldreq	r3, [r3, #4]
 800ddb8:	1809      	addeq	r1, r1, r0
 800ddba:	6021      	streq	r1, [r4, #0]
 800ddbc:	e7ed      	b.n	800dd9a <_free_r+0x1e>
 800ddbe:	461a      	mov	r2, r3
 800ddc0:	685b      	ldr	r3, [r3, #4]
 800ddc2:	b10b      	cbz	r3, 800ddc8 <_free_r+0x4c>
 800ddc4:	42a3      	cmp	r3, r4
 800ddc6:	d9fa      	bls.n	800ddbe <_free_r+0x42>
 800ddc8:	6811      	ldr	r1, [r2, #0]
 800ddca:	1850      	adds	r0, r2, r1
 800ddcc:	42a0      	cmp	r0, r4
 800ddce:	d10b      	bne.n	800dde8 <_free_r+0x6c>
 800ddd0:	6820      	ldr	r0, [r4, #0]
 800ddd2:	4401      	add	r1, r0
 800ddd4:	1850      	adds	r0, r2, r1
 800ddd6:	4283      	cmp	r3, r0
 800ddd8:	6011      	str	r1, [r2, #0]
 800ddda:	d1e0      	bne.n	800dd9e <_free_r+0x22>
 800dddc:	6818      	ldr	r0, [r3, #0]
 800ddde:	685b      	ldr	r3, [r3, #4]
 800dde0:	6053      	str	r3, [r2, #4]
 800dde2:	4408      	add	r0, r1
 800dde4:	6010      	str	r0, [r2, #0]
 800dde6:	e7da      	b.n	800dd9e <_free_r+0x22>
 800dde8:	d902      	bls.n	800ddf0 <_free_r+0x74>
 800ddea:	230c      	movs	r3, #12
 800ddec:	602b      	str	r3, [r5, #0]
 800ddee:	e7d6      	b.n	800dd9e <_free_r+0x22>
 800ddf0:	6820      	ldr	r0, [r4, #0]
 800ddf2:	1821      	adds	r1, r4, r0
 800ddf4:	428b      	cmp	r3, r1
 800ddf6:	bf04      	itt	eq
 800ddf8:	6819      	ldreq	r1, [r3, #0]
 800ddfa:	685b      	ldreq	r3, [r3, #4]
 800ddfc:	6063      	str	r3, [r4, #4]
 800ddfe:	bf04      	itt	eq
 800de00:	1809      	addeq	r1, r1, r0
 800de02:	6021      	streq	r1, [r4, #0]
 800de04:	6054      	str	r4, [r2, #4]
 800de06:	e7ca      	b.n	800dd9e <_free_r+0x22>
 800de08:	bd38      	pop	{r3, r4, r5, pc}
 800de0a:	bf00      	nop
 800de0c:	20004f84 	.word	0x20004f84

0800de10 <_findenv_r>:
 800de10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de14:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800de84 <_findenv_r+0x74>
 800de18:	4606      	mov	r6, r0
 800de1a:	4689      	mov	r9, r1
 800de1c:	4617      	mov	r7, r2
 800de1e:	f001 f85d 	bl	800eedc <__env_lock>
 800de22:	f8da 4000 	ldr.w	r4, [sl]
 800de26:	b134      	cbz	r4, 800de36 <_findenv_r+0x26>
 800de28:	464b      	mov	r3, r9
 800de2a:	4698      	mov	r8, r3
 800de2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de30:	b13a      	cbz	r2, 800de42 <_findenv_r+0x32>
 800de32:	2a3d      	cmp	r2, #61	@ 0x3d
 800de34:	d1f9      	bne.n	800de2a <_findenv_r+0x1a>
 800de36:	4630      	mov	r0, r6
 800de38:	f001 f856 	bl	800eee8 <__env_unlock>
 800de3c:	2000      	movs	r0, #0
 800de3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de42:	eba8 0809 	sub.w	r8, r8, r9
 800de46:	46a3      	mov	fp, r4
 800de48:	f854 0b04 	ldr.w	r0, [r4], #4
 800de4c:	2800      	cmp	r0, #0
 800de4e:	d0f2      	beq.n	800de36 <_findenv_r+0x26>
 800de50:	4642      	mov	r2, r8
 800de52:	4649      	mov	r1, r9
 800de54:	f7ff fabf 	bl	800d3d6 <strncmp>
 800de58:	2800      	cmp	r0, #0
 800de5a:	d1f4      	bne.n	800de46 <_findenv_r+0x36>
 800de5c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800de60:	eb03 0508 	add.w	r5, r3, r8
 800de64:	f813 3008 	ldrb.w	r3, [r3, r8]
 800de68:	2b3d      	cmp	r3, #61	@ 0x3d
 800de6a:	d1ec      	bne.n	800de46 <_findenv_r+0x36>
 800de6c:	f8da 3000 	ldr.w	r3, [sl]
 800de70:	ebab 0303 	sub.w	r3, fp, r3
 800de74:	109b      	asrs	r3, r3, #2
 800de76:	4630      	mov	r0, r6
 800de78:	603b      	str	r3, [r7, #0]
 800de7a:	f001 f835 	bl	800eee8 <__env_unlock>
 800de7e:	1c68      	adds	r0, r5, #1
 800de80:	e7dd      	b.n	800de3e <_findenv_r+0x2e>
 800de82:	bf00      	nop
 800de84:	2000003c 	.word	0x2000003c

0800de88 <_getenv_r>:
 800de88:	b507      	push	{r0, r1, r2, lr}
 800de8a:	aa01      	add	r2, sp, #4
 800de8c:	f7ff ffc0 	bl	800de10 <_findenv_r>
 800de90:	b003      	add	sp, #12
 800de92:	f85d fb04 	ldr.w	pc, [sp], #4

0800de96 <__ssputs_r>:
 800de96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de9a:	688e      	ldr	r6, [r1, #8]
 800de9c:	461f      	mov	r7, r3
 800de9e:	42be      	cmp	r6, r7
 800dea0:	680b      	ldr	r3, [r1, #0]
 800dea2:	4682      	mov	sl, r0
 800dea4:	460c      	mov	r4, r1
 800dea6:	4690      	mov	r8, r2
 800dea8:	d82d      	bhi.n	800df06 <__ssputs_r+0x70>
 800deaa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800deae:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800deb2:	d026      	beq.n	800df02 <__ssputs_r+0x6c>
 800deb4:	6965      	ldr	r5, [r4, #20]
 800deb6:	6909      	ldr	r1, [r1, #16]
 800deb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800debc:	eba3 0901 	sub.w	r9, r3, r1
 800dec0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dec4:	1c7b      	adds	r3, r7, #1
 800dec6:	444b      	add	r3, r9
 800dec8:	106d      	asrs	r5, r5, #1
 800deca:	429d      	cmp	r5, r3
 800decc:	bf38      	it	cc
 800dece:	461d      	movcc	r5, r3
 800ded0:	0553      	lsls	r3, r2, #21
 800ded2:	d527      	bpl.n	800df24 <__ssputs_r+0x8e>
 800ded4:	4629      	mov	r1, r5
 800ded6:	f7ff f80d 	bl	800cef4 <_malloc_r>
 800deda:	4606      	mov	r6, r0
 800dedc:	b360      	cbz	r0, 800df38 <__ssputs_r+0xa2>
 800dede:	6921      	ldr	r1, [r4, #16]
 800dee0:	464a      	mov	r2, r9
 800dee2:	f7ff ff16 	bl	800dd12 <memcpy>
 800dee6:	89a3      	ldrh	r3, [r4, #12]
 800dee8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800deec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800def0:	81a3      	strh	r3, [r4, #12]
 800def2:	6126      	str	r6, [r4, #16]
 800def4:	6165      	str	r5, [r4, #20]
 800def6:	444e      	add	r6, r9
 800def8:	eba5 0509 	sub.w	r5, r5, r9
 800defc:	6026      	str	r6, [r4, #0]
 800defe:	60a5      	str	r5, [r4, #8]
 800df00:	463e      	mov	r6, r7
 800df02:	42be      	cmp	r6, r7
 800df04:	d900      	bls.n	800df08 <__ssputs_r+0x72>
 800df06:	463e      	mov	r6, r7
 800df08:	6820      	ldr	r0, [r4, #0]
 800df0a:	4632      	mov	r2, r6
 800df0c:	4641      	mov	r1, r8
 800df0e:	f000 feb5 	bl	800ec7c <memmove>
 800df12:	68a3      	ldr	r3, [r4, #8]
 800df14:	1b9b      	subs	r3, r3, r6
 800df16:	60a3      	str	r3, [r4, #8]
 800df18:	6823      	ldr	r3, [r4, #0]
 800df1a:	4433      	add	r3, r6
 800df1c:	6023      	str	r3, [r4, #0]
 800df1e:	2000      	movs	r0, #0
 800df20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df24:	462a      	mov	r2, r5
 800df26:	f000 fd0b 	bl	800e940 <_realloc_r>
 800df2a:	4606      	mov	r6, r0
 800df2c:	2800      	cmp	r0, #0
 800df2e:	d1e0      	bne.n	800def2 <__ssputs_r+0x5c>
 800df30:	6921      	ldr	r1, [r4, #16]
 800df32:	4650      	mov	r0, sl
 800df34:	f7ff ff22 	bl	800dd7c <_free_r>
 800df38:	230c      	movs	r3, #12
 800df3a:	f8ca 3000 	str.w	r3, [sl]
 800df3e:	89a3      	ldrh	r3, [r4, #12]
 800df40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df44:	81a3      	strh	r3, [r4, #12]
 800df46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800df4a:	e7e9      	b.n	800df20 <__ssputs_r+0x8a>

0800df4c <_svfiprintf_r>:
 800df4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df50:	4698      	mov	r8, r3
 800df52:	898b      	ldrh	r3, [r1, #12]
 800df54:	061b      	lsls	r3, r3, #24
 800df56:	b09d      	sub	sp, #116	@ 0x74
 800df58:	4607      	mov	r7, r0
 800df5a:	460d      	mov	r5, r1
 800df5c:	4614      	mov	r4, r2
 800df5e:	d510      	bpl.n	800df82 <_svfiprintf_r+0x36>
 800df60:	690b      	ldr	r3, [r1, #16]
 800df62:	b973      	cbnz	r3, 800df82 <_svfiprintf_r+0x36>
 800df64:	2140      	movs	r1, #64	@ 0x40
 800df66:	f7fe ffc5 	bl	800cef4 <_malloc_r>
 800df6a:	6028      	str	r0, [r5, #0]
 800df6c:	6128      	str	r0, [r5, #16]
 800df6e:	b930      	cbnz	r0, 800df7e <_svfiprintf_r+0x32>
 800df70:	230c      	movs	r3, #12
 800df72:	603b      	str	r3, [r7, #0]
 800df74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800df78:	b01d      	add	sp, #116	@ 0x74
 800df7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df7e:	2340      	movs	r3, #64	@ 0x40
 800df80:	616b      	str	r3, [r5, #20]
 800df82:	2300      	movs	r3, #0
 800df84:	9309      	str	r3, [sp, #36]	@ 0x24
 800df86:	2320      	movs	r3, #32
 800df88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800df8c:	f8cd 800c 	str.w	r8, [sp, #12]
 800df90:	2330      	movs	r3, #48	@ 0x30
 800df92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e130 <_svfiprintf_r+0x1e4>
 800df96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800df9a:	f04f 0901 	mov.w	r9, #1
 800df9e:	4623      	mov	r3, r4
 800dfa0:	469a      	mov	sl, r3
 800dfa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dfa6:	b10a      	cbz	r2, 800dfac <_svfiprintf_r+0x60>
 800dfa8:	2a25      	cmp	r2, #37	@ 0x25
 800dfaa:	d1f9      	bne.n	800dfa0 <_svfiprintf_r+0x54>
 800dfac:	ebba 0b04 	subs.w	fp, sl, r4
 800dfb0:	d00b      	beq.n	800dfca <_svfiprintf_r+0x7e>
 800dfb2:	465b      	mov	r3, fp
 800dfb4:	4622      	mov	r2, r4
 800dfb6:	4629      	mov	r1, r5
 800dfb8:	4638      	mov	r0, r7
 800dfba:	f7ff ff6c 	bl	800de96 <__ssputs_r>
 800dfbe:	3001      	adds	r0, #1
 800dfc0:	f000 80a7 	beq.w	800e112 <_svfiprintf_r+0x1c6>
 800dfc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dfc6:	445a      	add	r2, fp
 800dfc8:	9209      	str	r2, [sp, #36]	@ 0x24
 800dfca:	f89a 3000 	ldrb.w	r3, [sl]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	f000 809f 	beq.w	800e112 <_svfiprintf_r+0x1c6>
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dfda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dfde:	f10a 0a01 	add.w	sl, sl, #1
 800dfe2:	9304      	str	r3, [sp, #16]
 800dfe4:	9307      	str	r3, [sp, #28]
 800dfe6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dfea:	931a      	str	r3, [sp, #104]	@ 0x68
 800dfec:	4654      	mov	r4, sl
 800dfee:	2205      	movs	r2, #5
 800dff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dff4:	484e      	ldr	r0, [pc, #312]	@ (800e130 <_svfiprintf_r+0x1e4>)
 800dff6:	f7f2 f903 	bl	8000200 <memchr>
 800dffa:	9a04      	ldr	r2, [sp, #16]
 800dffc:	b9d8      	cbnz	r0, 800e036 <_svfiprintf_r+0xea>
 800dffe:	06d0      	lsls	r0, r2, #27
 800e000:	bf44      	itt	mi
 800e002:	2320      	movmi	r3, #32
 800e004:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e008:	0711      	lsls	r1, r2, #28
 800e00a:	bf44      	itt	mi
 800e00c:	232b      	movmi	r3, #43	@ 0x2b
 800e00e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e012:	f89a 3000 	ldrb.w	r3, [sl]
 800e016:	2b2a      	cmp	r3, #42	@ 0x2a
 800e018:	d015      	beq.n	800e046 <_svfiprintf_r+0xfa>
 800e01a:	9a07      	ldr	r2, [sp, #28]
 800e01c:	4654      	mov	r4, sl
 800e01e:	2000      	movs	r0, #0
 800e020:	f04f 0c0a 	mov.w	ip, #10
 800e024:	4621      	mov	r1, r4
 800e026:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e02a:	3b30      	subs	r3, #48	@ 0x30
 800e02c:	2b09      	cmp	r3, #9
 800e02e:	d94b      	bls.n	800e0c8 <_svfiprintf_r+0x17c>
 800e030:	b1b0      	cbz	r0, 800e060 <_svfiprintf_r+0x114>
 800e032:	9207      	str	r2, [sp, #28]
 800e034:	e014      	b.n	800e060 <_svfiprintf_r+0x114>
 800e036:	eba0 0308 	sub.w	r3, r0, r8
 800e03a:	fa09 f303 	lsl.w	r3, r9, r3
 800e03e:	4313      	orrs	r3, r2
 800e040:	9304      	str	r3, [sp, #16]
 800e042:	46a2      	mov	sl, r4
 800e044:	e7d2      	b.n	800dfec <_svfiprintf_r+0xa0>
 800e046:	9b03      	ldr	r3, [sp, #12]
 800e048:	1d19      	adds	r1, r3, #4
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	9103      	str	r1, [sp, #12]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	bfbb      	ittet	lt
 800e052:	425b      	neglt	r3, r3
 800e054:	f042 0202 	orrlt.w	r2, r2, #2
 800e058:	9307      	strge	r3, [sp, #28]
 800e05a:	9307      	strlt	r3, [sp, #28]
 800e05c:	bfb8      	it	lt
 800e05e:	9204      	strlt	r2, [sp, #16]
 800e060:	7823      	ldrb	r3, [r4, #0]
 800e062:	2b2e      	cmp	r3, #46	@ 0x2e
 800e064:	d10a      	bne.n	800e07c <_svfiprintf_r+0x130>
 800e066:	7863      	ldrb	r3, [r4, #1]
 800e068:	2b2a      	cmp	r3, #42	@ 0x2a
 800e06a:	d132      	bne.n	800e0d2 <_svfiprintf_r+0x186>
 800e06c:	9b03      	ldr	r3, [sp, #12]
 800e06e:	1d1a      	adds	r2, r3, #4
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	9203      	str	r2, [sp, #12]
 800e074:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e078:	3402      	adds	r4, #2
 800e07a:	9305      	str	r3, [sp, #20]
 800e07c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e140 <_svfiprintf_r+0x1f4>
 800e080:	7821      	ldrb	r1, [r4, #0]
 800e082:	2203      	movs	r2, #3
 800e084:	4650      	mov	r0, sl
 800e086:	f7f2 f8bb 	bl	8000200 <memchr>
 800e08a:	b138      	cbz	r0, 800e09c <_svfiprintf_r+0x150>
 800e08c:	9b04      	ldr	r3, [sp, #16]
 800e08e:	eba0 000a 	sub.w	r0, r0, sl
 800e092:	2240      	movs	r2, #64	@ 0x40
 800e094:	4082      	lsls	r2, r0
 800e096:	4313      	orrs	r3, r2
 800e098:	3401      	adds	r4, #1
 800e09a:	9304      	str	r3, [sp, #16]
 800e09c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0a0:	4824      	ldr	r0, [pc, #144]	@ (800e134 <_svfiprintf_r+0x1e8>)
 800e0a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e0a6:	2206      	movs	r2, #6
 800e0a8:	f7f2 f8aa 	bl	8000200 <memchr>
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	d036      	beq.n	800e11e <_svfiprintf_r+0x1d2>
 800e0b0:	4b21      	ldr	r3, [pc, #132]	@ (800e138 <_svfiprintf_r+0x1ec>)
 800e0b2:	bb1b      	cbnz	r3, 800e0fc <_svfiprintf_r+0x1b0>
 800e0b4:	9b03      	ldr	r3, [sp, #12]
 800e0b6:	3307      	adds	r3, #7
 800e0b8:	f023 0307 	bic.w	r3, r3, #7
 800e0bc:	3308      	adds	r3, #8
 800e0be:	9303      	str	r3, [sp, #12]
 800e0c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0c2:	4433      	add	r3, r6
 800e0c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0c6:	e76a      	b.n	800df9e <_svfiprintf_r+0x52>
 800e0c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e0cc:	460c      	mov	r4, r1
 800e0ce:	2001      	movs	r0, #1
 800e0d0:	e7a8      	b.n	800e024 <_svfiprintf_r+0xd8>
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	3401      	adds	r4, #1
 800e0d6:	9305      	str	r3, [sp, #20]
 800e0d8:	4619      	mov	r1, r3
 800e0da:	f04f 0c0a 	mov.w	ip, #10
 800e0de:	4620      	mov	r0, r4
 800e0e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0e4:	3a30      	subs	r2, #48	@ 0x30
 800e0e6:	2a09      	cmp	r2, #9
 800e0e8:	d903      	bls.n	800e0f2 <_svfiprintf_r+0x1a6>
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d0c6      	beq.n	800e07c <_svfiprintf_r+0x130>
 800e0ee:	9105      	str	r1, [sp, #20]
 800e0f0:	e7c4      	b.n	800e07c <_svfiprintf_r+0x130>
 800e0f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e0f6:	4604      	mov	r4, r0
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	e7f0      	b.n	800e0de <_svfiprintf_r+0x192>
 800e0fc:	ab03      	add	r3, sp, #12
 800e0fe:	9300      	str	r3, [sp, #0]
 800e100:	462a      	mov	r2, r5
 800e102:	4b0e      	ldr	r3, [pc, #56]	@ (800e13c <_svfiprintf_r+0x1f0>)
 800e104:	a904      	add	r1, sp, #16
 800e106:	4638      	mov	r0, r7
 800e108:	f3af 8000 	nop.w
 800e10c:	1c42      	adds	r2, r0, #1
 800e10e:	4606      	mov	r6, r0
 800e110:	d1d6      	bne.n	800e0c0 <_svfiprintf_r+0x174>
 800e112:	89ab      	ldrh	r3, [r5, #12]
 800e114:	065b      	lsls	r3, r3, #25
 800e116:	f53f af2d 	bmi.w	800df74 <_svfiprintf_r+0x28>
 800e11a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e11c:	e72c      	b.n	800df78 <_svfiprintf_r+0x2c>
 800e11e:	ab03      	add	r3, sp, #12
 800e120:	9300      	str	r3, [sp, #0]
 800e122:	462a      	mov	r2, r5
 800e124:	4b05      	ldr	r3, [pc, #20]	@ (800e13c <_svfiprintf_r+0x1f0>)
 800e126:	a904      	add	r1, sp, #16
 800e128:	4638      	mov	r0, r7
 800e12a:	f000 f9bb 	bl	800e4a4 <_printf_i>
 800e12e:	e7ed      	b.n	800e10c <_svfiprintf_r+0x1c0>
 800e130:	08012d73 	.word	0x08012d73
 800e134:	08012d7d 	.word	0x08012d7d
 800e138:	00000000 	.word	0x00000000
 800e13c:	0800de97 	.word	0x0800de97
 800e140:	08012d79 	.word	0x08012d79

0800e144 <__sfputc_r>:
 800e144:	6893      	ldr	r3, [r2, #8]
 800e146:	3b01      	subs	r3, #1
 800e148:	2b00      	cmp	r3, #0
 800e14a:	b410      	push	{r4}
 800e14c:	6093      	str	r3, [r2, #8]
 800e14e:	da08      	bge.n	800e162 <__sfputc_r+0x1e>
 800e150:	6994      	ldr	r4, [r2, #24]
 800e152:	42a3      	cmp	r3, r4
 800e154:	db01      	blt.n	800e15a <__sfputc_r+0x16>
 800e156:	290a      	cmp	r1, #10
 800e158:	d103      	bne.n	800e162 <__sfputc_r+0x1e>
 800e15a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e15e:	f000 bc97 	b.w	800ea90 <__swbuf_r>
 800e162:	6813      	ldr	r3, [r2, #0]
 800e164:	1c58      	adds	r0, r3, #1
 800e166:	6010      	str	r0, [r2, #0]
 800e168:	7019      	strb	r1, [r3, #0]
 800e16a:	4608      	mov	r0, r1
 800e16c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e170:	4770      	bx	lr

0800e172 <__sfputs_r>:
 800e172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e174:	4606      	mov	r6, r0
 800e176:	460f      	mov	r7, r1
 800e178:	4614      	mov	r4, r2
 800e17a:	18d5      	adds	r5, r2, r3
 800e17c:	42ac      	cmp	r4, r5
 800e17e:	d101      	bne.n	800e184 <__sfputs_r+0x12>
 800e180:	2000      	movs	r0, #0
 800e182:	e007      	b.n	800e194 <__sfputs_r+0x22>
 800e184:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e188:	463a      	mov	r2, r7
 800e18a:	4630      	mov	r0, r6
 800e18c:	f7ff ffda 	bl	800e144 <__sfputc_r>
 800e190:	1c43      	adds	r3, r0, #1
 800e192:	d1f3      	bne.n	800e17c <__sfputs_r+0xa>
 800e194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e198 <_vfiprintf_r>:
 800e198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e19c:	460d      	mov	r5, r1
 800e19e:	b09d      	sub	sp, #116	@ 0x74
 800e1a0:	4614      	mov	r4, r2
 800e1a2:	4698      	mov	r8, r3
 800e1a4:	4606      	mov	r6, r0
 800e1a6:	b118      	cbz	r0, 800e1b0 <_vfiprintf_r+0x18>
 800e1a8:	6a03      	ldr	r3, [r0, #32]
 800e1aa:	b90b      	cbnz	r3, 800e1b0 <_vfiprintf_r+0x18>
 800e1ac:	f7fe ffda 	bl	800d164 <__sinit>
 800e1b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e1b2:	07d9      	lsls	r1, r3, #31
 800e1b4:	d405      	bmi.n	800e1c2 <_vfiprintf_r+0x2a>
 800e1b6:	89ab      	ldrh	r3, [r5, #12]
 800e1b8:	059a      	lsls	r2, r3, #22
 800e1ba:	d402      	bmi.n	800e1c2 <_vfiprintf_r+0x2a>
 800e1bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e1be:	f7ff fda5 	bl	800dd0c <__retarget_lock_acquire_recursive>
 800e1c2:	89ab      	ldrh	r3, [r5, #12]
 800e1c4:	071b      	lsls	r3, r3, #28
 800e1c6:	d501      	bpl.n	800e1cc <_vfiprintf_r+0x34>
 800e1c8:	692b      	ldr	r3, [r5, #16]
 800e1ca:	b99b      	cbnz	r3, 800e1f4 <_vfiprintf_r+0x5c>
 800e1cc:	4629      	mov	r1, r5
 800e1ce:	4630      	mov	r0, r6
 800e1d0:	f000 fc9c 	bl	800eb0c <__swsetup_r>
 800e1d4:	b170      	cbz	r0, 800e1f4 <_vfiprintf_r+0x5c>
 800e1d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e1d8:	07dc      	lsls	r4, r3, #31
 800e1da:	d504      	bpl.n	800e1e6 <_vfiprintf_r+0x4e>
 800e1dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e1e0:	b01d      	add	sp, #116	@ 0x74
 800e1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1e6:	89ab      	ldrh	r3, [r5, #12]
 800e1e8:	0598      	lsls	r0, r3, #22
 800e1ea:	d4f7      	bmi.n	800e1dc <_vfiprintf_r+0x44>
 800e1ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e1ee:	f7ff fd8f 	bl	800dd10 <__retarget_lock_release_recursive>
 800e1f2:	e7f3      	b.n	800e1dc <_vfiprintf_r+0x44>
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1f8:	2320      	movs	r3, #32
 800e1fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e1fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800e202:	2330      	movs	r3, #48	@ 0x30
 800e204:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e3b4 <_vfiprintf_r+0x21c>
 800e208:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e20c:	f04f 0901 	mov.w	r9, #1
 800e210:	4623      	mov	r3, r4
 800e212:	469a      	mov	sl, r3
 800e214:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e218:	b10a      	cbz	r2, 800e21e <_vfiprintf_r+0x86>
 800e21a:	2a25      	cmp	r2, #37	@ 0x25
 800e21c:	d1f9      	bne.n	800e212 <_vfiprintf_r+0x7a>
 800e21e:	ebba 0b04 	subs.w	fp, sl, r4
 800e222:	d00b      	beq.n	800e23c <_vfiprintf_r+0xa4>
 800e224:	465b      	mov	r3, fp
 800e226:	4622      	mov	r2, r4
 800e228:	4629      	mov	r1, r5
 800e22a:	4630      	mov	r0, r6
 800e22c:	f7ff ffa1 	bl	800e172 <__sfputs_r>
 800e230:	3001      	adds	r0, #1
 800e232:	f000 80a7 	beq.w	800e384 <_vfiprintf_r+0x1ec>
 800e236:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e238:	445a      	add	r2, fp
 800e23a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e23c:	f89a 3000 	ldrb.w	r3, [sl]
 800e240:	2b00      	cmp	r3, #0
 800e242:	f000 809f 	beq.w	800e384 <_vfiprintf_r+0x1ec>
 800e246:	2300      	movs	r3, #0
 800e248:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e24c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e250:	f10a 0a01 	add.w	sl, sl, #1
 800e254:	9304      	str	r3, [sp, #16]
 800e256:	9307      	str	r3, [sp, #28]
 800e258:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e25c:	931a      	str	r3, [sp, #104]	@ 0x68
 800e25e:	4654      	mov	r4, sl
 800e260:	2205      	movs	r2, #5
 800e262:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e266:	4853      	ldr	r0, [pc, #332]	@ (800e3b4 <_vfiprintf_r+0x21c>)
 800e268:	f7f1 ffca 	bl	8000200 <memchr>
 800e26c:	9a04      	ldr	r2, [sp, #16]
 800e26e:	b9d8      	cbnz	r0, 800e2a8 <_vfiprintf_r+0x110>
 800e270:	06d1      	lsls	r1, r2, #27
 800e272:	bf44      	itt	mi
 800e274:	2320      	movmi	r3, #32
 800e276:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e27a:	0713      	lsls	r3, r2, #28
 800e27c:	bf44      	itt	mi
 800e27e:	232b      	movmi	r3, #43	@ 0x2b
 800e280:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e284:	f89a 3000 	ldrb.w	r3, [sl]
 800e288:	2b2a      	cmp	r3, #42	@ 0x2a
 800e28a:	d015      	beq.n	800e2b8 <_vfiprintf_r+0x120>
 800e28c:	9a07      	ldr	r2, [sp, #28]
 800e28e:	4654      	mov	r4, sl
 800e290:	2000      	movs	r0, #0
 800e292:	f04f 0c0a 	mov.w	ip, #10
 800e296:	4621      	mov	r1, r4
 800e298:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e29c:	3b30      	subs	r3, #48	@ 0x30
 800e29e:	2b09      	cmp	r3, #9
 800e2a0:	d94b      	bls.n	800e33a <_vfiprintf_r+0x1a2>
 800e2a2:	b1b0      	cbz	r0, 800e2d2 <_vfiprintf_r+0x13a>
 800e2a4:	9207      	str	r2, [sp, #28]
 800e2a6:	e014      	b.n	800e2d2 <_vfiprintf_r+0x13a>
 800e2a8:	eba0 0308 	sub.w	r3, r0, r8
 800e2ac:	fa09 f303 	lsl.w	r3, r9, r3
 800e2b0:	4313      	orrs	r3, r2
 800e2b2:	9304      	str	r3, [sp, #16]
 800e2b4:	46a2      	mov	sl, r4
 800e2b6:	e7d2      	b.n	800e25e <_vfiprintf_r+0xc6>
 800e2b8:	9b03      	ldr	r3, [sp, #12]
 800e2ba:	1d19      	adds	r1, r3, #4
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	9103      	str	r1, [sp, #12]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	bfbb      	ittet	lt
 800e2c4:	425b      	neglt	r3, r3
 800e2c6:	f042 0202 	orrlt.w	r2, r2, #2
 800e2ca:	9307      	strge	r3, [sp, #28]
 800e2cc:	9307      	strlt	r3, [sp, #28]
 800e2ce:	bfb8      	it	lt
 800e2d0:	9204      	strlt	r2, [sp, #16]
 800e2d2:	7823      	ldrb	r3, [r4, #0]
 800e2d4:	2b2e      	cmp	r3, #46	@ 0x2e
 800e2d6:	d10a      	bne.n	800e2ee <_vfiprintf_r+0x156>
 800e2d8:	7863      	ldrb	r3, [r4, #1]
 800e2da:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2dc:	d132      	bne.n	800e344 <_vfiprintf_r+0x1ac>
 800e2de:	9b03      	ldr	r3, [sp, #12]
 800e2e0:	1d1a      	adds	r2, r3, #4
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	9203      	str	r2, [sp, #12]
 800e2e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e2ea:	3402      	adds	r4, #2
 800e2ec:	9305      	str	r3, [sp, #20]
 800e2ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e3c4 <_vfiprintf_r+0x22c>
 800e2f2:	7821      	ldrb	r1, [r4, #0]
 800e2f4:	2203      	movs	r2, #3
 800e2f6:	4650      	mov	r0, sl
 800e2f8:	f7f1 ff82 	bl	8000200 <memchr>
 800e2fc:	b138      	cbz	r0, 800e30e <_vfiprintf_r+0x176>
 800e2fe:	9b04      	ldr	r3, [sp, #16]
 800e300:	eba0 000a 	sub.w	r0, r0, sl
 800e304:	2240      	movs	r2, #64	@ 0x40
 800e306:	4082      	lsls	r2, r0
 800e308:	4313      	orrs	r3, r2
 800e30a:	3401      	adds	r4, #1
 800e30c:	9304      	str	r3, [sp, #16]
 800e30e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e312:	4829      	ldr	r0, [pc, #164]	@ (800e3b8 <_vfiprintf_r+0x220>)
 800e314:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e318:	2206      	movs	r2, #6
 800e31a:	f7f1 ff71 	bl	8000200 <memchr>
 800e31e:	2800      	cmp	r0, #0
 800e320:	d03f      	beq.n	800e3a2 <_vfiprintf_r+0x20a>
 800e322:	4b26      	ldr	r3, [pc, #152]	@ (800e3bc <_vfiprintf_r+0x224>)
 800e324:	bb1b      	cbnz	r3, 800e36e <_vfiprintf_r+0x1d6>
 800e326:	9b03      	ldr	r3, [sp, #12]
 800e328:	3307      	adds	r3, #7
 800e32a:	f023 0307 	bic.w	r3, r3, #7
 800e32e:	3308      	adds	r3, #8
 800e330:	9303      	str	r3, [sp, #12]
 800e332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e334:	443b      	add	r3, r7
 800e336:	9309      	str	r3, [sp, #36]	@ 0x24
 800e338:	e76a      	b.n	800e210 <_vfiprintf_r+0x78>
 800e33a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e33e:	460c      	mov	r4, r1
 800e340:	2001      	movs	r0, #1
 800e342:	e7a8      	b.n	800e296 <_vfiprintf_r+0xfe>
 800e344:	2300      	movs	r3, #0
 800e346:	3401      	adds	r4, #1
 800e348:	9305      	str	r3, [sp, #20]
 800e34a:	4619      	mov	r1, r3
 800e34c:	f04f 0c0a 	mov.w	ip, #10
 800e350:	4620      	mov	r0, r4
 800e352:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e356:	3a30      	subs	r2, #48	@ 0x30
 800e358:	2a09      	cmp	r2, #9
 800e35a:	d903      	bls.n	800e364 <_vfiprintf_r+0x1cc>
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d0c6      	beq.n	800e2ee <_vfiprintf_r+0x156>
 800e360:	9105      	str	r1, [sp, #20]
 800e362:	e7c4      	b.n	800e2ee <_vfiprintf_r+0x156>
 800e364:	fb0c 2101 	mla	r1, ip, r1, r2
 800e368:	4604      	mov	r4, r0
 800e36a:	2301      	movs	r3, #1
 800e36c:	e7f0      	b.n	800e350 <_vfiprintf_r+0x1b8>
 800e36e:	ab03      	add	r3, sp, #12
 800e370:	9300      	str	r3, [sp, #0]
 800e372:	462a      	mov	r2, r5
 800e374:	4b12      	ldr	r3, [pc, #72]	@ (800e3c0 <_vfiprintf_r+0x228>)
 800e376:	a904      	add	r1, sp, #16
 800e378:	4630      	mov	r0, r6
 800e37a:	f3af 8000 	nop.w
 800e37e:	4607      	mov	r7, r0
 800e380:	1c78      	adds	r0, r7, #1
 800e382:	d1d6      	bne.n	800e332 <_vfiprintf_r+0x19a>
 800e384:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e386:	07d9      	lsls	r1, r3, #31
 800e388:	d405      	bmi.n	800e396 <_vfiprintf_r+0x1fe>
 800e38a:	89ab      	ldrh	r3, [r5, #12]
 800e38c:	059a      	lsls	r2, r3, #22
 800e38e:	d402      	bmi.n	800e396 <_vfiprintf_r+0x1fe>
 800e390:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e392:	f7ff fcbd 	bl	800dd10 <__retarget_lock_release_recursive>
 800e396:	89ab      	ldrh	r3, [r5, #12]
 800e398:	065b      	lsls	r3, r3, #25
 800e39a:	f53f af1f 	bmi.w	800e1dc <_vfiprintf_r+0x44>
 800e39e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e3a0:	e71e      	b.n	800e1e0 <_vfiprintf_r+0x48>
 800e3a2:	ab03      	add	r3, sp, #12
 800e3a4:	9300      	str	r3, [sp, #0]
 800e3a6:	462a      	mov	r2, r5
 800e3a8:	4b05      	ldr	r3, [pc, #20]	@ (800e3c0 <_vfiprintf_r+0x228>)
 800e3aa:	a904      	add	r1, sp, #16
 800e3ac:	4630      	mov	r0, r6
 800e3ae:	f000 f879 	bl	800e4a4 <_printf_i>
 800e3b2:	e7e4      	b.n	800e37e <_vfiprintf_r+0x1e6>
 800e3b4:	08012d73 	.word	0x08012d73
 800e3b8:	08012d7d 	.word	0x08012d7d
 800e3bc:	00000000 	.word	0x00000000
 800e3c0:	0800e173 	.word	0x0800e173
 800e3c4:	08012d79 	.word	0x08012d79

0800e3c8 <_printf_common>:
 800e3c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3cc:	4616      	mov	r6, r2
 800e3ce:	4698      	mov	r8, r3
 800e3d0:	688a      	ldr	r2, [r1, #8]
 800e3d2:	690b      	ldr	r3, [r1, #16]
 800e3d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e3d8:	4293      	cmp	r3, r2
 800e3da:	bfb8      	it	lt
 800e3dc:	4613      	movlt	r3, r2
 800e3de:	6033      	str	r3, [r6, #0]
 800e3e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e3e4:	4607      	mov	r7, r0
 800e3e6:	460c      	mov	r4, r1
 800e3e8:	b10a      	cbz	r2, 800e3ee <_printf_common+0x26>
 800e3ea:	3301      	adds	r3, #1
 800e3ec:	6033      	str	r3, [r6, #0]
 800e3ee:	6823      	ldr	r3, [r4, #0]
 800e3f0:	0699      	lsls	r1, r3, #26
 800e3f2:	bf42      	ittt	mi
 800e3f4:	6833      	ldrmi	r3, [r6, #0]
 800e3f6:	3302      	addmi	r3, #2
 800e3f8:	6033      	strmi	r3, [r6, #0]
 800e3fa:	6825      	ldr	r5, [r4, #0]
 800e3fc:	f015 0506 	ands.w	r5, r5, #6
 800e400:	d106      	bne.n	800e410 <_printf_common+0x48>
 800e402:	f104 0a19 	add.w	sl, r4, #25
 800e406:	68e3      	ldr	r3, [r4, #12]
 800e408:	6832      	ldr	r2, [r6, #0]
 800e40a:	1a9b      	subs	r3, r3, r2
 800e40c:	42ab      	cmp	r3, r5
 800e40e:	dc26      	bgt.n	800e45e <_printf_common+0x96>
 800e410:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e414:	6822      	ldr	r2, [r4, #0]
 800e416:	3b00      	subs	r3, #0
 800e418:	bf18      	it	ne
 800e41a:	2301      	movne	r3, #1
 800e41c:	0692      	lsls	r2, r2, #26
 800e41e:	d42b      	bmi.n	800e478 <_printf_common+0xb0>
 800e420:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e424:	4641      	mov	r1, r8
 800e426:	4638      	mov	r0, r7
 800e428:	47c8      	blx	r9
 800e42a:	3001      	adds	r0, #1
 800e42c:	d01e      	beq.n	800e46c <_printf_common+0xa4>
 800e42e:	6823      	ldr	r3, [r4, #0]
 800e430:	6922      	ldr	r2, [r4, #16]
 800e432:	f003 0306 	and.w	r3, r3, #6
 800e436:	2b04      	cmp	r3, #4
 800e438:	bf02      	ittt	eq
 800e43a:	68e5      	ldreq	r5, [r4, #12]
 800e43c:	6833      	ldreq	r3, [r6, #0]
 800e43e:	1aed      	subeq	r5, r5, r3
 800e440:	68a3      	ldr	r3, [r4, #8]
 800e442:	bf0c      	ite	eq
 800e444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e448:	2500      	movne	r5, #0
 800e44a:	4293      	cmp	r3, r2
 800e44c:	bfc4      	itt	gt
 800e44e:	1a9b      	subgt	r3, r3, r2
 800e450:	18ed      	addgt	r5, r5, r3
 800e452:	2600      	movs	r6, #0
 800e454:	341a      	adds	r4, #26
 800e456:	42b5      	cmp	r5, r6
 800e458:	d11a      	bne.n	800e490 <_printf_common+0xc8>
 800e45a:	2000      	movs	r0, #0
 800e45c:	e008      	b.n	800e470 <_printf_common+0xa8>
 800e45e:	2301      	movs	r3, #1
 800e460:	4652      	mov	r2, sl
 800e462:	4641      	mov	r1, r8
 800e464:	4638      	mov	r0, r7
 800e466:	47c8      	blx	r9
 800e468:	3001      	adds	r0, #1
 800e46a:	d103      	bne.n	800e474 <_printf_common+0xac>
 800e46c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e474:	3501      	adds	r5, #1
 800e476:	e7c6      	b.n	800e406 <_printf_common+0x3e>
 800e478:	18e1      	adds	r1, r4, r3
 800e47a:	1c5a      	adds	r2, r3, #1
 800e47c:	2030      	movs	r0, #48	@ 0x30
 800e47e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e482:	4422      	add	r2, r4
 800e484:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e488:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e48c:	3302      	adds	r3, #2
 800e48e:	e7c7      	b.n	800e420 <_printf_common+0x58>
 800e490:	2301      	movs	r3, #1
 800e492:	4622      	mov	r2, r4
 800e494:	4641      	mov	r1, r8
 800e496:	4638      	mov	r0, r7
 800e498:	47c8      	blx	r9
 800e49a:	3001      	adds	r0, #1
 800e49c:	d0e6      	beq.n	800e46c <_printf_common+0xa4>
 800e49e:	3601      	adds	r6, #1
 800e4a0:	e7d9      	b.n	800e456 <_printf_common+0x8e>
	...

0800e4a4 <_printf_i>:
 800e4a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e4a8:	7e0f      	ldrb	r7, [r1, #24]
 800e4aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e4ac:	2f78      	cmp	r7, #120	@ 0x78
 800e4ae:	4691      	mov	r9, r2
 800e4b0:	4680      	mov	r8, r0
 800e4b2:	460c      	mov	r4, r1
 800e4b4:	469a      	mov	sl, r3
 800e4b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e4ba:	d807      	bhi.n	800e4cc <_printf_i+0x28>
 800e4bc:	2f62      	cmp	r7, #98	@ 0x62
 800e4be:	d80a      	bhi.n	800e4d6 <_printf_i+0x32>
 800e4c0:	2f00      	cmp	r7, #0
 800e4c2:	f000 80d2 	beq.w	800e66a <_printf_i+0x1c6>
 800e4c6:	2f58      	cmp	r7, #88	@ 0x58
 800e4c8:	f000 80b9 	beq.w	800e63e <_printf_i+0x19a>
 800e4cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e4d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e4d4:	e03a      	b.n	800e54c <_printf_i+0xa8>
 800e4d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e4da:	2b15      	cmp	r3, #21
 800e4dc:	d8f6      	bhi.n	800e4cc <_printf_i+0x28>
 800e4de:	a101      	add	r1, pc, #4	@ (adr r1, 800e4e4 <_printf_i+0x40>)
 800e4e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e4e4:	0800e53d 	.word	0x0800e53d
 800e4e8:	0800e551 	.word	0x0800e551
 800e4ec:	0800e4cd 	.word	0x0800e4cd
 800e4f0:	0800e4cd 	.word	0x0800e4cd
 800e4f4:	0800e4cd 	.word	0x0800e4cd
 800e4f8:	0800e4cd 	.word	0x0800e4cd
 800e4fc:	0800e551 	.word	0x0800e551
 800e500:	0800e4cd 	.word	0x0800e4cd
 800e504:	0800e4cd 	.word	0x0800e4cd
 800e508:	0800e4cd 	.word	0x0800e4cd
 800e50c:	0800e4cd 	.word	0x0800e4cd
 800e510:	0800e651 	.word	0x0800e651
 800e514:	0800e57b 	.word	0x0800e57b
 800e518:	0800e60b 	.word	0x0800e60b
 800e51c:	0800e4cd 	.word	0x0800e4cd
 800e520:	0800e4cd 	.word	0x0800e4cd
 800e524:	0800e673 	.word	0x0800e673
 800e528:	0800e4cd 	.word	0x0800e4cd
 800e52c:	0800e57b 	.word	0x0800e57b
 800e530:	0800e4cd 	.word	0x0800e4cd
 800e534:	0800e4cd 	.word	0x0800e4cd
 800e538:	0800e613 	.word	0x0800e613
 800e53c:	6833      	ldr	r3, [r6, #0]
 800e53e:	1d1a      	adds	r2, r3, #4
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	6032      	str	r2, [r6, #0]
 800e544:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e548:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e54c:	2301      	movs	r3, #1
 800e54e:	e09d      	b.n	800e68c <_printf_i+0x1e8>
 800e550:	6833      	ldr	r3, [r6, #0]
 800e552:	6820      	ldr	r0, [r4, #0]
 800e554:	1d19      	adds	r1, r3, #4
 800e556:	6031      	str	r1, [r6, #0]
 800e558:	0606      	lsls	r6, r0, #24
 800e55a:	d501      	bpl.n	800e560 <_printf_i+0xbc>
 800e55c:	681d      	ldr	r5, [r3, #0]
 800e55e:	e003      	b.n	800e568 <_printf_i+0xc4>
 800e560:	0645      	lsls	r5, r0, #25
 800e562:	d5fb      	bpl.n	800e55c <_printf_i+0xb8>
 800e564:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e568:	2d00      	cmp	r5, #0
 800e56a:	da03      	bge.n	800e574 <_printf_i+0xd0>
 800e56c:	232d      	movs	r3, #45	@ 0x2d
 800e56e:	426d      	negs	r5, r5
 800e570:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e574:	4859      	ldr	r0, [pc, #356]	@ (800e6dc <_printf_i+0x238>)
 800e576:	230a      	movs	r3, #10
 800e578:	e011      	b.n	800e59e <_printf_i+0xfa>
 800e57a:	6821      	ldr	r1, [r4, #0]
 800e57c:	6833      	ldr	r3, [r6, #0]
 800e57e:	0608      	lsls	r0, r1, #24
 800e580:	f853 5b04 	ldr.w	r5, [r3], #4
 800e584:	d402      	bmi.n	800e58c <_printf_i+0xe8>
 800e586:	0649      	lsls	r1, r1, #25
 800e588:	bf48      	it	mi
 800e58a:	b2ad      	uxthmi	r5, r5
 800e58c:	2f6f      	cmp	r7, #111	@ 0x6f
 800e58e:	4853      	ldr	r0, [pc, #332]	@ (800e6dc <_printf_i+0x238>)
 800e590:	6033      	str	r3, [r6, #0]
 800e592:	bf14      	ite	ne
 800e594:	230a      	movne	r3, #10
 800e596:	2308      	moveq	r3, #8
 800e598:	2100      	movs	r1, #0
 800e59a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e59e:	6866      	ldr	r6, [r4, #4]
 800e5a0:	60a6      	str	r6, [r4, #8]
 800e5a2:	2e00      	cmp	r6, #0
 800e5a4:	bfa2      	ittt	ge
 800e5a6:	6821      	ldrge	r1, [r4, #0]
 800e5a8:	f021 0104 	bicge.w	r1, r1, #4
 800e5ac:	6021      	strge	r1, [r4, #0]
 800e5ae:	b90d      	cbnz	r5, 800e5b4 <_printf_i+0x110>
 800e5b0:	2e00      	cmp	r6, #0
 800e5b2:	d04b      	beq.n	800e64c <_printf_i+0x1a8>
 800e5b4:	4616      	mov	r6, r2
 800e5b6:	fbb5 f1f3 	udiv	r1, r5, r3
 800e5ba:	fb03 5711 	mls	r7, r3, r1, r5
 800e5be:	5dc7      	ldrb	r7, [r0, r7]
 800e5c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e5c4:	462f      	mov	r7, r5
 800e5c6:	42bb      	cmp	r3, r7
 800e5c8:	460d      	mov	r5, r1
 800e5ca:	d9f4      	bls.n	800e5b6 <_printf_i+0x112>
 800e5cc:	2b08      	cmp	r3, #8
 800e5ce:	d10b      	bne.n	800e5e8 <_printf_i+0x144>
 800e5d0:	6823      	ldr	r3, [r4, #0]
 800e5d2:	07df      	lsls	r7, r3, #31
 800e5d4:	d508      	bpl.n	800e5e8 <_printf_i+0x144>
 800e5d6:	6923      	ldr	r3, [r4, #16]
 800e5d8:	6861      	ldr	r1, [r4, #4]
 800e5da:	4299      	cmp	r1, r3
 800e5dc:	bfde      	ittt	le
 800e5de:	2330      	movle	r3, #48	@ 0x30
 800e5e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e5e4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e5e8:	1b92      	subs	r2, r2, r6
 800e5ea:	6122      	str	r2, [r4, #16]
 800e5ec:	f8cd a000 	str.w	sl, [sp]
 800e5f0:	464b      	mov	r3, r9
 800e5f2:	aa03      	add	r2, sp, #12
 800e5f4:	4621      	mov	r1, r4
 800e5f6:	4640      	mov	r0, r8
 800e5f8:	f7ff fee6 	bl	800e3c8 <_printf_common>
 800e5fc:	3001      	adds	r0, #1
 800e5fe:	d14a      	bne.n	800e696 <_printf_i+0x1f2>
 800e600:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e604:	b004      	add	sp, #16
 800e606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e60a:	6823      	ldr	r3, [r4, #0]
 800e60c:	f043 0320 	orr.w	r3, r3, #32
 800e610:	6023      	str	r3, [r4, #0]
 800e612:	4833      	ldr	r0, [pc, #204]	@ (800e6e0 <_printf_i+0x23c>)
 800e614:	2778      	movs	r7, #120	@ 0x78
 800e616:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e61a:	6823      	ldr	r3, [r4, #0]
 800e61c:	6831      	ldr	r1, [r6, #0]
 800e61e:	061f      	lsls	r7, r3, #24
 800e620:	f851 5b04 	ldr.w	r5, [r1], #4
 800e624:	d402      	bmi.n	800e62c <_printf_i+0x188>
 800e626:	065f      	lsls	r7, r3, #25
 800e628:	bf48      	it	mi
 800e62a:	b2ad      	uxthmi	r5, r5
 800e62c:	6031      	str	r1, [r6, #0]
 800e62e:	07d9      	lsls	r1, r3, #31
 800e630:	bf44      	itt	mi
 800e632:	f043 0320 	orrmi.w	r3, r3, #32
 800e636:	6023      	strmi	r3, [r4, #0]
 800e638:	b11d      	cbz	r5, 800e642 <_printf_i+0x19e>
 800e63a:	2310      	movs	r3, #16
 800e63c:	e7ac      	b.n	800e598 <_printf_i+0xf4>
 800e63e:	4827      	ldr	r0, [pc, #156]	@ (800e6dc <_printf_i+0x238>)
 800e640:	e7e9      	b.n	800e616 <_printf_i+0x172>
 800e642:	6823      	ldr	r3, [r4, #0]
 800e644:	f023 0320 	bic.w	r3, r3, #32
 800e648:	6023      	str	r3, [r4, #0]
 800e64a:	e7f6      	b.n	800e63a <_printf_i+0x196>
 800e64c:	4616      	mov	r6, r2
 800e64e:	e7bd      	b.n	800e5cc <_printf_i+0x128>
 800e650:	6833      	ldr	r3, [r6, #0]
 800e652:	6825      	ldr	r5, [r4, #0]
 800e654:	6961      	ldr	r1, [r4, #20]
 800e656:	1d18      	adds	r0, r3, #4
 800e658:	6030      	str	r0, [r6, #0]
 800e65a:	062e      	lsls	r6, r5, #24
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	d501      	bpl.n	800e664 <_printf_i+0x1c0>
 800e660:	6019      	str	r1, [r3, #0]
 800e662:	e002      	b.n	800e66a <_printf_i+0x1c6>
 800e664:	0668      	lsls	r0, r5, #25
 800e666:	d5fb      	bpl.n	800e660 <_printf_i+0x1bc>
 800e668:	8019      	strh	r1, [r3, #0]
 800e66a:	2300      	movs	r3, #0
 800e66c:	6123      	str	r3, [r4, #16]
 800e66e:	4616      	mov	r6, r2
 800e670:	e7bc      	b.n	800e5ec <_printf_i+0x148>
 800e672:	6833      	ldr	r3, [r6, #0]
 800e674:	1d1a      	adds	r2, r3, #4
 800e676:	6032      	str	r2, [r6, #0]
 800e678:	681e      	ldr	r6, [r3, #0]
 800e67a:	6862      	ldr	r2, [r4, #4]
 800e67c:	2100      	movs	r1, #0
 800e67e:	4630      	mov	r0, r6
 800e680:	f7f1 fdbe 	bl	8000200 <memchr>
 800e684:	b108      	cbz	r0, 800e68a <_printf_i+0x1e6>
 800e686:	1b80      	subs	r0, r0, r6
 800e688:	6060      	str	r0, [r4, #4]
 800e68a:	6863      	ldr	r3, [r4, #4]
 800e68c:	6123      	str	r3, [r4, #16]
 800e68e:	2300      	movs	r3, #0
 800e690:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e694:	e7aa      	b.n	800e5ec <_printf_i+0x148>
 800e696:	6923      	ldr	r3, [r4, #16]
 800e698:	4632      	mov	r2, r6
 800e69a:	4649      	mov	r1, r9
 800e69c:	4640      	mov	r0, r8
 800e69e:	47d0      	blx	sl
 800e6a0:	3001      	adds	r0, #1
 800e6a2:	d0ad      	beq.n	800e600 <_printf_i+0x15c>
 800e6a4:	6823      	ldr	r3, [r4, #0]
 800e6a6:	079b      	lsls	r3, r3, #30
 800e6a8:	d413      	bmi.n	800e6d2 <_printf_i+0x22e>
 800e6aa:	68e0      	ldr	r0, [r4, #12]
 800e6ac:	9b03      	ldr	r3, [sp, #12]
 800e6ae:	4298      	cmp	r0, r3
 800e6b0:	bfb8      	it	lt
 800e6b2:	4618      	movlt	r0, r3
 800e6b4:	e7a6      	b.n	800e604 <_printf_i+0x160>
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	4632      	mov	r2, r6
 800e6ba:	4649      	mov	r1, r9
 800e6bc:	4640      	mov	r0, r8
 800e6be:	47d0      	blx	sl
 800e6c0:	3001      	adds	r0, #1
 800e6c2:	d09d      	beq.n	800e600 <_printf_i+0x15c>
 800e6c4:	3501      	adds	r5, #1
 800e6c6:	68e3      	ldr	r3, [r4, #12]
 800e6c8:	9903      	ldr	r1, [sp, #12]
 800e6ca:	1a5b      	subs	r3, r3, r1
 800e6cc:	42ab      	cmp	r3, r5
 800e6ce:	dcf2      	bgt.n	800e6b6 <_printf_i+0x212>
 800e6d0:	e7eb      	b.n	800e6aa <_printf_i+0x206>
 800e6d2:	2500      	movs	r5, #0
 800e6d4:	f104 0619 	add.w	r6, r4, #25
 800e6d8:	e7f5      	b.n	800e6c6 <_printf_i+0x222>
 800e6da:	bf00      	nop
 800e6dc:	08012d84 	.word	0x08012d84
 800e6e0:	08012d95 	.word	0x08012d95

0800e6e4 <__sflush_r>:
 800e6e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6ec:	0716      	lsls	r6, r2, #28
 800e6ee:	4605      	mov	r5, r0
 800e6f0:	460c      	mov	r4, r1
 800e6f2:	d454      	bmi.n	800e79e <__sflush_r+0xba>
 800e6f4:	684b      	ldr	r3, [r1, #4]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	dc02      	bgt.n	800e700 <__sflush_r+0x1c>
 800e6fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	dd48      	ble.n	800e792 <__sflush_r+0xae>
 800e700:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e702:	2e00      	cmp	r6, #0
 800e704:	d045      	beq.n	800e792 <__sflush_r+0xae>
 800e706:	2300      	movs	r3, #0
 800e708:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e70c:	682f      	ldr	r7, [r5, #0]
 800e70e:	6a21      	ldr	r1, [r4, #32]
 800e710:	602b      	str	r3, [r5, #0]
 800e712:	d030      	beq.n	800e776 <__sflush_r+0x92>
 800e714:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e716:	89a3      	ldrh	r3, [r4, #12]
 800e718:	0759      	lsls	r1, r3, #29
 800e71a:	d505      	bpl.n	800e728 <__sflush_r+0x44>
 800e71c:	6863      	ldr	r3, [r4, #4]
 800e71e:	1ad2      	subs	r2, r2, r3
 800e720:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e722:	b10b      	cbz	r3, 800e728 <__sflush_r+0x44>
 800e724:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e726:	1ad2      	subs	r2, r2, r3
 800e728:	2300      	movs	r3, #0
 800e72a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e72c:	6a21      	ldr	r1, [r4, #32]
 800e72e:	4628      	mov	r0, r5
 800e730:	47b0      	blx	r6
 800e732:	1c43      	adds	r3, r0, #1
 800e734:	89a3      	ldrh	r3, [r4, #12]
 800e736:	d106      	bne.n	800e746 <__sflush_r+0x62>
 800e738:	6829      	ldr	r1, [r5, #0]
 800e73a:	291d      	cmp	r1, #29
 800e73c:	d82b      	bhi.n	800e796 <__sflush_r+0xb2>
 800e73e:	4a2a      	ldr	r2, [pc, #168]	@ (800e7e8 <__sflush_r+0x104>)
 800e740:	410a      	asrs	r2, r1
 800e742:	07d6      	lsls	r6, r2, #31
 800e744:	d427      	bmi.n	800e796 <__sflush_r+0xb2>
 800e746:	2200      	movs	r2, #0
 800e748:	6062      	str	r2, [r4, #4]
 800e74a:	04d9      	lsls	r1, r3, #19
 800e74c:	6922      	ldr	r2, [r4, #16]
 800e74e:	6022      	str	r2, [r4, #0]
 800e750:	d504      	bpl.n	800e75c <__sflush_r+0x78>
 800e752:	1c42      	adds	r2, r0, #1
 800e754:	d101      	bne.n	800e75a <__sflush_r+0x76>
 800e756:	682b      	ldr	r3, [r5, #0]
 800e758:	b903      	cbnz	r3, 800e75c <__sflush_r+0x78>
 800e75a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e75c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e75e:	602f      	str	r7, [r5, #0]
 800e760:	b1b9      	cbz	r1, 800e792 <__sflush_r+0xae>
 800e762:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e766:	4299      	cmp	r1, r3
 800e768:	d002      	beq.n	800e770 <__sflush_r+0x8c>
 800e76a:	4628      	mov	r0, r5
 800e76c:	f7ff fb06 	bl	800dd7c <_free_r>
 800e770:	2300      	movs	r3, #0
 800e772:	6363      	str	r3, [r4, #52]	@ 0x34
 800e774:	e00d      	b.n	800e792 <__sflush_r+0xae>
 800e776:	2301      	movs	r3, #1
 800e778:	4628      	mov	r0, r5
 800e77a:	47b0      	blx	r6
 800e77c:	4602      	mov	r2, r0
 800e77e:	1c50      	adds	r0, r2, #1
 800e780:	d1c9      	bne.n	800e716 <__sflush_r+0x32>
 800e782:	682b      	ldr	r3, [r5, #0]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d0c6      	beq.n	800e716 <__sflush_r+0x32>
 800e788:	2b1d      	cmp	r3, #29
 800e78a:	d001      	beq.n	800e790 <__sflush_r+0xac>
 800e78c:	2b16      	cmp	r3, #22
 800e78e:	d11e      	bne.n	800e7ce <__sflush_r+0xea>
 800e790:	602f      	str	r7, [r5, #0]
 800e792:	2000      	movs	r0, #0
 800e794:	e022      	b.n	800e7dc <__sflush_r+0xf8>
 800e796:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e79a:	b21b      	sxth	r3, r3
 800e79c:	e01b      	b.n	800e7d6 <__sflush_r+0xf2>
 800e79e:	690f      	ldr	r7, [r1, #16]
 800e7a0:	2f00      	cmp	r7, #0
 800e7a2:	d0f6      	beq.n	800e792 <__sflush_r+0xae>
 800e7a4:	0793      	lsls	r3, r2, #30
 800e7a6:	680e      	ldr	r6, [r1, #0]
 800e7a8:	bf08      	it	eq
 800e7aa:	694b      	ldreq	r3, [r1, #20]
 800e7ac:	600f      	str	r7, [r1, #0]
 800e7ae:	bf18      	it	ne
 800e7b0:	2300      	movne	r3, #0
 800e7b2:	eba6 0807 	sub.w	r8, r6, r7
 800e7b6:	608b      	str	r3, [r1, #8]
 800e7b8:	f1b8 0f00 	cmp.w	r8, #0
 800e7bc:	dde9      	ble.n	800e792 <__sflush_r+0xae>
 800e7be:	6a21      	ldr	r1, [r4, #32]
 800e7c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e7c2:	4643      	mov	r3, r8
 800e7c4:	463a      	mov	r2, r7
 800e7c6:	4628      	mov	r0, r5
 800e7c8:	47b0      	blx	r6
 800e7ca:	2800      	cmp	r0, #0
 800e7cc:	dc08      	bgt.n	800e7e0 <__sflush_r+0xfc>
 800e7ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7d6:	81a3      	strh	r3, [r4, #12]
 800e7d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7e0:	4407      	add	r7, r0
 800e7e2:	eba8 0800 	sub.w	r8, r8, r0
 800e7e6:	e7e7      	b.n	800e7b8 <__sflush_r+0xd4>
 800e7e8:	dfbffffe 	.word	0xdfbffffe

0800e7ec <_fflush_r>:
 800e7ec:	b538      	push	{r3, r4, r5, lr}
 800e7ee:	690b      	ldr	r3, [r1, #16]
 800e7f0:	4605      	mov	r5, r0
 800e7f2:	460c      	mov	r4, r1
 800e7f4:	b913      	cbnz	r3, 800e7fc <_fflush_r+0x10>
 800e7f6:	2500      	movs	r5, #0
 800e7f8:	4628      	mov	r0, r5
 800e7fa:	bd38      	pop	{r3, r4, r5, pc}
 800e7fc:	b118      	cbz	r0, 800e806 <_fflush_r+0x1a>
 800e7fe:	6a03      	ldr	r3, [r0, #32]
 800e800:	b90b      	cbnz	r3, 800e806 <_fflush_r+0x1a>
 800e802:	f7fe fcaf 	bl	800d164 <__sinit>
 800e806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d0f3      	beq.n	800e7f6 <_fflush_r+0xa>
 800e80e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e810:	07d0      	lsls	r0, r2, #31
 800e812:	d404      	bmi.n	800e81e <_fflush_r+0x32>
 800e814:	0599      	lsls	r1, r3, #22
 800e816:	d402      	bmi.n	800e81e <_fflush_r+0x32>
 800e818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e81a:	f7ff fa77 	bl	800dd0c <__retarget_lock_acquire_recursive>
 800e81e:	4628      	mov	r0, r5
 800e820:	4621      	mov	r1, r4
 800e822:	f7ff ff5f 	bl	800e6e4 <__sflush_r>
 800e826:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e828:	07da      	lsls	r2, r3, #31
 800e82a:	4605      	mov	r5, r0
 800e82c:	d4e4      	bmi.n	800e7f8 <_fflush_r+0xc>
 800e82e:	89a3      	ldrh	r3, [r4, #12]
 800e830:	059b      	lsls	r3, r3, #22
 800e832:	d4e1      	bmi.n	800e7f8 <_fflush_r+0xc>
 800e834:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e836:	f7ff fa6b 	bl	800dd10 <__retarget_lock_release_recursive>
 800e83a:	e7dd      	b.n	800e7f8 <_fflush_r+0xc>

0800e83c <siscanf>:
 800e83c:	b40e      	push	{r1, r2, r3}
 800e83e:	b530      	push	{r4, r5, lr}
 800e840:	b09c      	sub	sp, #112	@ 0x70
 800e842:	ac1f      	add	r4, sp, #124	@ 0x7c
 800e844:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800e848:	f854 5b04 	ldr.w	r5, [r4], #4
 800e84c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e850:	9002      	str	r0, [sp, #8]
 800e852:	9006      	str	r0, [sp, #24]
 800e854:	f7f1 fcbc 	bl	80001d0 <strlen>
 800e858:	4b0b      	ldr	r3, [pc, #44]	@ (800e888 <siscanf+0x4c>)
 800e85a:	9003      	str	r0, [sp, #12]
 800e85c:	9007      	str	r0, [sp, #28]
 800e85e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e860:	480a      	ldr	r0, [pc, #40]	@ (800e88c <siscanf+0x50>)
 800e862:	9401      	str	r4, [sp, #4]
 800e864:	2300      	movs	r3, #0
 800e866:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e868:	9314      	str	r3, [sp, #80]	@ 0x50
 800e86a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e86e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e872:	462a      	mov	r2, r5
 800e874:	4623      	mov	r3, r4
 800e876:	a902      	add	r1, sp, #8
 800e878:	6800      	ldr	r0, [r0, #0]
 800e87a:	f000 fb93 	bl	800efa4 <__ssvfiscanf_r>
 800e87e:	b01c      	add	sp, #112	@ 0x70
 800e880:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e884:	b003      	add	sp, #12
 800e886:	4770      	bx	lr
 800e888:	0800e8b3 	.word	0x0800e8b3
 800e88c:	20000064 	.word	0x20000064

0800e890 <__sread>:
 800e890:	b510      	push	{r4, lr}
 800e892:	460c      	mov	r4, r1
 800e894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e898:	f000 faf4 	bl	800ee84 <_read_r>
 800e89c:	2800      	cmp	r0, #0
 800e89e:	bfab      	itete	ge
 800e8a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e8a2:	89a3      	ldrhlt	r3, [r4, #12]
 800e8a4:	181b      	addge	r3, r3, r0
 800e8a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e8aa:	bfac      	ite	ge
 800e8ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e8ae:	81a3      	strhlt	r3, [r4, #12]
 800e8b0:	bd10      	pop	{r4, pc}

0800e8b2 <__seofread>:
 800e8b2:	2000      	movs	r0, #0
 800e8b4:	4770      	bx	lr

0800e8b6 <__swrite>:
 800e8b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8ba:	461f      	mov	r7, r3
 800e8bc:	898b      	ldrh	r3, [r1, #12]
 800e8be:	05db      	lsls	r3, r3, #23
 800e8c0:	4605      	mov	r5, r0
 800e8c2:	460c      	mov	r4, r1
 800e8c4:	4616      	mov	r6, r2
 800e8c6:	d505      	bpl.n	800e8d4 <__swrite+0x1e>
 800e8c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8cc:	2302      	movs	r3, #2
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	f000 fac6 	bl	800ee60 <_lseek_r>
 800e8d4:	89a3      	ldrh	r3, [r4, #12]
 800e8d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e8da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e8de:	81a3      	strh	r3, [r4, #12]
 800e8e0:	4632      	mov	r2, r6
 800e8e2:	463b      	mov	r3, r7
 800e8e4:	4628      	mov	r0, r5
 800e8e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8ea:	f000 badd 	b.w	800eea8 <_write_r>

0800e8ee <__sseek>:
 800e8ee:	b510      	push	{r4, lr}
 800e8f0:	460c      	mov	r4, r1
 800e8f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8f6:	f000 fab3 	bl	800ee60 <_lseek_r>
 800e8fa:	1c43      	adds	r3, r0, #1
 800e8fc:	89a3      	ldrh	r3, [r4, #12]
 800e8fe:	bf15      	itete	ne
 800e900:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e902:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e906:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e90a:	81a3      	strheq	r3, [r4, #12]
 800e90c:	bf18      	it	ne
 800e90e:	81a3      	strhne	r3, [r4, #12]
 800e910:	bd10      	pop	{r4, pc}

0800e912 <__sclose>:
 800e912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e916:	f000 ba71 	b.w	800edfc <_close_r>
	...

0800e91c <fiprintf>:
 800e91c:	b40e      	push	{r1, r2, r3}
 800e91e:	b503      	push	{r0, r1, lr}
 800e920:	4601      	mov	r1, r0
 800e922:	ab03      	add	r3, sp, #12
 800e924:	4805      	ldr	r0, [pc, #20]	@ (800e93c <fiprintf+0x20>)
 800e926:	f853 2b04 	ldr.w	r2, [r3], #4
 800e92a:	6800      	ldr	r0, [r0, #0]
 800e92c:	9301      	str	r3, [sp, #4]
 800e92e:	f7ff fc33 	bl	800e198 <_vfiprintf_r>
 800e932:	b002      	add	sp, #8
 800e934:	f85d eb04 	ldr.w	lr, [sp], #4
 800e938:	b003      	add	sp, #12
 800e93a:	4770      	bx	lr
 800e93c:	20000064 	.word	0x20000064

0800e940 <_realloc_r>:
 800e940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e944:	4680      	mov	r8, r0
 800e946:	4615      	mov	r5, r2
 800e948:	460c      	mov	r4, r1
 800e94a:	b921      	cbnz	r1, 800e956 <_realloc_r+0x16>
 800e94c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e950:	4611      	mov	r1, r2
 800e952:	f7fe bacf 	b.w	800cef4 <_malloc_r>
 800e956:	b92a      	cbnz	r2, 800e964 <_realloc_r+0x24>
 800e958:	f7ff fa10 	bl	800dd7c <_free_r>
 800e95c:	2400      	movs	r4, #0
 800e95e:	4620      	mov	r0, r4
 800e960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e964:	f000 fe19 	bl	800f59a <_malloc_usable_size_r>
 800e968:	4285      	cmp	r5, r0
 800e96a:	4606      	mov	r6, r0
 800e96c:	d802      	bhi.n	800e974 <_realloc_r+0x34>
 800e96e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e972:	d8f4      	bhi.n	800e95e <_realloc_r+0x1e>
 800e974:	4629      	mov	r1, r5
 800e976:	4640      	mov	r0, r8
 800e978:	f7fe fabc 	bl	800cef4 <_malloc_r>
 800e97c:	4607      	mov	r7, r0
 800e97e:	2800      	cmp	r0, #0
 800e980:	d0ec      	beq.n	800e95c <_realloc_r+0x1c>
 800e982:	42b5      	cmp	r5, r6
 800e984:	462a      	mov	r2, r5
 800e986:	4621      	mov	r1, r4
 800e988:	bf28      	it	cs
 800e98a:	4632      	movcs	r2, r6
 800e98c:	f7ff f9c1 	bl	800dd12 <memcpy>
 800e990:	4621      	mov	r1, r4
 800e992:	4640      	mov	r0, r8
 800e994:	f7ff f9f2 	bl	800dd7c <_free_r>
 800e998:	463c      	mov	r4, r7
 800e99a:	e7e0      	b.n	800e95e <_realloc_r+0x1e>

0800e99c <_strtoul_l.constprop.0>:
 800e99c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e9a0:	4e34      	ldr	r6, [pc, #208]	@ (800ea74 <_strtoul_l.constprop.0+0xd8>)
 800e9a2:	4686      	mov	lr, r0
 800e9a4:	460d      	mov	r5, r1
 800e9a6:	4628      	mov	r0, r5
 800e9a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e9ac:	5d37      	ldrb	r7, [r6, r4]
 800e9ae:	f017 0708 	ands.w	r7, r7, #8
 800e9b2:	d1f8      	bne.n	800e9a6 <_strtoul_l.constprop.0+0xa>
 800e9b4:	2c2d      	cmp	r4, #45	@ 0x2d
 800e9b6:	d12f      	bne.n	800ea18 <_strtoul_l.constprop.0+0x7c>
 800e9b8:	782c      	ldrb	r4, [r5, #0]
 800e9ba:	2701      	movs	r7, #1
 800e9bc:	1c85      	adds	r5, r0, #2
 800e9be:	f033 0010 	bics.w	r0, r3, #16
 800e9c2:	d109      	bne.n	800e9d8 <_strtoul_l.constprop.0+0x3c>
 800e9c4:	2c30      	cmp	r4, #48	@ 0x30
 800e9c6:	d12c      	bne.n	800ea22 <_strtoul_l.constprop.0+0x86>
 800e9c8:	7828      	ldrb	r0, [r5, #0]
 800e9ca:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800e9ce:	2858      	cmp	r0, #88	@ 0x58
 800e9d0:	d127      	bne.n	800ea22 <_strtoul_l.constprop.0+0x86>
 800e9d2:	786c      	ldrb	r4, [r5, #1]
 800e9d4:	2310      	movs	r3, #16
 800e9d6:	3502      	adds	r5, #2
 800e9d8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800e9dc:	2600      	movs	r6, #0
 800e9de:	fbb8 f8f3 	udiv	r8, r8, r3
 800e9e2:	fb03 f908 	mul.w	r9, r3, r8
 800e9e6:	ea6f 0909 	mvn.w	r9, r9
 800e9ea:	4630      	mov	r0, r6
 800e9ec:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800e9f0:	f1bc 0f09 	cmp.w	ip, #9
 800e9f4:	d81c      	bhi.n	800ea30 <_strtoul_l.constprop.0+0x94>
 800e9f6:	4664      	mov	r4, ip
 800e9f8:	42a3      	cmp	r3, r4
 800e9fa:	dd2a      	ble.n	800ea52 <_strtoul_l.constprop.0+0xb6>
 800e9fc:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800ea00:	d007      	beq.n	800ea12 <_strtoul_l.constprop.0+0x76>
 800ea02:	4580      	cmp	r8, r0
 800ea04:	d322      	bcc.n	800ea4c <_strtoul_l.constprop.0+0xb0>
 800ea06:	d101      	bne.n	800ea0c <_strtoul_l.constprop.0+0x70>
 800ea08:	45a1      	cmp	r9, r4
 800ea0a:	db1f      	blt.n	800ea4c <_strtoul_l.constprop.0+0xb0>
 800ea0c:	fb00 4003 	mla	r0, r0, r3, r4
 800ea10:	2601      	movs	r6, #1
 800ea12:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ea16:	e7e9      	b.n	800e9ec <_strtoul_l.constprop.0+0x50>
 800ea18:	2c2b      	cmp	r4, #43	@ 0x2b
 800ea1a:	bf04      	itt	eq
 800ea1c:	782c      	ldrbeq	r4, [r5, #0]
 800ea1e:	1c85      	addeq	r5, r0, #2
 800ea20:	e7cd      	b.n	800e9be <_strtoul_l.constprop.0+0x22>
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d1d8      	bne.n	800e9d8 <_strtoul_l.constprop.0+0x3c>
 800ea26:	2c30      	cmp	r4, #48	@ 0x30
 800ea28:	bf0c      	ite	eq
 800ea2a:	2308      	moveq	r3, #8
 800ea2c:	230a      	movne	r3, #10
 800ea2e:	e7d3      	b.n	800e9d8 <_strtoul_l.constprop.0+0x3c>
 800ea30:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800ea34:	f1bc 0f19 	cmp.w	ip, #25
 800ea38:	d801      	bhi.n	800ea3e <_strtoul_l.constprop.0+0xa2>
 800ea3a:	3c37      	subs	r4, #55	@ 0x37
 800ea3c:	e7dc      	b.n	800e9f8 <_strtoul_l.constprop.0+0x5c>
 800ea3e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800ea42:	f1bc 0f19 	cmp.w	ip, #25
 800ea46:	d804      	bhi.n	800ea52 <_strtoul_l.constprop.0+0xb6>
 800ea48:	3c57      	subs	r4, #87	@ 0x57
 800ea4a:	e7d5      	b.n	800e9f8 <_strtoul_l.constprop.0+0x5c>
 800ea4c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800ea50:	e7df      	b.n	800ea12 <_strtoul_l.constprop.0+0x76>
 800ea52:	1c73      	adds	r3, r6, #1
 800ea54:	d106      	bne.n	800ea64 <_strtoul_l.constprop.0+0xc8>
 800ea56:	2322      	movs	r3, #34	@ 0x22
 800ea58:	f8ce 3000 	str.w	r3, [lr]
 800ea5c:	4630      	mov	r0, r6
 800ea5e:	b932      	cbnz	r2, 800ea6e <_strtoul_l.constprop.0+0xd2>
 800ea60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea64:	b107      	cbz	r7, 800ea68 <_strtoul_l.constprop.0+0xcc>
 800ea66:	4240      	negs	r0, r0
 800ea68:	2a00      	cmp	r2, #0
 800ea6a:	d0f9      	beq.n	800ea60 <_strtoul_l.constprop.0+0xc4>
 800ea6c:	b106      	cbz	r6, 800ea70 <_strtoul_l.constprop.0+0xd4>
 800ea6e:	1e69      	subs	r1, r5, #1
 800ea70:	6011      	str	r1, [r2, #0]
 800ea72:	e7f5      	b.n	800ea60 <_strtoul_l.constprop.0+0xc4>
 800ea74:	08012c37 	.word	0x08012c37

0800ea78 <_strtoul_r>:
 800ea78:	f7ff bf90 	b.w	800e99c <_strtoul_l.constprop.0>

0800ea7c <strtoul>:
 800ea7c:	4613      	mov	r3, r2
 800ea7e:	460a      	mov	r2, r1
 800ea80:	4601      	mov	r1, r0
 800ea82:	4802      	ldr	r0, [pc, #8]	@ (800ea8c <strtoul+0x10>)
 800ea84:	6800      	ldr	r0, [r0, #0]
 800ea86:	f7ff bf89 	b.w	800e99c <_strtoul_l.constprop.0>
 800ea8a:	bf00      	nop
 800ea8c:	20000064 	.word	0x20000064

0800ea90 <__swbuf_r>:
 800ea90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea92:	460e      	mov	r6, r1
 800ea94:	4614      	mov	r4, r2
 800ea96:	4605      	mov	r5, r0
 800ea98:	b118      	cbz	r0, 800eaa2 <__swbuf_r+0x12>
 800ea9a:	6a03      	ldr	r3, [r0, #32]
 800ea9c:	b90b      	cbnz	r3, 800eaa2 <__swbuf_r+0x12>
 800ea9e:	f7fe fb61 	bl	800d164 <__sinit>
 800eaa2:	69a3      	ldr	r3, [r4, #24]
 800eaa4:	60a3      	str	r3, [r4, #8]
 800eaa6:	89a3      	ldrh	r3, [r4, #12]
 800eaa8:	071a      	lsls	r2, r3, #28
 800eaaa:	d501      	bpl.n	800eab0 <__swbuf_r+0x20>
 800eaac:	6923      	ldr	r3, [r4, #16]
 800eaae:	b943      	cbnz	r3, 800eac2 <__swbuf_r+0x32>
 800eab0:	4621      	mov	r1, r4
 800eab2:	4628      	mov	r0, r5
 800eab4:	f000 f82a 	bl	800eb0c <__swsetup_r>
 800eab8:	b118      	cbz	r0, 800eac2 <__swbuf_r+0x32>
 800eaba:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800eabe:	4638      	mov	r0, r7
 800eac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eac2:	6823      	ldr	r3, [r4, #0]
 800eac4:	6922      	ldr	r2, [r4, #16]
 800eac6:	1a98      	subs	r0, r3, r2
 800eac8:	6963      	ldr	r3, [r4, #20]
 800eaca:	b2f6      	uxtb	r6, r6
 800eacc:	4283      	cmp	r3, r0
 800eace:	4637      	mov	r7, r6
 800ead0:	dc05      	bgt.n	800eade <__swbuf_r+0x4e>
 800ead2:	4621      	mov	r1, r4
 800ead4:	4628      	mov	r0, r5
 800ead6:	f7ff fe89 	bl	800e7ec <_fflush_r>
 800eada:	2800      	cmp	r0, #0
 800eadc:	d1ed      	bne.n	800eaba <__swbuf_r+0x2a>
 800eade:	68a3      	ldr	r3, [r4, #8]
 800eae0:	3b01      	subs	r3, #1
 800eae2:	60a3      	str	r3, [r4, #8]
 800eae4:	6823      	ldr	r3, [r4, #0]
 800eae6:	1c5a      	adds	r2, r3, #1
 800eae8:	6022      	str	r2, [r4, #0]
 800eaea:	701e      	strb	r6, [r3, #0]
 800eaec:	6962      	ldr	r2, [r4, #20]
 800eaee:	1c43      	adds	r3, r0, #1
 800eaf0:	429a      	cmp	r2, r3
 800eaf2:	d004      	beq.n	800eafe <__swbuf_r+0x6e>
 800eaf4:	89a3      	ldrh	r3, [r4, #12]
 800eaf6:	07db      	lsls	r3, r3, #31
 800eaf8:	d5e1      	bpl.n	800eabe <__swbuf_r+0x2e>
 800eafa:	2e0a      	cmp	r6, #10
 800eafc:	d1df      	bne.n	800eabe <__swbuf_r+0x2e>
 800eafe:	4621      	mov	r1, r4
 800eb00:	4628      	mov	r0, r5
 800eb02:	f7ff fe73 	bl	800e7ec <_fflush_r>
 800eb06:	2800      	cmp	r0, #0
 800eb08:	d0d9      	beq.n	800eabe <__swbuf_r+0x2e>
 800eb0a:	e7d6      	b.n	800eaba <__swbuf_r+0x2a>

0800eb0c <__swsetup_r>:
 800eb0c:	b538      	push	{r3, r4, r5, lr}
 800eb0e:	4b29      	ldr	r3, [pc, #164]	@ (800ebb4 <__swsetup_r+0xa8>)
 800eb10:	4605      	mov	r5, r0
 800eb12:	6818      	ldr	r0, [r3, #0]
 800eb14:	460c      	mov	r4, r1
 800eb16:	b118      	cbz	r0, 800eb20 <__swsetup_r+0x14>
 800eb18:	6a03      	ldr	r3, [r0, #32]
 800eb1a:	b90b      	cbnz	r3, 800eb20 <__swsetup_r+0x14>
 800eb1c:	f7fe fb22 	bl	800d164 <__sinit>
 800eb20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb24:	0719      	lsls	r1, r3, #28
 800eb26:	d422      	bmi.n	800eb6e <__swsetup_r+0x62>
 800eb28:	06da      	lsls	r2, r3, #27
 800eb2a:	d407      	bmi.n	800eb3c <__swsetup_r+0x30>
 800eb2c:	2209      	movs	r2, #9
 800eb2e:	602a      	str	r2, [r5, #0]
 800eb30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb34:	81a3      	strh	r3, [r4, #12]
 800eb36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eb3a:	e033      	b.n	800eba4 <__swsetup_r+0x98>
 800eb3c:	0758      	lsls	r0, r3, #29
 800eb3e:	d512      	bpl.n	800eb66 <__swsetup_r+0x5a>
 800eb40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eb42:	b141      	cbz	r1, 800eb56 <__swsetup_r+0x4a>
 800eb44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eb48:	4299      	cmp	r1, r3
 800eb4a:	d002      	beq.n	800eb52 <__swsetup_r+0x46>
 800eb4c:	4628      	mov	r0, r5
 800eb4e:	f7ff f915 	bl	800dd7c <_free_r>
 800eb52:	2300      	movs	r3, #0
 800eb54:	6363      	str	r3, [r4, #52]	@ 0x34
 800eb56:	89a3      	ldrh	r3, [r4, #12]
 800eb58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800eb5c:	81a3      	strh	r3, [r4, #12]
 800eb5e:	2300      	movs	r3, #0
 800eb60:	6063      	str	r3, [r4, #4]
 800eb62:	6923      	ldr	r3, [r4, #16]
 800eb64:	6023      	str	r3, [r4, #0]
 800eb66:	89a3      	ldrh	r3, [r4, #12]
 800eb68:	f043 0308 	orr.w	r3, r3, #8
 800eb6c:	81a3      	strh	r3, [r4, #12]
 800eb6e:	6923      	ldr	r3, [r4, #16]
 800eb70:	b94b      	cbnz	r3, 800eb86 <__swsetup_r+0x7a>
 800eb72:	89a3      	ldrh	r3, [r4, #12]
 800eb74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800eb78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eb7c:	d003      	beq.n	800eb86 <__swsetup_r+0x7a>
 800eb7e:	4621      	mov	r1, r4
 800eb80:	4628      	mov	r0, r5
 800eb82:	f000 f83f 	bl	800ec04 <__smakebuf_r>
 800eb86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb8a:	f013 0201 	ands.w	r2, r3, #1
 800eb8e:	d00a      	beq.n	800eba6 <__swsetup_r+0x9a>
 800eb90:	2200      	movs	r2, #0
 800eb92:	60a2      	str	r2, [r4, #8]
 800eb94:	6962      	ldr	r2, [r4, #20]
 800eb96:	4252      	negs	r2, r2
 800eb98:	61a2      	str	r2, [r4, #24]
 800eb9a:	6922      	ldr	r2, [r4, #16]
 800eb9c:	b942      	cbnz	r2, 800ebb0 <__swsetup_r+0xa4>
 800eb9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800eba2:	d1c5      	bne.n	800eb30 <__swsetup_r+0x24>
 800eba4:	bd38      	pop	{r3, r4, r5, pc}
 800eba6:	0799      	lsls	r1, r3, #30
 800eba8:	bf58      	it	pl
 800ebaa:	6962      	ldrpl	r2, [r4, #20]
 800ebac:	60a2      	str	r2, [r4, #8]
 800ebae:	e7f4      	b.n	800eb9a <__swsetup_r+0x8e>
 800ebb0:	2000      	movs	r0, #0
 800ebb2:	e7f7      	b.n	800eba4 <__swsetup_r+0x98>
 800ebb4:	20000064 	.word	0x20000064

0800ebb8 <__swhatbuf_r>:
 800ebb8:	b570      	push	{r4, r5, r6, lr}
 800ebba:	460c      	mov	r4, r1
 800ebbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebc0:	2900      	cmp	r1, #0
 800ebc2:	b096      	sub	sp, #88	@ 0x58
 800ebc4:	4615      	mov	r5, r2
 800ebc6:	461e      	mov	r6, r3
 800ebc8:	da0d      	bge.n	800ebe6 <__swhatbuf_r+0x2e>
 800ebca:	89a3      	ldrh	r3, [r4, #12]
 800ebcc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ebd0:	f04f 0100 	mov.w	r1, #0
 800ebd4:	bf14      	ite	ne
 800ebd6:	2340      	movne	r3, #64	@ 0x40
 800ebd8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ebdc:	2000      	movs	r0, #0
 800ebde:	6031      	str	r1, [r6, #0]
 800ebe0:	602b      	str	r3, [r5, #0]
 800ebe2:	b016      	add	sp, #88	@ 0x58
 800ebe4:	bd70      	pop	{r4, r5, r6, pc}
 800ebe6:	466a      	mov	r2, sp
 800ebe8:	f000 f918 	bl	800ee1c <_fstat_r>
 800ebec:	2800      	cmp	r0, #0
 800ebee:	dbec      	blt.n	800ebca <__swhatbuf_r+0x12>
 800ebf0:	9901      	ldr	r1, [sp, #4]
 800ebf2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ebf6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ebfa:	4259      	negs	r1, r3
 800ebfc:	4159      	adcs	r1, r3
 800ebfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ec02:	e7eb      	b.n	800ebdc <__swhatbuf_r+0x24>

0800ec04 <__smakebuf_r>:
 800ec04:	898b      	ldrh	r3, [r1, #12]
 800ec06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec08:	079d      	lsls	r5, r3, #30
 800ec0a:	4606      	mov	r6, r0
 800ec0c:	460c      	mov	r4, r1
 800ec0e:	d507      	bpl.n	800ec20 <__smakebuf_r+0x1c>
 800ec10:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ec14:	6023      	str	r3, [r4, #0]
 800ec16:	6123      	str	r3, [r4, #16]
 800ec18:	2301      	movs	r3, #1
 800ec1a:	6163      	str	r3, [r4, #20]
 800ec1c:	b003      	add	sp, #12
 800ec1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec20:	ab01      	add	r3, sp, #4
 800ec22:	466a      	mov	r2, sp
 800ec24:	f7ff ffc8 	bl	800ebb8 <__swhatbuf_r>
 800ec28:	9f00      	ldr	r7, [sp, #0]
 800ec2a:	4605      	mov	r5, r0
 800ec2c:	4639      	mov	r1, r7
 800ec2e:	4630      	mov	r0, r6
 800ec30:	f7fe f960 	bl	800cef4 <_malloc_r>
 800ec34:	b948      	cbnz	r0, 800ec4a <__smakebuf_r+0x46>
 800ec36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec3a:	059a      	lsls	r2, r3, #22
 800ec3c:	d4ee      	bmi.n	800ec1c <__smakebuf_r+0x18>
 800ec3e:	f023 0303 	bic.w	r3, r3, #3
 800ec42:	f043 0302 	orr.w	r3, r3, #2
 800ec46:	81a3      	strh	r3, [r4, #12]
 800ec48:	e7e2      	b.n	800ec10 <__smakebuf_r+0xc>
 800ec4a:	89a3      	ldrh	r3, [r4, #12]
 800ec4c:	6020      	str	r0, [r4, #0]
 800ec4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec52:	81a3      	strh	r3, [r4, #12]
 800ec54:	9b01      	ldr	r3, [sp, #4]
 800ec56:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ec5a:	b15b      	cbz	r3, 800ec74 <__smakebuf_r+0x70>
 800ec5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec60:	4630      	mov	r0, r6
 800ec62:	f000 f8ed 	bl	800ee40 <_isatty_r>
 800ec66:	b128      	cbz	r0, 800ec74 <__smakebuf_r+0x70>
 800ec68:	89a3      	ldrh	r3, [r4, #12]
 800ec6a:	f023 0303 	bic.w	r3, r3, #3
 800ec6e:	f043 0301 	orr.w	r3, r3, #1
 800ec72:	81a3      	strh	r3, [r4, #12]
 800ec74:	89a3      	ldrh	r3, [r4, #12]
 800ec76:	431d      	orrs	r5, r3
 800ec78:	81a5      	strh	r5, [r4, #12]
 800ec7a:	e7cf      	b.n	800ec1c <__smakebuf_r+0x18>

0800ec7c <memmove>:
 800ec7c:	4288      	cmp	r0, r1
 800ec7e:	b510      	push	{r4, lr}
 800ec80:	eb01 0402 	add.w	r4, r1, r2
 800ec84:	d902      	bls.n	800ec8c <memmove+0x10>
 800ec86:	4284      	cmp	r4, r0
 800ec88:	4623      	mov	r3, r4
 800ec8a:	d807      	bhi.n	800ec9c <memmove+0x20>
 800ec8c:	1e43      	subs	r3, r0, #1
 800ec8e:	42a1      	cmp	r1, r4
 800ec90:	d008      	beq.n	800eca4 <memmove+0x28>
 800ec92:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec96:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ec9a:	e7f8      	b.n	800ec8e <memmove+0x12>
 800ec9c:	4402      	add	r2, r0
 800ec9e:	4601      	mov	r1, r0
 800eca0:	428a      	cmp	r2, r1
 800eca2:	d100      	bne.n	800eca6 <memmove+0x2a>
 800eca4:	bd10      	pop	{r4, pc}
 800eca6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ecaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ecae:	e7f7      	b.n	800eca0 <memmove+0x24>

0800ecb0 <gmtime_r>:
 800ecb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecb4:	4a4d      	ldr	r2, [pc, #308]	@ (800edec <gmtime_r+0x13c>)
 800ecb6:	460c      	mov	r4, r1
 800ecb8:	2300      	movs	r3, #0
 800ecba:	e9d0 0100 	ldrd	r0, r1, [r0]
 800ecbe:	f7f1 ffa3 	bl	8000c08 <__aeabi_ldivmod>
 800ecc2:	2a00      	cmp	r2, #0
 800ecc4:	bfbc      	itt	lt
 800ecc6:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 800ecca:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 800ecce:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800ecd2:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 800ecd6:	fbb2 f3f1 	udiv	r3, r2, r1
 800ecda:	fb01 2213 	mls	r2, r1, r3, r2
 800ecde:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 800ece2:	bfac      	ite	ge
 800ece4:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 800ece8:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 800ecec:	60a3      	str	r3, [r4, #8]
 800ecee:	fbb2 f3f1 	udiv	r3, r2, r1
 800ecf2:	fb01 2213 	mls	r2, r1, r3, r2
 800ecf6:	6063      	str	r3, [r4, #4]
 800ecf8:	6022      	str	r2, [r4, #0]
 800ecfa:	1cc3      	adds	r3, r0, #3
 800ecfc:	2207      	movs	r2, #7
 800ecfe:	fb93 f2f2 	sdiv	r2, r3, r2
 800ed02:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800ed06:	1a9b      	subs	r3, r3, r2
 800ed08:	bf48      	it	mi
 800ed0a:	3307      	addmi	r3, #7
 800ed0c:	2800      	cmp	r0, #0
 800ed0e:	61a3      	str	r3, [r4, #24]
 800ed10:	bfb8      	it	lt
 800ed12:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 800ed16:	4936      	ldr	r1, [pc, #216]	@ (800edf0 <gmtime_r+0x140>)
 800ed18:	bfae      	itee	ge
 800ed1a:	fb90 f1f1 	sdivge	r1, r0, r1
 800ed1e:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 800ed22:	fb93 f1f1 	sdivlt	r1, r3, r1
 800ed26:	4b33      	ldr	r3, [pc, #204]	@ (800edf4 <gmtime_r+0x144>)
 800ed28:	fb03 0001 	mla	r0, r3, r1, r0
 800ed2c:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 800ed30:	fbb0 f3f3 	udiv	r3, r0, r3
 800ed34:	4403      	add	r3, r0
 800ed36:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 800ed3a:	fbb0 f2fc 	udiv	r2, r0, ip
 800ed3e:	1a9b      	subs	r3, r3, r2
 800ed40:	f240 176d 	movw	r7, #365	@ 0x16d
 800ed44:	4a2c      	ldr	r2, [pc, #176]	@ (800edf8 <gmtime_r+0x148>)
 800ed46:	fbb0 f2f2 	udiv	r2, r0, r2
 800ed4a:	2664      	movs	r6, #100	@ 0x64
 800ed4c:	1a9b      	subs	r3, r3, r2
 800ed4e:	fbb3 f2f7 	udiv	r2, r3, r7
 800ed52:	fbb3 f3fc 	udiv	r3, r3, ip
 800ed56:	fbb2 f5f6 	udiv	r5, r2, r6
 800ed5a:	1aeb      	subs	r3, r5, r3
 800ed5c:	4403      	add	r3, r0
 800ed5e:	fb07 3312 	mls	r3, r7, r2, r3
 800ed62:	2099      	movs	r0, #153	@ 0x99
 800ed64:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800ed68:	3702      	adds	r7, #2
 800ed6a:	f103 0e01 	add.w	lr, r3, #1
 800ed6e:	fbb7 fcf0 	udiv	ip, r7, r0
 800ed72:	fb00 f00c 	mul.w	r0, r0, ip
 800ed76:	3002      	adds	r0, #2
 800ed78:	f04f 0805 	mov.w	r8, #5
 800ed7c:	fbb0 f0f8 	udiv	r0, r0, r8
 800ed80:	ebae 0000 	sub.w	r0, lr, r0
 800ed84:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 800ed88:	4577      	cmp	r7, lr
 800ed8a:	bf8c      	ite	hi
 800ed8c:	f06f 0709 	mvnhi.w	r7, #9
 800ed90:	2702      	movls	r7, #2
 800ed92:	4467      	add	r7, ip
 800ed94:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 800ed98:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed9c:	2f01      	cmp	r7, #1
 800ed9e:	bf98      	it	ls
 800eda0:	3101      	addls	r1, #1
 800eda2:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 800eda6:	d30c      	bcc.n	800edc2 <gmtime_r+0x112>
 800eda8:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800edac:	61e3      	str	r3, [r4, #28]
 800edae:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 800edb2:	2300      	movs	r3, #0
 800edb4:	60e0      	str	r0, [r4, #12]
 800edb6:	e9c4 7104 	strd	r7, r1, [r4, #16]
 800edba:	6223      	str	r3, [r4, #32]
 800edbc:	4620      	mov	r0, r4
 800edbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edc2:	f012 0f03 	tst.w	r2, #3
 800edc6:	d102      	bne.n	800edce <gmtime_r+0x11e>
 800edc8:	fb06 2515 	mls	r5, r6, r5, r2
 800edcc:	b95d      	cbnz	r5, 800ede6 <gmtime_r+0x136>
 800edce:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 800edd2:	fbb2 f6f5 	udiv	r6, r2, r5
 800edd6:	fb05 2216 	mls	r2, r5, r6, r2
 800edda:	fab2 f282 	clz	r2, r2
 800edde:	0952      	lsrs	r2, r2, #5
 800ede0:	333b      	adds	r3, #59	@ 0x3b
 800ede2:	4413      	add	r3, r2
 800ede4:	e7e2      	b.n	800edac <gmtime_r+0xfc>
 800ede6:	2201      	movs	r2, #1
 800ede8:	e7fa      	b.n	800ede0 <gmtime_r+0x130>
 800edea:	bf00      	nop
 800edec:	00015180 	.word	0x00015180
 800edf0:	00023ab1 	.word	0x00023ab1
 800edf4:	fffdc54f 	.word	0xfffdc54f
 800edf8:	00023ab0 	.word	0x00023ab0

0800edfc <_close_r>:
 800edfc:	b538      	push	{r3, r4, r5, lr}
 800edfe:	4d06      	ldr	r5, [pc, #24]	@ (800ee18 <_close_r+0x1c>)
 800ee00:	2300      	movs	r3, #0
 800ee02:	4604      	mov	r4, r0
 800ee04:	4608      	mov	r0, r1
 800ee06:	602b      	str	r3, [r5, #0]
 800ee08:	f7f6 ff6c 	bl	8005ce4 <_close>
 800ee0c:	1c43      	adds	r3, r0, #1
 800ee0e:	d102      	bne.n	800ee16 <_close_r+0x1a>
 800ee10:	682b      	ldr	r3, [r5, #0]
 800ee12:	b103      	cbz	r3, 800ee16 <_close_r+0x1a>
 800ee14:	6023      	str	r3, [r4, #0]
 800ee16:	bd38      	pop	{r3, r4, r5, pc}
 800ee18:	200050e8 	.word	0x200050e8

0800ee1c <_fstat_r>:
 800ee1c:	b538      	push	{r3, r4, r5, lr}
 800ee1e:	4d07      	ldr	r5, [pc, #28]	@ (800ee3c <_fstat_r+0x20>)
 800ee20:	2300      	movs	r3, #0
 800ee22:	4604      	mov	r4, r0
 800ee24:	4608      	mov	r0, r1
 800ee26:	4611      	mov	r1, r2
 800ee28:	602b      	str	r3, [r5, #0]
 800ee2a:	f7f6 ff67 	bl	8005cfc <_fstat>
 800ee2e:	1c43      	adds	r3, r0, #1
 800ee30:	d102      	bne.n	800ee38 <_fstat_r+0x1c>
 800ee32:	682b      	ldr	r3, [r5, #0]
 800ee34:	b103      	cbz	r3, 800ee38 <_fstat_r+0x1c>
 800ee36:	6023      	str	r3, [r4, #0]
 800ee38:	bd38      	pop	{r3, r4, r5, pc}
 800ee3a:	bf00      	nop
 800ee3c:	200050e8 	.word	0x200050e8

0800ee40 <_isatty_r>:
 800ee40:	b538      	push	{r3, r4, r5, lr}
 800ee42:	4d06      	ldr	r5, [pc, #24]	@ (800ee5c <_isatty_r+0x1c>)
 800ee44:	2300      	movs	r3, #0
 800ee46:	4604      	mov	r4, r0
 800ee48:	4608      	mov	r0, r1
 800ee4a:	602b      	str	r3, [r5, #0]
 800ee4c:	f7f6 ff66 	bl	8005d1c <_isatty>
 800ee50:	1c43      	adds	r3, r0, #1
 800ee52:	d102      	bne.n	800ee5a <_isatty_r+0x1a>
 800ee54:	682b      	ldr	r3, [r5, #0]
 800ee56:	b103      	cbz	r3, 800ee5a <_isatty_r+0x1a>
 800ee58:	6023      	str	r3, [r4, #0]
 800ee5a:	bd38      	pop	{r3, r4, r5, pc}
 800ee5c:	200050e8 	.word	0x200050e8

0800ee60 <_lseek_r>:
 800ee60:	b538      	push	{r3, r4, r5, lr}
 800ee62:	4d07      	ldr	r5, [pc, #28]	@ (800ee80 <_lseek_r+0x20>)
 800ee64:	4604      	mov	r4, r0
 800ee66:	4608      	mov	r0, r1
 800ee68:	4611      	mov	r1, r2
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	602a      	str	r2, [r5, #0]
 800ee6e:	461a      	mov	r2, r3
 800ee70:	f7f6 ff5f 	bl	8005d32 <_lseek>
 800ee74:	1c43      	adds	r3, r0, #1
 800ee76:	d102      	bne.n	800ee7e <_lseek_r+0x1e>
 800ee78:	682b      	ldr	r3, [r5, #0]
 800ee7a:	b103      	cbz	r3, 800ee7e <_lseek_r+0x1e>
 800ee7c:	6023      	str	r3, [r4, #0]
 800ee7e:	bd38      	pop	{r3, r4, r5, pc}
 800ee80:	200050e8 	.word	0x200050e8

0800ee84 <_read_r>:
 800ee84:	b538      	push	{r3, r4, r5, lr}
 800ee86:	4d07      	ldr	r5, [pc, #28]	@ (800eea4 <_read_r+0x20>)
 800ee88:	4604      	mov	r4, r0
 800ee8a:	4608      	mov	r0, r1
 800ee8c:	4611      	mov	r1, r2
 800ee8e:	2200      	movs	r2, #0
 800ee90:	602a      	str	r2, [r5, #0]
 800ee92:	461a      	mov	r2, r3
 800ee94:	f7f6 ff09 	bl	8005caa <_read>
 800ee98:	1c43      	adds	r3, r0, #1
 800ee9a:	d102      	bne.n	800eea2 <_read_r+0x1e>
 800ee9c:	682b      	ldr	r3, [r5, #0]
 800ee9e:	b103      	cbz	r3, 800eea2 <_read_r+0x1e>
 800eea0:	6023      	str	r3, [r4, #0]
 800eea2:	bd38      	pop	{r3, r4, r5, pc}
 800eea4:	200050e8 	.word	0x200050e8

0800eea8 <_write_r>:
 800eea8:	b538      	push	{r3, r4, r5, lr}
 800eeaa:	4d07      	ldr	r5, [pc, #28]	@ (800eec8 <_write_r+0x20>)
 800eeac:	4604      	mov	r4, r0
 800eeae:	4608      	mov	r0, r1
 800eeb0:	4611      	mov	r1, r2
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	602a      	str	r2, [r5, #0]
 800eeb6:	461a      	mov	r2, r3
 800eeb8:	f7f6 f801 	bl	8004ebe <_write>
 800eebc:	1c43      	adds	r3, r0, #1
 800eebe:	d102      	bne.n	800eec6 <_write_r+0x1e>
 800eec0:	682b      	ldr	r3, [r5, #0]
 800eec2:	b103      	cbz	r3, 800eec6 <_write_r+0x1e>
 800eec4:	6023      	str	r3, [r4, #0]
 800eec6:	bd38      	pop	{r3, r4, r5, pc}
 800eec8:	200050e8 	.word	0x200050e8

0800eecc <abort>:
 800eecc:	b508      	push	{r3, lr}
 800eece:	2006      	movs	r0, #6
 800eed0:	f000 fbce 	bl	800f670 <raise>
 800eed4:	2001      	movs	r0, #1
 800eed6:	f7f6 fedd 	bl	8005c94 <_exit>
	...

0800eedc <__env_lock>:
 800eedc:	4801      	ldr	r0, [pc, #4]	@ (800eee4 <__env_lock+0x8>)
 800eede:	f7fe bf15 	b.w	800dd0c <__retarget_lock_acquire_recursive>
 800eee2:	bf00      	nop
 800eee4:	200050ed 	.word	0x200050ed

0800eee8 <__env_unlock>:
 800eee8:	4801      	ldr	r0, [pc, #4]	@ (800eef0 <__env_unlock+0x8>)
 800eeea:	f7fe bf11 	b.w	800dd10 <__retarget_lock_release_recursive>
 800eeee:	bf00      	nop
 800eef0:	200050ed 	.word	0x200050ed

0800eef4 <_sungetc_r>:
 800eef4:	b538      	push	{r3, r4, r5, lr}
 800eef6:	1c4b      	adds	r3, r1, #1
 800eef8:	4614      	mov	r4, r2
 800eefa:	d103      	bne.n	800ef04 <_sungetc_r+0x10>
 800eefc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800ef00:	4628      	mov	r0, r5
 800ef02:	bd38      	pop	{r3, r4, r5, pc}
 800ef04:	8993      	ldrh	r3, [r2, #12]
 800ef06:	f023 0320 	bic.w	r3, r3, #32
 800ef0a:	8193      	strh	r3, [r2, #12]
 800ef0c:	6853      	ldr	r3, [r2, #4]
 800ef0e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ef10:	b2cd      	uxtb	r5, r1
 800ef12:	b18a      	cbz	r2, 800ef38 <_sungetc_r+0x44>
 800ef14:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ef16:	429a      	cmp	r2, r3
 800ef18:	dd08      	ble.n	800ef2c <_sungetc_r+0x38>
 800ef1a:	6823      	ldr	r3, [r4, #0]
 800ef1c:	1e5a      	subs	r2, r3, #1
 800ef1e:	6022      	str	r2, [r4, #0]
 800ef20:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ef24:	6863      	ldr	r3, [r4, #4]
 800ef26:	3301      	adds	r3, #1
 800ef28:	6063      	str	r3, [r4, #4]
 800ef2a:	e7e9      	b.n	800ef00 <_sungetc_r+0xc>
 800ef2c:	4621      	mov	r1, r4
 800ef2e:	f000 fb3c 	bl	800f5aa <__submore>
 800ef32:	2800      	cmp	r0, #0
 800ef34:	d0f1      	beq.n	800ef1a <_sungetc_r+0x26>
 800ef36:	e7e1      	b.n	800eefc <_sungetc_r+0x8>
 800ef38:	6921      	ldr	r1, [r4, #16]
 800ef3a:	6822      	ldr	r2, [r4, #0]
 800ef3c:	b141      	cbz	r1, 800ef50 <_sungetc_r+0x5c>
 800ef3e:	4291      	cmp	r1, r2
 800ef40:	d206      	bcs.n	800ef50 <_sungetc_r+0x5c>
 800ef42:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800ef46:	42a9      	cmp	r1, r5
 800ef48:	d102      	bne.n	800ef50 <_sungetc_r+0x5c>
 800ef4a:	3a01      	subs	r2, #1
 800ef4c:	6022      	str	r2, [r4, #0]
 800ef4e:	e7ea      	b.n	800ef26 <_sungetc_r+0x32>
 800ef50:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800ef54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef58:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef5a:	2303      	movs	r3, #3
 800ef5c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ef5e:	4623      	mov	r3, r4
 800ef60:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ef64:	6023      	str	r3, [r4, #0]
 800ef66:	2301      	movs	r3, #1
 800ef68:	e7de      	b.n	800ef28 <_sungetc_r+0x34>

0800ef6a <__ssrefill_r>:
 800ef6a:	b510      	push	{r4, lr}
 800ef6c:	460c      	mov	r4, r1
 800ef6e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ef70:	b169      	cbz	r1, 800ef8e <__ssrefill_r+0x24>
 800ef72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef76:	4299      	cmp	r1, r3
 800ef78:	d001      	beq.n	800ef7e <__ssrefill_r+0x14>
 800ef7a:	f7fe feff 	bl	800dd7c <_free_r>
 800ef7e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ef80:	6063      	str	r3, [r4, #4]
 800ef82:	2000      	movs	r0, #0
 800ef84:	6360      	str	r0, [r4, #52]	@ 0x34
 800ef86:	b113      	cbz	r3, 800ef8e <__ssrefill_r+0x24>
 800ef88:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ef8a:	6023      	str	r3, [r4, #0]
 800ef8c:	bd10      	pop	{r4, pc}
 800ef8e:	6923      	ldr	r3, [r4, #16]
 800ef90:	6023      	str	r3, [r4, #0]
 800ef92:	2300      	movs	r3, #0
 800ef94:	6063      	str	r3, [r4, #4]
 800ef96:	89a3      	ldrh	r3, [r4, #12]
 800ef98:	f043 0320 	orr.w	r3, r3, #32
 800ef9c:	81a3      	strh	r3, [r4, #12]
 800ef9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800efa2:	e7f3      	b.n	800ef8c <__ssrefill_r+0x22>

0800efa4 <__ssvfiscanf_r>:
 800efa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efa8:	460c      	mov	r4, r1
 800efaa:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800efae:	2100      	movs	r1, #0
 800efb0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800efb4:	49a5      	ldr	r1, [pc, #660]	@ (800f24c <__ssvfiscanf_r+0x2a8>)
 800efb6:	91a0      	str	r1, [sp, #640]	@ 0x280
 800efb8:	f10d 0804 	add.w	r8, sp, #4
 800efbc:	49a4      	ldr	r1, [pc, #656]	@ (800f250 <__ssvfiscanf_r+0x2ac>)
 800efbe:	4fa5      	ldr	r7, [pc, #660]	@ (800f254 <__ssvfiscanf_r+0x2b0>)
 800efc0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800efc4:	4606      	mov	r6, r0
 800efc6:	91a1      	str	r1, [sp, #644]	@ 0x284
 800efc8:	9300      	str	r3, [sp, #0]
 800efca:	7813      	ldrb	r3, [r2, #0]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	f000 8158 	beq.w	800f282 <__ssvfiscanf_r+0x2de>
 800efd2:	5cf9      	ldrb	r1, [r7, r3]
 800efd4:	f011 0108 	ands.w	r1, r1, #8
 800efd8:	f102 0501 	add.w	r5, r2, #1
 800efdc:	d019      	beq.n	800f012 <__ssvfiscanf_r+0x6e>
 800efde:	6863      	ldr	r3, [r4, #4]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	dd0f      	ble.n	800f004 <__ssvfiscanf_r+0x60>
 800efe4:	6823      	ldr	r3, [r4, #0]
 800efe6:	781a      	ldrb	r2, [r3, #0]
 800efe8:	5cba      	ldrb	r2, [r7, r2]
 800efea:	0712      	lsls	r2, r2, #28
 800efec:	d401      	bmi.n	800eff2 <__ssvfiscanf_r+0x4e>
 800efee:	462a      	mov	r2, r5
 800eff0:	e7eb      	b.n	800efca <__ssvfiscanf_r+0x26>
 800eff2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800eff4:	3201      	adds	r2, #1
 800eff6:	9245      	str	r2, [sp, #276]	@ 0x114
 800eff8:	6862      	ldr	r2, [r4, #4]
 800effa:	3301      	adds	r3, #1
 800effc:	3a01      	subs	r2, #1
 800effe:	6062      	str	r2, [r4, #4]
 800f000:	6023      	str	r3, [r4, #0]
 800f002:	e7ec      	b.n	800efde <__ssvfiscanf_r+0x3a>
 800f004:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f006:	4621      	mov	r1, r4
 800f008:	4630      	mov	r0, r6
 800f00a:	4798      	blx	r3
 800f00c:	2800      	cmp	r0, #0
 800f00e:	d0e9      	beq.n	800efe4 <__ssvfiscanf_r+0x40>
 800f010:	e7ed      	b.n	800efee <__ssvfiscanf_r+0x4a>
 800f012:	2b25      	cmp	r3, #37	@ 0x25
 800f014:	d012      	beq.n	800f03c <__ssvfiscanf_r+0x98>
 800f016:	4699      	mov	r9, r3
 800f018:	6863      	ldr	r3, [r4, #4]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	f340 8093 	ble.w	800f146 <__ssvfiscanf_r+0x1a2>
 800f020:	6822      	ldr	r2, [r4, #0]
 800f022:	7813      	ldrb	r3, [r2, #0]
 800f024:	454b      	cmp	r3, r9
 800f026:	f040 812c 	bne.w	800f282 <__ssvfiscanf_r+0x2de>
 800f02a:	6863      	ldr	r3, [r4, #4]
 800f02c:	3b01      	subs	r3, #1
 800f02e:	6063      	str	r3, [r4, #4]
 800f030:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800f032:	3201      	adds	r2, #1
 800f034:	3301      	adds	r3, #1
 800f036:	6022      	str	r2, [r4, #0]
 800f038:	9345      	str	r3, [sp, #276]	@ 0x114
 800f03a:	e7d8      	b.n	800efee <__ssvfiscanf_r+0x4a>
 800f03c:	9141      	str	r1, [sp, #260]	@ 0x104
 800f03e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800f040:	7853      	ldrb	r3, [r2, #1]
 800f042:	2b2a      	cmp	r3, #42	@ 0x2a
 800f044:	bf02      	ittt	eq
 800f046:	2310      	moveq	r3, #16
 800f048:	1c95      	addeq	r5, r2, #2
 800f04a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800f04c:	220a      	movs	r2, #10
 800f04e:	46a9      	mov	r9, r5
 800f050:	f819 1b01 	ldrb.w	r1, [r9], #1
 800f054:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800f058:	2b09      	cmp	r3, #9
 800f05a:	d91e      	bls.n	800f09a <__ssvfiscanf_r+0xf6>
 800f05c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800f258 <__ssvfiscanf_r+0x2b4>
 800f060:	2203      	movs	r2, #3
 800f062:	4650      	mov	r0, sl
 800f064:	f7f1 f8cc 	bl	8000200 <memchr>
 800f068:	b138      	cbz	r0, 800f07a <__ssvfiscanf_r+0xd6>
 800f06a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f06c:	eba0 000a 	sub.w	r0, r0, sl
 800f070:	2301      	movs	r3, #1
 800f072:	4083      	lsls	r3, r0
 800f074:	4313      	orrs	r3, r2
 800f076:	9341      	str	r3, [sp, #260]	@ 0x104
 800f078:	464d      	mov	r5, r9
 800f07a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f07e:	2b78      	cmp	r3, #120	@ 0x78
 800f080:	d806      	bhi.n	800f090 <__ssvfiscanf_r+0xec>
 800f082:	2b57      	cmp	r3, #87	@ 0x57
 800f084:	d810      	bhi.n	800f0a8 <__ssvfiscanf_r+0x104>
 800f086:	2b25      	cmp	r3, #37	@ 0x25
 800f088:	d0c5      	beq.n	800f016 <__ssvfiscanf_r+0x72>
 800f08a:	d857      	bhi.n	800f13c <__ssvfiscanf_r+0x198>
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d065      	beq.n	800f15c <__ssvfiscanf_r+0x1b8>
 800f090:	2303      	movs	r3, #3
 800f092:	9347      	str	r3, [sp, #284]	@ 0x11c
 800f094:	230a      	movs	r3, #10
 800f096:	9342      	str	r3, [sp, #264]	@ 0x108
 800f098:	e078      	b.n	800f18c <__ssvfiscanf_r+0x1e8>
 800f09a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800f09c:	fb02 1103 	mla	r1, r2, r3, r1
 800f0a0:	3930      	subs	r1, #48	@ 0x30
 800f0a2:	9143      	str	r1, [sp, #268]	@ 0x10c
 800f0a4:	464d      	mov	r5, r9
 800f0a6:	e7d2      	b.n	800f04e <__ssvfiscanf_r+0xaa>
 800f0a8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800f0ac:	2a20      	cmp	r2, #32
 800f0ae:	d8ef      	bhi.n	800f090 <__ssvfiscanf_r+0xec>
 800f0b0:	a101      	add	r1, pc, #4	@ (adr r1, 800f0b8 <__ssvfiscanf_r+0x114>)
 800f0b2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f0b6:	bf00      	nop
 800f0b8:	0800f16b 	.word	0x0800f16b
 800f0bc:	0800f091 	.word	0x0800f091
 800f0c0:	0800f091 	.word	0x0800f091
 800f0c4:	0800f1c5 	.word	0x0800f1c5
 800f0c8:	0800f091 	.word	0x0800f091
 800f0cc:	0800f091 	.word	0x0800f091
 800f0d0:	0800f091 	.word	0x0800f091
 800f0d4:	0800f091 	.word	0x0800f091
 800f0d8:	0800f091 	.word	0x0800f091
 800f0dc:	0800f091 	.word	0x0800f091
 800f0e0:	0800f091 	.word	0x0800f091
 800f0e4:	0800f1db 	.word	0x0800f1db
 800f0e8:	0800f1c1 	.word	0x0800f1c1
 800f0ec:	0800f143 	.word	0x0800f143
 800f0f0:	0800f143 	.word	0x0800f143
 800f0f4:	0800f143 	.word	0x0800f143
 800f0f8:	0800f091 	.word	0x0800f091
 800f0fc:	0800f17d 	.word	0x0800f17d
 800f100:	0800f091 	.word	0x0800f091
 800f104:	0800f091 	.word	0x0800f091
 800f108:	0800f091 	.word	0x0800f091
 800f10c:	0800f091 	.word	0x0800f091
 800f110:	0800f1eb 	.word	0x0800f1eb
 800f114:	0800f185 	.word	0x0800f185
 800f118:	0800f163 	.word	0x0800f163
 800f11c:	0800f091 	.word	0x0800f091
 800f120:	0800f091 	.word	0x0800f091
 800f124:	0800f1e7 	.word	0x0800f1e7
 800f128:	0800f091 	.word	0x0800f091
 800f12c:	0800f1c1 	.word	0x0800f1c1
 800f130:	0800f091 	.word	0x0800f091
 800f134:	0800f091 	.word	0x0800f091
 800f138:	0800f16b 	.word	0x0800f16b
 800f13c:	3b45      	subs	r3, #69	@ 0x45
 800f13e:	2b02      	cmp	r3, #2
 800f140:	d8a6      	bhi.n	800f090 <__ssvfiscanf_r+0xec>
 800f142:	2305      	movs	r3, #5
 800f144:	e021      	b.n	800f18a <__ssvfiscanf_r+0x1e6>
 800f146:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f148:	4621      	mov	r1, r4
 800f14a:	4630      	mov	r0, r6
 800f14c:	4798      	blx	r3
 800f14e:	2800      	cmp	r0, #0
 800f150:	f43f af66 	beq.w	800f020 <__ssvfiscanf_r+0x7c>
 800f154:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f156:	2800      	cmp	r0, #0
 800f158:	f040 808b 	bne.w	800f272 <__ssvfiscanf_r+0x2ce>
 800f15c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f160:	e08b      	b.n	800f27a <__ssvfiscanf_r+0x2d6>
 800f162:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f164:	f042 0220 	orr.w	r2, r2, #32
 800f168:	9241      	str	r2, [sp, #260]	@ 0x104
 800f16a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f16c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f170:	9241      	str	r2, [sp, #260]	@ 0x104
 800f172:	2210      	movs	r2, #16
 800f174:	2b6e      	cmp	r3, #110	@ 0x6e
 800f176:	9242      	str	r2, [sp, #264]	@ 0x108
 800f178:	d902      	bls.n	800f180 <__ssvfiscanf_r+0x1dc>
 800f17a:	e005      	b.n	800f188 <__ssvfiscanf_r+0x1e4>
 800f17c:	2300      	movs	r3, #0
 800f17e:	9342      	str	r3, [sp, #264]	@ 0x108
 800f180:	2303      	movs	r3, #3
 800f182:	e002      	b.n	800f18a <__ssvfiscanf_r+0x1e6>
 800f184:	2308      	movs	r3, #8
 800f186:	9342      	str	r3, [sp, #264]	@ 0x108
 800f188:	2304      	movs	r3, #4
 800f18a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800f18c:	6863      	ldr	r3, [r4, #4]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	dd39      	ble.n	800f206 <__ssvfiscanf_r+0x262>
 800f192:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f194:	0659      	lsls	r1, r3, #25
 800f196:	d404      	bmi.n	800f1a2 <__ssvfiscanf_r+0x1fe>
 800f198:	6823      	ldr	r3, [r4, #0]
 800f19a:	781a      	ldrb	r2, [r3, #0]
 800f19c:	5cba      	ldrb	r2, [r7, r2]
 800f19e:	0712      	lsls	r2, r2, #28
 800f1a0:	d438      	bmi.n	800f214 <__ssvfiscanf_r+0x270>
 800f1a2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800f1a4:	2b02      	cmp	r3, #2
 800f1a6:	dc47      	bgt.n	800f238 <__ssvfiscanf_r+0x294>
 800f1a8:	466b      	mov	r3, sp
 800f1aa:	4622      	mov	r2, r4
 800f1ac:	a941      	add	r1, sp, #260	@ 0x104
 800f1ae:	4630      	mov	r0, r6
 800f1b0:	f000 f86c 	bl	800f28c <_scanf_chars>
 800f1b4:	2801      	cmp	r0, #1
 800f1b6:	d064      	beq.n	800f282 <__ssvfiscanf_r+0x2de>
 800f1b8:	2802      	cmp	r0, #2
 800f1ba:	f47f af18 	bne.w	800efee <__ssvfiscanf_r+0x4a>
 800f1be:	e7c9      	b.n	800f154 <__ssvfiscanf_r+0x1b0>
 800f1c0:	220a      	movs	r2, #10
 800f1c2:	e7d7      	b.n	800f174 <__ssvfiscanf_r+0x1d0>
 800f1c4:	4629      	mov	r1, r5
 800f1c6:	4640      	mov	r0, r8
 800f1c8:	f000 f9ae 	bl	800f528 <__sccl>
 800f1cc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f1ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1d2:	9341      	str	r3, [sp, #260]	@ 0x104
 800f1d4:	4605      	mov	r5, r0
 800f1d6:	2301      	movs	r3, #1
 800f1d8:	e7d7      	b.n	800f18a <__ssvfiscanf_r+0x1e6>
 800f1da:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f1dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1e0:	9341      	str	r3, [sp, #260]	@ 0x104
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	e7d1      	b.n	800f18a <__ssvfiscanf_r+0x1e6>
 800f1e6:	2302      	movs	r3, #2
 800f1e8:	e7cf      	b.n	800f18a <__ssvfiscanf_r+0x1e6>
 800f1ea:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800f1ec:	06c3      	lsls	r3, r0, #27
 800f1ee:	f53f aefe 	bmi.w	800efee <__ssvfiscanf_r+0x4a>
 800f1f2:	9b00      	ldr	r3, [sp, #0]
 800f1f4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f1f6:	1d19      	adds	r1, r3, #4
 800f1f8:	9100      	str	r1, [sp, #0]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	07c0      	lsls	r0, r0, #31
 800f1fe:	bf4c      	ite	mi
 800f200:	801a      	strhmi	r2, [r3, #0]
 800f202:	601a      	strpl	r2, [r3, #0]
 800f204:	e6f3      	b.n	800efee <__ssvfiscanf_r+0x4a>
 800f206:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f208:	4621      	mov	r1, r4
 800f20a:	4630      	mov	r0, r6
 800f20c:	4798      	blx	r3
 800f20e:	2800      	cmp	r0, #0
 800f210:	d0bf      	beq.n	800f192 <__ssvfiscanf_r+0x1ee>
 800f212:	e79f      	b.n	800f154 <__ssvfiscanf_r+0x1b0>
 800f214:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f216:	3201      	adds	r2, #1
 800f218:	9245      	str	r2, [sp, #276]	@ 0x114
 800f21a:	6862      	ldr	r2, [r4, #4]
 800f21c:	3a01      	subs	r2, #1
 800f21e:	2a00      	cmp	r2, #0
 800f220:	6062      	str	r2, [r4, #4]
 800f222:	dd02      	ble.n	800f22a <__ssvfiscanf_r+0x286>
 800f224:	3301      	adds	r3, #1
 800f226:	6023      	str	r3, [r4, #0]
 800f228:	e7b6      	b.n	800f198 <__ssvfiscanf_r+0x1f4>
 800f22a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f22c:	4621      	mov	r1, r4
 800f22e:	4630      	mov	r0, r6
 800f230:	4798      	blx	r3
 800f232:	2800      	cmp	r0, #0
 800f234:	d0b0      	beq.n	800f198 <__ssvfiscanf_r+0x1f4>
 800f236:	e78d      	b.n	800f154 <__ssvfiscanf_r+0x1b0>
 800f238:	2b04      	cmp	r3, #4
 800f23a:	dc0f      	bgt.n	800f25c <__ssvfiscanf_r+0x2b8>
 800f23c:	466b      	mov	r3, sp
 800f23e:	4622      	mov	r2, r4
 800f240:	a941      	add	r1, sp, #260	@ 0x104
 800f242:	4630      	mov	r0, r6
 800f244:	f000 f87c 	bl	800f340 <_scanf_i>
 800f248:	e7b4      	b.n	800f1b4 <__ssvfiscanf_r+0x210>
 800f24a:	bf00      	nop
 800f24c:	0800eef5 	.word	0x0800eef5
 800f250:	0800ef6b 	.word	0x0800ef6b
 800f254:	08012c37 	.word	0x08012c37
 800f258:	08012d79 	.word	0x08012d79
 800f25c:	4b0a      	ldr	r3, [pc, #40]	@ (800f288 <__ssvfiscanf_r+0x2e4>)
 800f25e:	2b00      	cmp	r3, #0
 800f260:	f43f aec5 	beq.w	800efee <__ssvfiscanf_r+0x4a>
 800f264:	466b      	mov	r3, sp
 800f266:	4622      	mov	r2, r4
 800f268:	a941      	add	r1, sp, #260	@ 0x104
 800f26a:	4630      	mov	r0, r6
 800f26c:	f3af 8000 	nop.w
 800f270:	e7a0      	b.n	800f1b4 <__ssvfiscanf_r+0x210>
 800f272:	89a3      	ldrh	r3, [r4, #12]
 800f274:	065b      	lsls	r3, r3, #25
 800f276:	f53f af71 	bmi.w	800f15c <__ssvfiscanf_r+0x1b8>
 800f27a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800f27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f282:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f284:	e7f9      	b.n	800f27a <__ssvfiscanf_r+0x2d6>
 800f286:	bf00      	nop
 800f288:	00000000 	.word	0x00000000

0800f28c <_scanf_chars>:
 800f28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f290:	4615      	mov	r5, r2
 800f292:	688a      	ldr	r2, [r1, #8]
 800f294:	4680      	mov	r8, r0
 800f296:	460c      	mov	r4, r1
 800f298:	b932      	cbnz	r2, 800f2a8 <_scanf_chars+0x1c>
 800f29a:	698a      	ldr	r2, [r1, #24]
 800f29c:	2a00      	cmp	r2, #0
 800f29e:	bf14      	ite	ne
 800f2a0:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 800f2a4:	2201      	moveq	r2, #1
 800f2a6:	608a      	str	r2, [r1, #8]
 800f2a8:	6822      	ldr	r2, [r4, #0]
 800f2aa:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800f33c <_scanf_chars+0xb0>
 800f2ae:	06d1      	lsls	r1, r2, #27
 800f2b0:	bf5f      	itttt	pl
 800f2b2:	681a      	ldrpl	r2, [r3, #0]
 800f2b4:	1d11      	addpl	r1, r2, #4
 800f2b6:	6019      	strpl	r1, [r3, #0]
 800f2b8:	6816      	ldrpl	r6, [r2, #0]
 800f2ba:	2700      	movs	r7, #0
 800f2bc:	69a0      	ldr	r0, [r4, #24]
 800f2be:	b188      	cbz	r0, 800f2e4 <_scanf_chars+0x58>
 800f2c0:	2801      	cmp	r0, #1
 800f2c2:	d107      	bne.n	800f2d4 <_scanf_chars+0x48>
 800f2c4:	682b      	ldr	r3, [r5, #0]
 800f2c6:	781a      	ldrb	r2, [r3, #0]
 800f2c8:	6963      	ldr	r3, [r4, #20]
 800f2ca:	5c9b      	ldrb	r3, [r3, r2]
 800f2cc:	b953      	cbnz	r3, 800f2e4 <_scanf_chars+0x58>
 800f2ce:	2f00      	cmp	r7, #0
 800f2d0:	d031      	beq.n	800f336 <_scanf_chars+0xaa>
 800f2d2:	e022      	b.n	800f31a <_scanf_chars+0x8e>
 800f2d4:	2802      	cmp	r0, #2
 800f2d6:	d120      	bne.n	800f31a <_scanf_chars+0x8e>
 800f2d8:	682b      	ldr	r3, [r5, #0]
 800f2da:	781b      	ldrb	r3, [r3, #0]
 800f2dc:	f819 3003 	ldrb.w	r3, [r9, r3]
 800f2e0:	071b      	lsls	r3, r3, #28
 800f2e2:	d41a      	bmi.n	800f31a <_scanf_chars+0x8e>
 800f2e4:	6823      	ldr	r3, [r4, #0]
 800f2e6:	06da      	lsls	r2, r3, #27
 800f2e8:	bf5e      	ittt	pl
 800f2ea:	682b      	ldrpl	r3, [r5, #0]
 800f2ec:	781b      	ldrbpl	r3, [r3, #0]
 800f2ee:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f2f2:	682a      	ldr	r2, [r5, #0]
 800f2f4:	686b      	ldr	r3, [r5, #4]
 800f2f6:	3201      	adds	r2, #1
 800f2f8:	602a      	str	r2, [r5, #0]
 800f2fa:	68a2      	ldr	r2, [r4, #8]
 800f2fc:	3b01      	subs	r3, #1
 800f2fe:	3a01      	subs	r2, #1
 800f300:	606b      	str	r3, [r5, #4]
 800f302:	3701      	adds	r7, #1
 800f304:	60a2      	str	r2, [r4, #8]
 800f306:	b142      	cbz	r2, 800f31a <_scanf_chars+0x8e>
 800f308:	2b00      	cmp	r3, #0
 800f30a:	dcd7      	bgt.n	800f2bc <_scanf_chars+0x30>
 800f30c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f310:	4629      	mov	r1, r5
 800f312:	4640      	mov	r0, r8
 800f314:	4798      	blx	r3
 800f316:	2800      	cmp	r0, #0
 800f318:	d0d0      	beq.n	800f2bc <_scanf_chars+0x30>
 800f31a:	6823      	ldr	r3, [r4, #0]
 800f31c:	f013 0310 	ands.w	r3, r3, #16
 800f320:	d105      	bne.n	800f32e <_scanf_chars+0xa2>
 800f322:	68e2      	ldr	r2, [r4, #12]
 800f324:	3201      	adds	r2, #1
 800f326:	60e2      	str	r2, [r4, #12]
 800f328:	69a2      	ldr	r2, [r4, #24]
 800f32a:	b102      	cbz	r2, 800f32e <_scanf_chars+0xa2>
 800f32c:	7033      	strb	r3, [r6, #0]
 800f32e:	6923      	ldr	r3, [r4, #16]
 800f330:	443b      	add	r3, r7
 800f332:	6123      	str	r3, [r4, #16]
 800f334:	2000      	movs	r0, #0
 800f336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f33a:	bf00      	nop
 800f33c:	08012c37 	.word	0x08012c37

0800f340 <_scanf_i>:
 800f340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f344:	4698      	mov	r8, r3
 800f346:	4b74      	ldr	r3, [pc, #464]	@ (800f518 <_scanf_i+0x1d8>)
 800f348:	460c      	mov	r4, r1
 800f34a:	4682      	mov	sl, r0
 800f34c:	4616      	mov	r6, r2
 800f34e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f352:	b087      	sub	sp, #28
 800f354:	ab03      	add	r3, sp, #12
 800f356:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f35a:	4b70      	ldr	r3, [pc, #448]	@ (800f51c <_scanf_i+0x1dc>)
 800f35c:	69a1      	ldr	r1, [r4, #24]
 800f35e:	4a70      	ldr	r2, [pc, #448]	@ (800f520 <_scanf_i+0x1e0>)
 800f360:	2903      	cmp	r1, #3
 800f362:	bf08      	it	eq
 800f364:	461a      	moveq	r2, r3
 800f366:	68a3      	ldr	r3, [r4, #8]
 800f368:	9201      	str	r2, [sp, #4]
 800f36a:	1e5a      	subs	r2, r3, #1
 800f36c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f370:	bf88      	it	hi
 800f372:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f376:	4627      	mov	r7, r4
 800f378:	bf82      	ittt	hi
 800f37a:	eb03 0905 	addhi.w	r9, r3, r5
 800f37e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f382:	60a3      	strhi	r3, [r4, #8]
 800f384:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f388:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800f38c:	bf98      	it	ls
 800f38e:	f04f 0900 	movls.w	r9, #0
 800f392:	6023      	str	r3, [r4, #0]
 800f394:	463d      	mov	r5, r7
 800f396:	f04f 0b00 	mov.w	fp, #0
 800f39a:	6831      	ldr	r1, [r6, #0]
 800f39c:	ab03      	add	r3, sp, #12
 800f39e:	7809      	ldrb	r1, [r1, #0]
 800f3a0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f3a4:	2202      	movs	r2, #2
 800f3a6:	f7f0 ff2b 	bl	8000200 <memchr>
 800f3aa:	b328      	cbz	r0, 800f3f8 <_scanf_i+0xb8>
 800f3ac:	f1bb 0f01 	cmp.w	fp, #1
 800f3b0:	d159      	bne.n	800f466 <_scanf_i+0x126>
 800f3b2:	6862      	ldr	r2, [r4, #4]
 800f3b4:	b92a      	cbnz	r2, 800f3c2 <_scanf_i+0x82>
 800f3b6:	6822      	ldr	r2, [r4, #0]
 800f3b8:	2108      	movs	r1, #8
 800f3ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f3be:	6061      	str	r1, [r4, #4]
 800f3c0:	6022      	str	r2, [r4, #0]
 800f3c2:	6822      	ldr	r2, [r4, #0]
 800f3c4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800f3c8:	6022      	str	r2, [r4, #0]
 800f3ca:	68a2      	ldr	r2, [r4, #8]
 800f3cc:	1e51      	subs	r1, r2, #1
 800f3ce:	60a1      	str	r1, [r4, #8]
 800f3d0:	b192      	cbz	r2, 800f3f8 <_scanf_i+0xb8>
 800f3d2:	6832      	ldr	r2, [r6, #0]
 800f3d4:	1c51      	adds	r1, r2, #1
 800f3d6:	6031      	str	r1, [r6, #0]
 800f3d8:	7812      	ldrb	r2, [r2, #0]
 800f3da:	f805 2b01 	strb.w	r2, [r5], #1
 800f3de:	6872      	ldr	r2, [r6, #4]
 800f3e0:	3a01      	subs	r2, #1
 800f3e2:	2a00      	cmp	r2, #0
 800f3e4:	6072      	str	r2, [r6, #4]
 800f3e6:	dc07      	bgt.n	800f3f8 <_scanf_i+0xb8>
 800f3e8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800f3ec:	4631      	mov	r1, r6
 800f3ee:	4650      	mov	r0, sl
 800f3f0:	4790      	blx	r2
 800f3f2:	2800      	cmp	r0, #0
 800f3f4:	f040 8085 	bne.w	800f502 <_scanf_i+0x1c2>
 800f3f8:	f10b 0b01 	add.w	fp, fp, #1
 800f3fc:	f1bb 0f03 	cmp.w	fp, #3
 800f400:	d1cb      	bne.n	800f39a <_scanf_i+0x5a>
 800f402:	6863      	ldr	r3, [r4, #4]
 800f404:	b90b      	cbnz	r3, 800f40a <_scanf_i+0xca>
 800f406:	230a      	movs	r3, #10
 800f408:	6063      	str	r3, [r4, #4]
 800f40a:	6863      	ldr	r3, [r4, #4]
 800f40c:	4945      	ldr	r1, [pc, #276]	@ (800f524 <_scanf_i+0x1e4>)
 800f40e:	6960      	ldr	r0, [r4, #20]
 800f410:	1ac9      	subs	r1, r1, r3
 800f412:	f000 f889 	bl	800f528 <__sccl>
 800f416:	f04f 0b00 	mov.w	fp, #0
 800f41a:	68a3      	ldr	r3, [r4, #8]
 800f41c:	6822      	ldr	r2, [r4, #0]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d03d      	beq.n	800f49e <_scanf_i+0x15e>
 800f422:	6831      	ldr	r1, [r6, #0]
 800f424:	6960      	ldr	r0, [r4, #20]
 800f426:	f891 c000 	ldrb.w	ip, [r1]
 800f42a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f42e:	2800      	cmp	r0, #0
 800f430:	d035      	beq.n	800f49e <_scanf_i+0x15e>
 800f432:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800f436:	d124      	bne.n	800f482 <_scanf_i+0x142>
 800f438:	0510      	lsls	r0, r2, #20
 800f43a:	d522      	bpl.n	800f482 <_scanf_i+0x142>
 800f43c:	f10b 0b01 	add.w	fp, fp, #1
 800f440:	f1b9 0f00 	cmp.w	r9, #0
 800f444:	d003      	beq.n	800f44e <_scanf_i+0x10e>
 800f446:	3301      	adds	r3, #1
 800f448:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800f44c:	60a3      	str	r3, [r4, #8]
 800f44e:	6873      	ldr	r3, [r6, #4]
 800f450:	3b01      	subs	r3, #1
 800f452:	2b00      	cmp	r3, #0
 800f454:	6073      	str	r3, [r6, #4]
 800f456:	dd1b      	ble.n	800f490 <_scanf_i+0x150>
 800f458:	6833      	ldr	r3, [r6, #0]
 800f45a:	3301      	adds	r3, #1
 800f45c:	6033      	str	r3, [r6, #0]
 800f45e:	68a3      	ldr	r3, [r4, #8]
 800f460:	3b01      	subs	r3, #1
 800f462:	60a3      	str	r3, [r4, #8]
 800f464:	e7d9      	b.n	800f41a <_scanf_i+0xda>
 800f466:	f1bb 0f02 	cmp.w	fp, #2
 800f46a:	d1ae      	bne.n	800f3ca <_scanf_i+0x8a>
 800f46c:	6822      	ldr	r2, [r4, #0]
 800f46e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800f472:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800f476:	d1bf      	bne.n	800f3f8 <_scanf_i+0xb8>
 800f478:	2110      	movs	r1, #16
 800f47a:	6061      	str	r1, [r4, #4]
 800f47c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f480:	e7a2      	b.n	800f3c8 <_scanf_i+0x88>
 800f482:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800f486:	6022      	str	r2, [r4, #0]
 800f488:	780b      	ldrb	r3, [r1, #0]
 800f48a:	f805 3b01 	strb.w	r3, [r5], #1
 800f48e:	e7de      	b.n	800f44e <_scanf_i+0x10e>
 800f490:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f494:	4631      	mov	r1, r6
 800f496:	4650      	mov	r0, sl
 800f498:	4798      	blx	r3
 800f49a:	2800      	cmp	r0, #0
 800f49c:	d0df      	beq.n	800f45e <_scanf_i+0x11e>
 800f49e:	6823      	ldr	r3, [r4, #0]
 800f4a0:	05d9      	lsls	r1, r3, #23
 800f4a2:	d50d      	bpl.n	800f4c0 <_scanf_i+0x180>
 800f4a4:	42bd      	cmp	r5, r7
 800f4a6:	d909      	bls.n	800f4bc <_scanf_i+0x17c>
 800f4a8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f4ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f4b0:	4632      	mov	r2, r6
 800f4b2:	4650      	mov	r0, sl
 800f4b4:	4798      	blx	r3
 800f4b6:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800f4ba:	464d      	mov	r5, r9
 800f4bc:	42bd      	cmp	r5, r7
 800f4be:	d028      	beq.n	800f512 <_scanf_i+0x1d2>
 800f4c0:	6822      	ldr	r2, [r4, #0]
 800f4c2:	f012 0210 	ands.w	r2, r2, #16
 800f4c6:	d113      	bne.n	800f4f0 <_scanf_i+0x1b0>
 800f4c8:	702a      	strb	r2, [r5, #0]
 800f4ca:	6863      	ldr	r3, [r4, #4]
 800f4cc:	9e01      	ldr	r6, [sp, #4]
 800f4ce:	4639      	mov	r1, r7
 800f4d0:	4650      	mov	r0, sl
 800f4d2:	47b0      	blx	r6
 800f4d4:	f8d8 3000 	ldr.w	r3, [r8]
 800f4d8:	6821      	ldr	r1, [r4, #0]
 800f4da:	1d1a      	adds	r2, r3, #4
 800f4dc:	f8c8 2000 	str.w	r2, [r8]
 800f4e0:	f011 0f20 	tst.w	r1, #32
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	d00f      	beq.n	800f508 <_scanf_i+0x1c8>
 800f4e8:	6018      	str	r0, [r3, #0]
 800f4ea:	68e3      	ldr	r3, [r4, #12]
 800f4ec:	3301      	adds	r3, #1
 800f4ee:	60e3      	str	r3, [r4, #12]
 800f4f0:	6923      	ldr	r3, [r4, #16]
 800f4f2:	1bed      	subs	r5, r5, r7
 800f4f4:	445d      	add	r5, fp
 800f4f6:	442b      	add	r3, r5
 800f4f8:	6123      	str	r3, [r4, #16]
 800f4fa:	2000      	movs	r0, #0
 800f4fc:	b007      	add	sp, #28
 800f4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f502:	f04f 0b00 	mov.w	fp, #0
 800f506:	e7ca      	b.n	800f49e <_scanf_i+0x15e>
 800f508:	07ca      	lsls	r2, r1, #31
 800f50a:	bf4c      	ite	mi
 800f50c:	8018      	strhmi	r0, [r3, #0]
 800f50e:	6018      	strpl	r0, [r3, #0]
 800f510:	e7eb      	b.n	800f4ea <_scanf_i+0x1aa>
 800f512:	2001      	movs	r0, #1
 800f514:	e7f2      	b.n	800f4fc <_scanf_i+0x1bc>
 800f516:	bf00      	nop
 800f518:	08010ab0 	.word	0x08010ab0
 800f51c:	0800d289 	.word	0x0800d289
 800f520:	0800ea79 	.word	0x0800ea79
 800f524:	08012db6 	.word	0x08012db6

0800f528 <__sccl>:
 800f528:	b570      	push	{r4, r5, r6, lr}
 800f52a:	780b      	ldrb	r3, [r1, #0]
 800f52c:	4604      	mov	r4, r0
 800f52e:	2b5e      	cmp	r3, #94	@ 0x5e
 800f530:	bf0b      	itete	eq
 800f532:	784b      	ldrbeq	r3, [r1, #1]
 800f534:	1c4a      	addne	r2, r1, #1
 800f536:	1c8a      	addeq	r2, r1, #2
 800f538:	2100      	movne	r1, #0
 800f53a:	bf08      	it	eq
 800f53c:	2101      	moveq	r1, #1
 800f53e:	3801      	subs	r0, #1
 800f540:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800f544:	f800 1f01 	strb.w	r1, [r0, #1]!
 800f548:	42a8      	cmp	r0, r5
 800f54a:	d1fb      	bne.n	800f544 <__sccl+0x1c>
 800f54c:	b90b      	cbnz	r3, 800f552 <__sccl+0x2a>
 800f54e:	1e50      	subs	r0, r2, #1
 800f550:	bd70      	pop	{r4, r5, r6, pc}
 800f552:	f081 0101 	eor.w	r1, r1, #1
 800f556:	54e1      	strb	r1, [r4, r3]
 800f558:	4610      	mov	r0, r2
 800f55a:	4602      	mov	r2, r0
 800f55c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f560:	2d2d      	cmp	r5, #45	@ 0x2d
 800f562:	d005      	beq.n	800f570 <__sccl+0x48>
 800f564:	2d5d      	cmp	r5, #93	@ 0x5d
 800f566:	d016      	beq.n	800f596 <__sccl+0x6e>
 800f568:	2d00      	cmp	r5, #0
 800f56a:	d0f1      	beq.n	800f550 <__sccl+0x28>
 800f56c:	462b      	mov	r3, r5
 800f56e:	e7f2      	b.n	800f556 <__sccl+0x2e>
 800f570:	7846      	ldrb	r6, [r0, #1]
 800f572:	2e5d      	cmp	r6, #93	@ 0x5d
 800f574:	d0fa      	beq.n	800f56c <__sccl+0x44>
 800f576:	42b3      	cmp	r3, r6
 800f578:	dcf8      	bgt.n	800f56c <__sccl+0x44>
 800f57a:	3002      	adds	r0, #2
 800f57c:	461a      	mov	r2, r3
 800f57e:	3201      	adds	r2, #1
 800f580:	4296      	cmp	r6, r2
 800f582:	54a1      	strb	r1, [r4, r2]
 800f584:	dcfb      	bgt.n	800f57e <__sccl+0x56>
 800f586:	1af2      	subs	r2, r6, r3
 800f588:	3a01      	subs	r2, #1
 800f58a:	1c5d      	adds	r5, r3, #1
 800f58c:	42b3      	cmp	r3, r6
 800f58e:	bfa8      	it	ge
 800f590:	2200      	movge	r2, #0
 800f592:	18ab      	adds	r3, r5, r2
 800f594:	e7e1      	b.n	800f55a <__sccl+0x32>
 800f596:	4610      	mov	r0, r2
 800f598:	e7da      	b.n	800f550 <__sccl+0x28>

0800f59a <_malloc_usable_size_r>:
 800f59a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f59e:	1f18      	subs	r0, r3, #4
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	bfbc      	itt	lt
 800f5a4:	580b      	ldrlt	r3, [r1, r0]
 800f5a6:	18c0      	addlt	r0, r0, r3
 800f5a8:	4770      	bx	lr

0800f5aa <__submore>:
 800f5aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5ae:	460c      	mov	r4, r1
 800f5b0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800f5b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f5b6:	4299      	cmp	r1, r3
 800f5b8:	d11d      	bne.n	800f5f6 <__submore+0x4c>
 800f5ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800f5be:	f7fd fc99 	bl	800cef4 <_malloc_r>
 800f5c2:	b918      	cbnz	r0, 800f5cc <__submore+0x22>
 800f5c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f5c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f5d0:	63a3      	str	r3, [r4, #56]	@ 0x38
 800f5d2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800f5d6:	6360      	str	r0, [r4, #52]	@ 0x34
 800f5d8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800f5dc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800f5e0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800f5e4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f5e8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800f5ec:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800f5f0:	6020      	str	r0, [r4, #0]
 800f5f2:	2000      	movs	r0, #0
 800f5f4:	e7e8      	b.n	800f5c8 <__submore+0x1e>
 800f5f6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800f5f8:	0077      	lsls	r7, r6, #1
 800f5fa:	463a      	mov	r2, r7
 800f5fc:	f7ff f9a0 	bl	800e940 <_realloc_r>
 800f600:	4605      	mov	r5, r0
 800f602:	2800      	cmp	r0, #0
 800f604:	d0de      	beq.n	800f5c4 <__submore+0x1a>
 800f606:	eb00 0806 	add.w	r8, r0, r6
 800f60a:	4601      	mov	r1, r0
 800f60c:	4632      	mov	r2, r6
 800f60e:	4640      	mov	r0, r8
 800f610:	f7fe fb7f 	bl	800dd12 <memcpy>
 800f614:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800f618:	f8c4 8000 	str.w	r8, [r4]
 800f61c:	e7e9      	b.n	800f5f2 <__submore+0x48>

0800f61e <_raise_r>:
 800f61e:	291f      	cmp	r1, #31
 800f620:	b538      	push	{r3, r4, r5, lr}
 800f622:	4605      	mov	r5, r0
 800f624:	460c      	mov	r4, r1
 800f626:	d904      	bls.n	800f632 <_raise_r+0x14>
 800f628:	2316      	movs	r3, #22
 800f62a:	6003      	str	r3, [r0, #0]
 800f62c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f630:	bd38      	pop	{r3, r4, r5, pc}
 800f632:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f634:	b112      	cbz	r2, 800f63c <_raise_r+0x1e>
 800f636:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f63a:	b94b      	cbnz	r3, 800f650 <_raise_r+0x32>
 800f63c:	4628      	mov	r0, r5
 800f63e:	f000 f831 	bl	800f6a4 <_getpid_r>
 800f642:	4622      	mov	r2, r4
 800f644:	4601      	mov	r1, r0
 800f646:	4628      	mov	r0, r5
 800f648:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f64c:	f000 b818 	b.w	800f680 <_kill_r>
 800f650:	2b01      	cmp	r3, #1
 800f652:	d00a      	beq.n	800f66a <_raise_r+0x4c>
 800f654:	1c59      	adds	r1, r3, #1
 800f656:	d103      	bne.n	800f660 <_raise_r+0x42>
 800f658:	2316      	movs	r3, #22
 800f65a:	6003      	str	r3, [r0, #0]
 800f65c:	2001      	movs	r0, #1
 800f65e:	e7e7      	b.n	800f630 <_raise_r+0x12>
 800f660:	2100      	movs	r1, #0
 800f662:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f666:	4620      	mov	r0, r4
 800f668:	4798      	blx	r3
 800f66a:	2000      	movs	r0, #0
 800f66c:	e7e0      	b.n	800f630 <_raise_r+0x12>
	...

0800f670 <raise>:
 800f670:	4b02      	ldr	r3, [pc, #8]	@ (800f67c <raise+0xc>)
 800f672:	4601      	mov	r1, r0
 800f674:	6818      	ldr	r0, [r3, #0]
 800f676:	f7ff bfd2 	b.w	800f61e <_raise_r>
 800f67a:	bf00      	nop
 800f67c:	20000064 	.word	0x20000064

0800f680 <_kill_r>:
 800f680:	b538      	push	{r3, r4, r5, lr}
 800f682:	4d07      	ldr	r5, [pc, #28]	@ (800f6a0 <_kill_r+0x20>)
 800f684:	2300      	movs	r3, #0
 800f686:	4604      	mov	r4, r0
 800f688:	4608      	mov	r0, r1
 800f68a:	4611      	mov	r1, r2
 800f68c:	602b      	str	r3, [r5, #0]
 800f68e:	f7f6 faf1 	bl	8005c74 <_kill>
 800f692:	1c43      	adds	r3, r0, #1
 800f694:	d102      	bne.n	800f69c <_kill_r+0x1c>
 800f696:	682b      	ldr	r3, [r5, #0]
 800f698:	b103      	cbz	r3, 800f69c <_kill_r+0x1c>
 800f69a:	6023      	str	r3, [r4, #0]
 800f69c:	bd38      	pop	{r3, r4, r5, pc}
 800f69e:	bf00      	nop
 800f6a0:	200050e8 	.word	0x200050e8

0800f6a4 <_getpid_r>:
 800f6a4:	f7f6 bade 	b.w	8005c64 <_getpid>

0800f6a8 <pow>:
 800f6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6aa:	ed2d 8b02 	vpush	{d8}
 800f6ae:	eeb0 8a40 	vmov.f32	s16, s0
 800f6b2:	eef0 8a60 	vmov.f32	s17, s1
 800f6b6:	ec55 4b11 	vmov	r4, r5, d1
 800f6ba:	f000 f8ed 	bl	800f898 <__ieee754_pow>
 800f6be:	4622      	mov	r2, r4
 800f6c0:	462b      	mov	r3, r5
 800f6c2:	4620      	mov	r0, r4
 800f6c4:	4629      	mov	r1, r5
 800f6c6:	ec57 6b10 	vmov	r6, r7, d0
 800f6ca:	f7f1 fa3f 	bl	8000b4c <__aeabi_dcmpun>
 800f6ce:	2800      	cmp	r0, #0
 800f6d0:	d13b      	bne.n	800f74a <pow+0xa2>
 800f6d2:	ec51 0b18 	vmov	r0, r1, d8
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	2300      	movs	r3, #0
 800f6da:	f7f1 fa05 	bl	8000ae8 <__aeabi_dcmpeq>
 800f6de:	b1b8      	cbz	r0, 800f710 <pow+0x68>
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	4620      	mov	r0, r4
 800f6e6:	4629      	mov	r1, r5
 800f6e8:	f7f1 f9fe 	bl	8000ae8 <__aeabi_dcmpeq>
 800f6ec:	2800      	cmp	r0, #0
 800f6ee:	d146      	bne.n	800f77e <pow+0xd6>
 800f6f0:	ec45 4b10 	vmov	d0, r4, r5
 800f6f4:	f000 f848 	bl	800f788 <finite>
 800f6f8:	b338      	cbz	r0, 800f74a <pow+0xa2>
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	4620      	mov	r0, r4
 800f700:	4629      	mov	r1, r5
 800f702:	f7f1 f9fb 	bl	8000afc <__aeabi_dcmplt>
 800f706:	b300      	cbz	r0, 800f74a <pow+0xa2>
 800f708:	f7fe fad4 	bl	800dcb4 <__errno>
 800f70c:	2322      	movs	r3, #34	@ 0x22
 800f70e:	e01b      	b.n	800f748 <pow+0xa0>
 800f710:	ec47 6b10 	vmov	d0, r6, r7
 800f714:	f000 f838 	bl	800f788 <finite>
 800f718:	b9e0      	cbnz	r0, 800f754 <pow+0xac>
 800f71a:	eeb0 0a48 	vmov.f32	s0, s16
 800f71e:	eef0 0a68 	vmov.f32	s1, s17
 800f722:	f000 f831 	bl	800f788 <finite>
 800f726:	b1a8      	cbz	r0, 800f754 <pow+0xac>
 800f728:	ec45 4b10 	vmov	d0, r4, r5
 800f72c:	f000 f82c 	bl	800f788 <finite>
 800f730:	b180      	cbz	r0, 800f754 <pow+0xac>
 800f732:	4632      	mov	r2, r6
 800f734:	463b      	mov	r3, r7
 800f736:	4630      	mov	r0, r6
 800f738:	4639      	mov	r1, r7
 800f73a:	f7f1 fa07 	bl	8000b4c <__aeabi_dcmpun>
 800f73e:	2800      	cmp	r0, #0
 800f740:	d0e2      	beq.n	800f708 <pow+0x60>
 800f742:	f7fe fab7 	bl	800dcb4 <__errno>
 800f746:	2321      	movs	r3, #33	@ 0x21
 800f748:	6003      	str	r3, [r0, #0]
 800f74a:	ecbd 8b02 	vpop	{d8}
 800f74e:	ec47 6b10 	vmov	d0, r6, r7
 800f752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f754:	2200      	movs	r2, #0
 800f756:	2300      	movs	r3, #0
 800f758:	4630      	mov	r0, r6
 800f75a:	4639      	mov	r1, r7
 800f75c:	f7f1 f9c4 	bl	8000ae8 <__aeabi_dcmpeq>
 800f760:	2800      	cmp	r0, #0
 800f762:	d0f2      	beq.n	800f74a <pow+0xa2>
 800f764:	eeb0 0a48 	vmov.f32	s0, s16
 800f768:	eef0 0a68 	vmov.f32	s1, s17
 800f76c:	f000 f80c 	bl	800f788 <finite>
 800f770:	2800      	cmp	r0, #0
 800f772:	d0ea      	beq.n	800f74a <pow+0xa2>
 800f774:	ec45 4b10 	vmov	d0, r4, r5
 800f778:	f000 f806 	bl	800f788 <finite>
 800f77c:	e7c3      	b.n	800f706 <pow+0x5e>
 800f77e:	4f01      	ldr	r7, [pc, #4]	@ (800f784 <pow+0xdc>)
 800f780:	2600      	movs	r6, #0
 800f782:	e7e2      	b.n	800f74a <pow+0xa2>
 800f784:	3ff00000 	.word	0x3ff00000

0800f788 <finite>:
 800f788:	b082      	sub	sp, #8
 800f78a:	ed8d 0b00 	vstr	d0, [sp]
 800f78e:	9801      	ldr	r0, [sp, #4]
 800f790:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800f794:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800f798:	0fc0      	lsrs	r0, r0, #31
 800f79a:	b002      	add	sp, #8
 800f79c:	4770      	bx	lr
	...

0800f7a0 <floor>:
 800f7a0:	ec51 0b10 	vmov	r0, r1, d0
 800f7a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7ac:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800f7b0:	2e13      	cmp	r6, #19
 800f7b2:	460c      	mov	r4, r1
 800f7b4:	4605      	mov	r5, r0
 800f7b6:	4680      	mov	r8, r0
 800f7b8:	dc34      	bgt.n	800f824 <floor+0x84>
 800f7ba:	2e00      	cmp	r6, #0
 800f7bc:	da17      	bge.n	800f7ee <floor+0x4e>
 800f7be:	a332      	add	r3, pc, #200	@ (adr r3, 800f888 <floor+0xe8>)
 800f7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7c4:	f7f0 fd72 	bl	80002ac <__adddf3>
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	f7f1 f9b4 	bl	8000b38 <__aeabi_dcmpgt>
 800f7d0:	b150      	cbz	r0, 800f7e8 <floor+0x48>
 800f7d2:	2c00      	cmp	r4, #0
 800f7d4:	da55      	bge.n	800f882 <floor+0xe2>
 800f7d6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800f7da:	432c      	orrs	r4, r5
 800f7dc:	2500      	movs	r5, #0
 800f7de:	42ac      	cmp	r4, r5
 800f7e0:	4c2b      	ldr	r4, [pc, #172]	@ (800f890 <floor+0xf0>)
 800f7e2:	bf08      	it	eq
 800f7e4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800f7e8:	4621      	mov	r1, r4
 800f7ea:	4628      	mov	r0, r5
 800f7ec:	e023      	b.n	800f836 <floor+0x96>
 800f7ee:	4f29      	ldr	r7, [pc, #164]	@ (800f894 <floor+0xf4>)
 800f7f0:	4137      	asrs	r7, r6
 800f7f2:	ea01 0307 	and.w	r3, r1, r7
 800f7f6:	4303      	orrs	r3, r0
 800f7f8:	d01d      	beq.n	800f836 <floor+0x96>
 800f7fa:	a323      	add	r3, pc, #140	@ (adr r3, 800f888 <floor+0xe8>)
 800f7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f800:	f7f0 fd54 	bl	80002ac <__adddf3>
 800f804:	2200      	movs	r2, #0
 800f806:	2300      	movs	r3, #0
 800f808:	f7f1 f996 	bl	8000b38 <__aeabi_dcmpgt>
 800f80c:	2800      	cmp	r0, #0
 800f80e:	d0eb      	beq.n	800f7e8 <floor+0x48>
 800f810:	2c00      	cmp	r4, #0
 800f812:	bfbe      	ittt	lt
 800f814:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800f818:	4133      	asrlt	r3, r6
 800f81a:	18e4      	addlt	r4, r4, r3
 800f81c:	ea24 0407 	bic.w	r4, r4, r7
 800f820:	2500      	movs	r5, #0
 800f822:	e7e1      	b.n	800f7e8 <floor+0x48>
 800f824:	2e33      	cmp	r6, #51	@ 0x33
 800f826:	dd0a      	ble.n	800f83e <floor+0x9e>
 800f828:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800f82c:	d103      	bne.n	800f836 <floor+0x96>
 800f82e:	4602      	mov	r2, r0
 800f830:	460b      	mov	r3, r1
 800f832:	f7f0 fd3b 	bl	80002ac <__adddf3>
 800f836:	ec41 0b10 	vmov	d0, r0, r1
 800f83a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f83e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800f842:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800f846:	40df      	lsrs	r7, r3
 800f848:	4207      	tst	r7, r0
 800f84a:	d0f4      	beq.n	800f836 <floor+0x96>
 800f84c:	a30e      	add	r3, pc, #56	@ (adr r3, 800f888 <floor+0xe8>)
 800f84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f852:	f7f0 fd2b 	bl	80002ac <__adddf3>
 800f856:	2200      	movs	r2, #0
 800f858:	2300      	movs	r3, #0
 800f85a:	f7f1 f96d 	bl	8000b38 <__aeabi_dcmpgt>
 800f85e:	2800      	cmp	r0, #0
 800f860:	d0c2      	beq.n	800f7e8 <floor+0x48>
 800f862:	2c00      	cmp	r4, #0
 800f864:	da0a      	bge.n	800f87c <floor+0xdc>
 800f866:	2e14      	cmp	r6, #20
 800f868:	d101      	bne.n	800f86e <floor+0xce>
 800f86a:	3401      	adds	r4, #1
 800f86c:	e006      	b.n	800f87c <floor+0xdc>
 800f86e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800f872:	2301      	movs	r3, #1
 800f874:	40b3      	lsls	r3, r6
 800f876:	441d      	add	r5, r3
 800f878:	4545      	cmp	r5, r8
 800f87a:	d3f6      	bcc.n	800f86a <floor+0xca>
 800f87c:	ea25 0507 	bic.w	r5, r5, r7
 800f880:	e7b2      	b.n	800f7e8 <floor+0x48>
 800f882:	2500      	movs	r5, #0
 800f884:	462c      	mov	r4, r5
 800f886:	e7af      	b.n	800f7e8 <floor+0x48>
 800f888:	8800759c 	.word	0x8800759c
 800f88c:	7e37e43c 	.word	0x7e37e43c
 800f890:	bff00000 	.word	0xbff00000
 800f894:	000fffff 	.word	0x000fffff

0800f898 <__ieee754_pow>:
 800f898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f89c:	b091      	sub	sp, #68	@ 0x44
 800f89e:	ed8d 1b00 	vstr	d1, [sp]
 800f8a2:	e9dd 1900 	ldrd	r1, r9, [sp]
 800f8a6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800f8aa:	ea5a 0001 	orrs.w	r0, sl, r1
 800f8ae:	ec57 6b10 	vmov	r6, r7, d0
 800f8b2:	d113      	bne.n	800f8dc <__ieee754_pow+0x44>
 800f8b4:	19b3      	adds	r3, r6, r6
 800f8b6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800f8ba:	4152      	adcs	r2, r2
 800f8bc:	4298      	cmp	r0, r3
 800f8be:	4b98      	ldr	r3, [pc, #608]	@ (800fb20 <__ieee754_pow+0x288>)
 800f8c0:	4193      	sbcs	r3, r2
 800f8c2:	f080 84ea 	bcs.w	801029a <__ieee754_pow+0xa02>
 800f8c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f8ca:	4630      	mov	r0, r6
 800f8cc:	4639      	mov	r1, r7
 800f8ce:	f7f0 fced 	bl	80002ac <__adddf3>
 800f8d2:	ec41 0b10 	vmov	d0, r0, r1
 800f8d6:	b011      	add	sp, #68	@ 0x44
 800f8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8dc:	4a91      	ldr	r2, [pc, #580]	@ (800fb24 <__ieee754_pow+0x28c>)
 800f8de:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f8e2:	4590      	cmp	r8, r2
 800f8e4:	463d      	mov	r5, r7
 800f8e6:	4633      	mov	r3, r6
 800f8e8:	d806      	bhi.n	800f8f8 <__ieee754_pow+0x60>
 800f8ea:	d101      	bne.n	800f8f0 <__ieee754_pow+0x58>
 800f8ec:	2e00      	cmp	r6, #0
 800f8ee:	d1ea      	bne.n	800f8c6 <__ieee754_pow+0x2e>
 800f8f0:	4592      	cmp	sl, r2
 800f8f2:	d801      	bhi.n	800f8f8 <__ieee754_pow+0x60>
 800f8f4:	d10e      	bne.n	800f914 <__ieee754_pow+0x7c>
 800f8f6:	b169      	cbz	r1, 800f914 <__ieee754_pow+0x7c>
 800f8f8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800f8fc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800f900:	431d      	orrs	r5, r3
 800f902:	d1e0      	bne.n	800f8c6 <__ieee754_pow+0x2e>
 800f904:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f908:	18db      	adds	r3, r3, r3
 800f90a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800f90e:	4152      	adcs	r2, r2
 800f910:	429d      	cmp	r5, r3
 800f912:	e7d4      	b.n	800f8be <__ieee754_pow+0x26>
 800f914:	2d00      	cmp	r5, #0
 800f916:	46c3      	mov	fp, r8
 800f918:	da3a      	bge.n	800f990 <__ieee754_pow+0xf8>
 800f91a:	4a83      	ldr	r2, [pc, #524]	@ (800fb28 <__ieee754_pow+0x290>)
 800f91c:	4592      	cmp	sl, r2
 800f91e:	d84d      	bhi.n	800f9bc <__ieee754_pow+0x124>
 800f920:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800f924:	4592      	cmp	sl, r2
 800f926:	f240 84c7 	bls.w	80102b8 <__ieee754_pow+0xa20>
 800f92a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800f92e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800f932:	2a14      	cmp	r2, #20
 800f934:	dd0f      	ble.n	800f956 <__ieee754_pow+0xbe>
 800f936:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800f93a:	fa21 f402 	lsr.w	r4, r1, r2
 800f93e:	fa04 f202 	lsl.w	r2, r4, r2
 800f942:	428a      	cmp	r2, r1
 800f944:	f040 84b8 	bne.w	80102b8 <__ieee754_pow+0xa20>
 800f948:	f004 0401 	and.w	r4, r4, #1
 800f94c:	f1c4 0402 	rsb	r4, r4, #2
 800f950:	2900      	cmp	r1, #0
 800f952:	d158      	bne.n	800fa06 <__ieee754_pow+0x16e>
 800f954:	e00e      	b.n	800f974 <__ieee754_pow+0xdc>
 800f956:	2900      	cmp	r1, #0
 800f958:	d154      	bne.n	800fa04 <__ieee754_pow+0x16c>
 800f95a:	f1c2 0214 	rsb	r2, r2, #20
 800f95e:	fa4a f402 	asr.w	r4, sl, r2
 800f962:	fa04 f202 	lsl.w	r2, r4, r2
 800f966:	4552      	cmp	r2, sl
 800f968:	f040 84a3 	bne.w	80102b2 <__ieee754_pow+0xa1a>
 800f96c:	f004 0401 	and.w	r4, r4, #1
 800f970:	f1c4 0402 	rsb	r4, r4, #2
 800f974:	4a6d      	ldr	r2, [pc, #436]	@ (800fb2c <__ieee754_pow+0x294>)
 800f976:	4592      	cmp	sl, r2
 800f978:	d12e      	bne.n	800f9d8 <__ieee754_pow+0x140>
 800f97a:	f1b9 0f00 	cmp.w	r9, #0
 800f97e:	f280 8494 	bge.w	80102aa <__ieee754_pow+0xa12>
 800f982:	496a      	ldr	r1, [pc, #424]	@ (800fb2c <__ieee754_pow+0x294>)
 800f984:	4632      	mov	r2, r6
 800f986:	463b      	mov	r3, r7
 800f988:	2000      	movs	r0, #0
 800f98a:	f7f0 ff6f 	bl	800086c <__aeabi_ddiv>
 800f98e:	e7a0      	b.n	800f8d2 <__ieee754_pow+0x3a>
 800f990:	2400      	movs	r4, #0
 800f992:	bbc1      	cbnz	r1, 800fa06 <__ieee754_pow+0x16e>
 800f994:	4a63      	ldr	r2, [pc, #396]	@ (800fb24 <__ieee754_pow+0x28c>)
 800f996:	4592      	cmp	sl, r2
 800f998:	d1ec      	bne.n	800f974 <__ieee754_pow+0xdc>
 800f99a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800f99e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800f9a2:	431a      	orrs	r2, r3
 800f9a4:	f000 8479 	beq.w	801029a <__ieee754_pow+0xa02>
 800f9a8:	4b61      	ldr	r3, [pc, #388]	@ (800fb30 <__ieee754_pow+0x298>)
 800f9aa:	4598      	cmp	r8, r3
 800f9ac:	d908      	bls.n	800f9c0 <__ieee754_pow+0x128>
 800f9ae:	f1b9 0f00 	cmp.w	r9, #0
 800f9b2:	f2c0 8476 	blt.w	80102a2 <__ieee754_pow+0xa0a>
 800f9b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f9ba:	e78a      	b.n	800f8d2 <__ieee754_pow+0x3a>
 800f9bc:	2402      	movs	r4, #2
 800f9be:	e7e8      	b.n	800f992 <__ieee754_pow+0xfa>
 800f9c0:	f1b9 0f00 	cmp.w	r9, #0
 800f9c4:	f04f 0000 	mov.w	r0, #0
 800f9c8:	f04f 0100 	mov.w	r1, #0
 800f9cc:	da81      	bge.n	800f8d2 <__ieee754_pow+0x3a>
 800f9ce:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f9d2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f9d6:	e77c      	b.n	800f8d2 <__ieee754_pow+0x3a>
 800f9d8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800f9dc:	d106      	bne.n	800f9ec <__ieee754_pow+0x154>
 800f9de:	4632      	mov	r2, r6
 800f9e0:	463b      	mov	r3, r7
 800f9e2:	4630      	mov	r0, r6
 800f9e4:	4639      	mov	r1, r7
 800f9e6:	f7f0 fe17 	bl	8000618 <__aeabi_dmul>
 800f9ea:	e772      	b.n	800f8d2 <__ieee754_pow+0x3a>
 800f9ec:	4a51      	ldr	r2, [pc, #324]	@ (800fb34 <__ieee754_pow+0x29c>)
 800f9ee:	4591      	cmp	r9, r2
 800f9f0:	d109      	bne.n	800fa06 <__ieee754_pow+0x16e>
 800f9f2:	2d00      	cmp	r5, #0
 800f9f4:	db07      	blt.n	800fa06 <__ieee754_pow+0x16e>
 800f9f6:	ec47 6b10 	vmov	d0, r6, r7
 800f9fa:	b011      	add	sp, #68	@ 0x44
 800f9fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa00:	f000 bd50 	b.w	80104a4 <__ieee754_sqrt>
 800fa04:	2400      	movs	r4, #0
 800fa06:	ec47 6b10 	vmov	d0, r6, r7
 800fa0a:	9302      	str	r3, [sp, #8]
 800fa0c:	f000 fcc4 	bl	8010398 <fabs>
 800fa10:	9b02      	ldr	r3, [sp, #8]
 800fa12:	ec51 0b10 	vmov	r0, r1, d0
 800fa16:	bb53      	cbnz	r3, 800fa6e <__ieee754_pow+0x1d6>
 800fa18:	4b44      	ldr	r3, [pc, #272]	@ (800fb2c <__ieee754_pow+0x294>)
 800fa1a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800fa1e:	429a      	cmp	r2, r3
 800fa20:	d002      	beq.n	800fa28 <__ieee754_pow+0x190>
 800fa22:	f1b8 0f00 	cmp.w	r8, #0
 800fa26:	d122      	bne.n	800fa6e <__ieee754_pow+0x1d6>
 800fa28:	f1b9 0f00 	cmp.w	r9, #0
 800fa2c:	da05      	bge.n	800fa3a <__ieee754_pow+0x1a2>
 800fa2e:	4602      	mov	r2, r0
 800fa30:	460b      	mov	r3, r1
 800fa32:	2000      	movs	r0, #0
 800fa34:	493d      	ldr	r1, [pc, #244]	@ (800fb2c <__ieee754_pow+0x294>)
 800fa36:	f7f0 ff19 	bl	800086c <__aeabi_ddiv>
 800fa3a:	2d00      	cmp	r5, #0
 800fa3c:	f6bf af49 	bge.w	800f8d2 <__ieee754_pow+0x3a>
 800fa40:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800fa44:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800fa48:	ea58 0804 	orrs.w	r8, r8, r4
 800fa4c:	d108      	bne.n	800fa60 <__ieee754_pow+0x1c8>
 800fa4e:	4602      	mov	r2, r0
 800fa50:	460b      	mov	r3, r1
 800fa52:	4610      	mov	r0, r2
 800fa54:	4619      	mov	r1, r3
 800fa56:	f7f0 fc27 	bl	80002a8 <__aeabi_dsub>
 800fa5a:	4602      	mov	r2, r0
 800fa5c:	460b      	mov	r3, r1
 800fa5e:	e794      	b.n	800f98a <__ieee754_pow+0xf2>
 800fa60:	2c01      	cmp	r4, #1
 800fa62:	f47f af36 	bne.w	800f8d2 <__ieee754_pow+0x3a>
 800fa66:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fa6a:	4619      	mov	r1, r3
 800fa6c:	e731      	b.n	800f8d2 <__ieee754_pow+0x3a>
 800fa6e:	0feb      	lsrs	r3, r5, #31
 800fa70:	3b01      	subs	r3, #1
 800fa72:	ea53 0204 	orrs.w	r2, r3, r4
 800fa76:	d102      	bne.n	800fa7e <__ieee754_pow+0x1e6>
 800fa78:	4632      	mov	r2, r6
 800fa7a:	463b      	mov	r3, r7
 800fa7c:	e7e9      	b.n	800fa52 <__ieee754_pow+0x1ba>
 800fa7e:	3c01      	subs	r4, #1
 800fa80:	431c      	orrs	r4, r3
 800fa82:	d016      	beq.n	800fab2 <__ieee754_pow+0x21a>
 800fa84:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800fb10 <__ieee754_pow+0x278>
 800fa88:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800fa8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fa90:	f240 8112 	bls.w	800fcb8 <__ieee754_pow+0x420>
 800fa94:	4b28      	ldr	r3, [pc, #160]	@ (800fb38 <__ieee754_pow+0x2a0>)
 800fa96:	459a      	cmp	sl, r3
 800fa98:	4b25      	ldr	r3, [pc, #148]	@ (800fb30 <__ieee754_pow+0x298>)
 800fa9a:	d916      	bls.n	800faca <__ieee754_pow+0x232>
 800fa9c:	4598      	cmp	r8, r3
 800fa9e:	d80b      	bhi.n	800fab8 <__ieee754_pow+0x220>
 800faa0:	f1b9 0f00 	cmp.w	r9, #0
 800faa4:	da0b      	bge.n	800fabe <__ieee754_pow+0x226>
 800faa6:	2000      	movs	r0, #0
 800faa8:	b011      	add	sp, #68	@ 0x44
 800faaa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faae:	f000 bc6b 	b.w	8010388 <__math_oflow>
 800fab2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800fb18 <__ieee754_pow+0x280>
 800fab6:	e7e7      	b.n	800fa88 <__ieee754_pow+0x1f0>
 800fab8:	f1b9 0f00 	cmp.w	r9, #0
 800fabc:	dcf3      	bgt.n	800faa6 <__ieee754_pow+0x20e>
 800fabe:	2000      	movs	r0, #0
 800fac0:	b011      	add	sp, #68	@ 0x44
 800fac2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fac6:	f000 bc57 	b.w	8010378 <__math_uflow>
 800faca:	4598      	cmp	r8, r3
 800facc:	d20c      	bcs.n	800fae8 <__ieee754_pow+0x250>
 800face:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fad2:	2200      	movs	r2, #0
 800fad4:	2300      	movs	r3, #0
 800fad6:	f7f1 f811 	bl	8000afc <__aeabi_dcmplt>
 800fada:	3800      	subs	r0, #0
 800fadc:	bf18      	it	ne
 800fade:	2001      	movne	r0, #1
 800fae0:	f1b9 0f00 	cmp.w	r9, #0
 800fae4:	daec      	bge.n	800fac0 <__ieee754_pow+0x228>
 800fae6:	e7df      	b.n	800faa8 <__ieee754_pow+0x210>
 800fae8:	4b10      	ldr	r3, [pc, #64]	@ (800fb2c <__ieee754_pow+0x294>)
 800faea:	4598      	cmp	r8, r3
 800faec:	f04f 0200 	mov.w	r2, #0
 800faf0:	d924      	bls.n	800fb3c <__ieee754_pow+0x2a4>
 800faf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800faf6:	2300      	movs	r3, #0
 800faf8:	f7f1 f800 	bl	8000afc <__aeabi_dcmplt>
 800fafc:	3800      	subs	r0, #0
 800fafe:	bf18      	it	ne
 800fb00:	2001      	movne	r0, #1
 800fb02:	f1b9 0f00 	cmp.w	r9, #0
 800fb06:	dccf      	bgt.n	800faa8 <__ieee754_pow+0x210>
 800fb08:	e7da      	b.n	800fac0 <__ieee754_pow+0x228>
 800fb0a:	bf00      	nop
 800fb0c:	f3af 8000 	nop.w
 800fb10:	00000000 	.word	0x00000000
 800fb14:	3ff00000 	.word	0x3ff00000
 800fb18:	00000000 	.word	0x00000000
 800fb1c:	bff00000 	.word	0xbff00000
 800fb20:	fff00000 	.word	0xfff00000
 800fb24:	7ff00000 	.word	0x7ff00000
 800fb28:	433fffff 	.word	0x433fffff
 800fb2c:	3ff00000 	.word	0x3ff00000
 800fb30:	3fefffff 	.word	0x3fefffff
 800fb34:	3fe00000 	.word	0x3fe00000
 800fb38:	43f00000 	.word	0x43f00000
 800fb3c:	4b5a      	ldr	r3, [pc, #360]	@ (800fca8 <__ieee754_pow+0x410>)
 800fb3e:	f7f0 fbb3 	bl	80002a8 <__aeabi_dsub>
 800fb42:	a351      	add	r3, pc, #324	@ (adr r3, 800fc88 <__ieee754_pow+0x3f0>)
 800fb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb48:	4604      	mov	r4, r0
 800fb4a:	460d      	mov	r5, r1
 800fb4c:	f7f0 fd64 	bl	8000618 <__aeabi_dmul>
 800fb50:	a34f      	add	r3, pc, #316	@ (adr r3, 800fc90 <__ieee754_pow+0x3f8>)
 800fb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb56:	4606      	mov	r6, r0
 800fb58:	460f      	mov	r7, r1
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	4629      	mov	r1, r5
 800fb5e:	f7f0 fd5b 	bl	8000618 <__aeabi_dmul>
 800fb62:	4b52      	ldr	r3, [pc, #328]	@ (800fcac <__ieee754_pow+0x414>)
 800fb64:	4682      	mov	sl, r0
 800fb66:	468b      	mov	fp, r1
 800fb68:	2200      	movs	r2, #0
 800fb6a:	4620      	mov	r0, r4
 800fb6c:	4629      	mov	r1, r5
 800fb6e:	f7f0 fd53 	bl	8000618 <__aeabi_dmul>
 800fb72:	4602      	mov	r2, r0
 800fb74:	460b      	mov	r3, r1
 800fb76:	a148      	add	r1, pc, #288	@ (adr r1, 800fc98 <__ieee754_pow+0x400>)
 800fb78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb7c:	f7f0 fb94 	bl	80002a8 <__aeabi_dsub>
 800fb80:	4622      	mov	r2, r4
 800fb82:	462b      	mov	r3, r5
 800fb84:	f7f0 fd48 	bl	8000618 <__aeabi_dmul>
 800fb88:	4602      	mov	r2, r0
 800fb8a:	460b      	mov	r3, r1
 800fb8c:	2000      	movs	r0, #0
 800fb8e:	4948      	ldr	r1, [pc, #288]	@ (800fcb0 <__ieee754_pow+0x418>)
 800fb90:	f7f0 fb8a 	bl	80002a8 <__aeabi_dsub>
 800fb94:	4622      	mov	r2, r4
 800fb96:	4680      	mov	r8, r0
 800fb98:	4689      	mov	r9, r1
 800fb9a:	462b      	mov	r3, r5
 800fb9c:	4620      	mov	r0, r4
 800fb9e:	4629      	mov	r1, r5
 800fba0:	f7f0 fd3a 	bl	8000618 <__aeabi_dmul>
 800fba4:	4602      	mov	r2, r0
 800fba6:	460b      	mov	r3, r1
 800fba8:	4640      	mov	r0, r8
 800fbaa:	4649      	mov	r1, r9
 800fbac:	f7f0 fd34 	bl	8000618 <__aeabi_dmul>
 800fbb0:	a33b      	add	r3, pc, #236	@ (adr r3, 800fca0 <__ieee754_pow+0x408>)
 800fbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbb6:	f7f0 fd2f 	bl	8000618 <__aeabi_dmul>
 800fbba:	4602      	mov	r2, r0
 800fbbc:	460b      	mov	r3, r1
 800fbbe:	4650      	mov	r0, sl
 800fbc0:	4659      	mov	r1, fp
 800fbc2:	f7f0 fb71 	bl	80002a8 <__aeabi_dsub>
 800fbc6:	4602      	mov	r2, r0
 800fbc8:	460b      	mov	r3, r1
 800fbca:	4680      	mov	r8, r0
 800fbcc:	4689      	mov	r9, r1
 800fbce:	4630      	mov	r0, r6
 800fbd0:	4639      	mov	r1, r7
 800fbd2:	f7f0 fb6b 	bl	80002ac <__adddf3>
 800fbd6:	2400      	movs	r4, #0
 800fbd8:	4632      	mov	r2, r6
 800fbda:	463b      	mov	r3, r7
 800fbdc:	4620      	mov	r0, r4
 800fbde:	460d      	mov	r5, r1
 800fbe0:	f7f0 fb62 	bl	80002a8 <__aeabi_dsub>
 800fbe4:	4602      	mov	r2, r0
 800fbe6:	460b      	mov	r3, r1
 800fbe8:	4640      	mov	r0, r8
 800fbea:	4649      	mov	r1, r9
 800fbec:	f7f0 fb5c 	bl	80002a8 <__aeabi_dsub>
 800fbf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fbf4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	9304      	str	r3, [sp, #16]
 800fbfc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800fc00:	4606      	mov	r6, r0
 800fc02:	460f      	mov	r7, r1
 800fc04:	4652      	mov	r2, sl
 800fc06:	465b      	mov	r3, fp
 800fc08:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc0c:	f7f0 fb4c 	bl	80002a8 <__aeabi_dsub>
 800fc10:	4622      	mov	r2, r4
 800fc12:	462b      	mov	r3, r5
 800fc14:	f7f0 fd00 	bl	8000618 <__aeabi_dmul>
 800fc18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc1c:	4680      	mov	r8, r0
 800fc1e:	4689      	mov	r9, r1
 800fc20:	4630      	mov	r0, r6
 800fc22:	4639      	mov	r1, r7
 800fc24:	f7f0 fcf8 	bl	8000618 <__aeabi_dmul>
 800fc28:	4602      	mov	r2, r0
 800fc2a:	460b      	mov	r3, r1
 800fc2c:	4640      	mov	r0, r8
 800fc2e:	4649      	mov	r1, r9
 800fc30:	f7f0 fb3c 	bl	80002ac <__adddf3>
 800fc34:	4652      	mov	r2, sl
 800fc36:	465b      	mov	r3, fp
 800fc38:	4606      	mov	r6, r0
 800fc3a:	460f      	mov	r7, r1
 800fc3c:	4620      	mov	r0, r4
 800fc3e:	4629      	mov	r1, r5
 800fc40:	f7f0 fcea 	bl	8000618 <__aeabi_dmul>
 800fc44:	460b      	mov	r3, r1
 800fc46:	4602      	mov	r2, r0
 800fc48:	4680      	mov	r8, r0
 800fc4a:	4689      	mov	r9, r1
 800fc4c:	4630      	mov	r0, r6
 800fc4e:	4639      	mov	r1, r7
 800fc50:	f7f0 fb2c 	bl	80002ac <__adddf3>
 800fc54:	4b17      	ldr	r3, [pc, #92]	@ (800fcb4 <__ieee754_pow+0x41c>)
 800fc56:	4299      	cmp	r1, r3
 800fc58:	4604      	mov	r4, r0
 800fc5a:	460d      	mov	r5, r1
 800fc5c:	468a      	mov	sl, r1
 800fc5e:	468b      	mov	fp, r1
 800fc60:	f340 82ef 	ble.w	8010242 <__ieee754_pow+0x9aa>
 800fc64:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800fc68:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800fc6c:	4303      	orrs	r3, r0
 800fc6e:	f000 81e8 	beq.w	8010042 <__ieee754_pow+0x7aa>
 800fc72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc76:	2200      	movs	r2, #0
 800fc78:	2300      	movs	r3, #0
 800fc7a:	f7f0 ff3f 	bl	8000afc <__aeabi_dcmplt>
 800fc7e:	3800      	subs	r0, #0
 800fc80:	bf18      	it	ne
 800fc82:	2001      	movne	r0, #1
 800fc84:	e710      	b.n	800faa8 <__ieee754_pow+0x210>
 800fc86:	bf00      	nop
 800fc88:	60000000 	.word	0x60000000
 800fc8c:	3ff71547 	.word	0x3ff71547
 800fc90:	f85ddf44 	.word	0xf85ddf44
 800fc94:	3e54ae0b 	.word	0x3e54ae0b
 800fc98:	55555555 	.word	0x55555555
 800fc9c:	3fd55555 	.word	0x3fd55555
 800fca0:	652b82fe 	.word	0x652b82fe
 800fca4:	3ff71547 	.word	0x3ff71547
 800fca8:	3ff00000 	.word	0x3ff00000
 800fcac:	3fd00000 	.word	0x3fd00000
 800fcb0:	3fe00000 	.word	0x3fe00000
 800fcb4:	408fffff 	.word	0x408fffff
 800fcb8:	4bd5      	ldr	r3, [pc, #852]	@ (8010010 <__ieee754_pow+0x778>)
 800fcba:	402b      	ands	r3, r5
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	b92b      	cbnz	r3, 800fccc <__ieee754_pow+0x434>
 800fcc0:	4bd4      	ldr	r3, [pc, #848]	@ (8010014 <__ieee754_pow+0x77c>)
 800fcc2:	f7f0 fca9 	bl	8000618 <__aeabi_dmul>
 800fcc6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800fcca:	468b      	mov	fp, r1
 800fccc:	ea4f 532b 	mov.w	r3, fp, asr #20
 800fcd0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800fcd4:	4413      	add	r3, r2
 800fcd6:	930a      	str	r3, [sp, #40]	@ 0x28
 800fcd8:	4bcf      	ldr	r3, [pc, #828]	@ (8010018 <__ieee754_pow+0x780>)
 800fcda:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800fcde:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800fce2:	459b      	cmp	fp, r3
 800fce4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800fce8:	dd08      	ble.n	800fcfc <__ieee754_pow+0x464>
 800fcea:	4bcc      	ldr	r3, [pc, #816]	@ (801001c <__ieee754_pow+0x784>)
 800fcec:	459b      	cmp	fp, r3
 800fcee:	f340 81a5 	ble.w	801003c <__ieee754_pow+0x7a4>
 800fcf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fcf4:	3301      	adds	r3, #1
 800fcf6:	930a      	str	r3, [sp, #40]	@ 0x28
 800fcf8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800fcfc:	f04f 0a00 	mov.w	sl, #0
 800fd00:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800fd04:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fd06:	4bc6      	ldr	r3, [pc, #792]	@ (8010020 <__ieee754_pow+0x788>)
 800fd08:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fd0c:	ed93 7b00 	vldr	d7, [r3]
 800fd10:	4629      	mov	r1, r5
 800fd12:	ec53 2b17 	vmov	r2, r3, d7
 800fd16:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fd1a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fd1e:	f7f0 fac3 	bl	80002a8 <__aeabi_dsub>
 800fd22:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fd26:	4606      	mov	r6, r0
 800fd28:	460f      	mov	r7, r1
 800fd2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fd2e:	f7f0 fabd 	bl	80002ac <__adddf3>
 800fd32:	4602      	mov	r2, r0
 800fd34:	460b      	mov	r3, r1
 800fd36:	2000      	movs	r0, #0
 800fd38:	49ba      	ldr	r1, [pc, #744]	@ (8010024 <__ieee754_pow+0x78c>)
 800fd3a:	f7f0 fd97 	bl	800086c <__aeabi_ddiv>
 800fd3e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800fd42:	4602      	mov	r2, r0
 800fd44:	460b      	mov	r3, r1
 800fd46:	4630      	mov	r0, r6
 800fd48:	4639      	mov	r1, r7
 800fd4a:	f7f0 fc65 	bl	8000618 <__aeabi_dmul>
 800fd4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fd52:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800fd56:	106d      	asrs	r5, r5, #1
 800fd58:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800fd5c:	f04f 0b00 	mov.w	fp, #0
 800fd60:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800fd64:	4661      	mov	r1, ip
 800fd66:	2200      	movs	r2, #0
 800fd68:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800fd6c:	4658      	mov	r0, fp
 800fd6e:	46e1      	mov	r9, ip
 800fd70:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800fd74:	4614      	mov	r4, r2
 800fd76:	461d      	mov	r5, r3
 800fd78:	f7f0 fc4e 	bl	8000618 <__aeabi_dmul>
 800fd7c:	4602      	mov	r2, r0
 800fd7e:	460b      	mov	r3, r1
 800fd80:	4630      	mov	r0, r6
 800fd82:	4639      	mov	r1, r7
 800fd84:	f7f0 fa90 	bl	80002a8 <__aeabi_dsub>
 800fd88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fd8c:	4606      	mov	r6, r0
 800fd8e:	460f      	mov	r7, r1
 800fd90:	4620      	mov	r0, r4
 800fd92:	4629      	mov	r1, r5
 800fd94:	f7f0 fa88 	bl	80002a8 <__aeabi_dsub>
 800fd98:	4602      	mov	r2, r0
 800fd9a:	460b      	mov	r3, r1
 800fd9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fda0:	f7f0 fa82 	bl	80002a8 <__aeabi_dsub>
 800fda4:	465a      	mov	r2, fp
 800fda6:	464b      	mov	r3, r9
 800fda8:	f7f0 fc36 	bl	8000618 <__aeabi_dmul>
 800fdac:	4602      	mov	r2, r0
 800fdae:	460b      	mov	r3, r1
 800fdb0:	4630      	mov	r0, r6
 800fdb2:	4639      	mov	r1, r7
 800fdb4:	f7f0 fa78 	bl	80002a8 <__aeabi_dsub>
 800fdb8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800fdbc:	f7f0 fc2c 	bl	8000618 <__aeabi_dmul>
 800fdc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fdc4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fdc8:	4610      	mov	r0, r2
 800fdca:	4619      	mov	r1, r3
 800fdcc:	f7f0 fc24 	bl	8000618 <__aeabi_dmul>
 800fdd0:	a37d      	add	r3, pc, #500	@ (adr r3, 800ffc8 <__ieee754_pow+0x730>)
 800fdd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdd6:	4604      	mov	r4, r0
 800fdd8:	460d      	mov	r5, r1
 800fdda:	f7f0 fc1d 	bl	8000618 <__aeabi_dmul>
 800fdde:	a37c      	add	r3, pc, #496	@ (adr r3, 800ffd0 <__ieee754_pow+0x738>)
 800fde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fde4:	f7f0 fa62 	bl	80002ac <__adddf3>
 800fde8:	4622      	mov	r2, r4
 800fdea:	462b      	mov	r3, r5
 800fdec:	f7f0 fc14 	bl	8000618 <__aeabi_dmul>
 800fdf0:	a379      	add	r3, pc, #484	@ (adr r3, 800ffd8 <__ieee754_pow+0x740>)
 800fdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf6:	f7f0 fa59 	bl	80002ac <__adddf3>
 800fdfa:	4622      	mov	r2, r4
 800fdfc:	462b      	mov	r3, r5
 800fdfe:	f7f0 fc0b 	bl	8000618 <__aeabi_dmul>
 800fe02:	a377      	add	r3, pc, #476	@ (adr r3, 800ffe0 <__ieee754_pow+0x748>)
 800fe04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe08:	f7f0 fa50 	bl	80002ac <__adddf3>
 800fe0c:	4622      	mov	r2, r4
 800fe0e:	462b      	mov	r3, r5
 800fe10:	f7f0 fc02 	bl	8000618 <__aeabi_dmul>
 800fe14:	a374      	add	r3, pc, #464	@ (adr r3, 800ffe8 <__ieee754_pow+0x750>)
 800fe16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe1a:	f7f0 fa47 	bl	80002ac <__adddf3>
 800fe1e:	4622      	mov	r2, r4
 800fe20:	462b      	mov	r3, r5
 800fe22:	f7f0 fbf9 	bl	8000618 <__aeabi_dmul>
 800fe26:	a372      	add	r3, pc, #456	@ (adr r3, 800fff0 <__ieee754_pow+0x758>)
 800fe28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe2c:	f7f0 fa3e 	bl	80002ac <__adddf3>
 800fe30:	4622      	mov	r2, r4
 800fe32:	4606      	mov	r6, r0
 800fe34:	460f      	mov	r7, r1
 800fe36:	462b      	mov	r3, r5
 800fe38:	4620      	mov	r0, r4
 800fe3a:	4629      	mov	r1, r5
 800fe3c:	f7f0 fbec 	bl	8000618 <__aeabi_dmul>
 800fe40:	4602      	mov	r2, r0
 800fe42:	460b      	mov	r3, r1
 800fe44:	4630      	mov	r0, r6
 800fe46:	4639      	mov	r1, r7
 800fe48:	f7f0 fbe6 	bl	8000618 <__aeabi_dmul>
 800fe4c:	465a      	mov	r2, fp
 800fe4e:	4604      	mov	r4, r0
 800fe50:	460d      	mov	r5, r1
 800fe52:	464b      	mov	r3, r9
 800fe54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fe58:	f7f0 fa28 	bl	80002ac <__adddf3>
 800fe5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fe60:	f7f0 fbda 	bl	8000618 <__aeabi_dmul>
 800fe64:	4622      	mov	r2, r4
 800fe66:	462b      	mov	r3, r5
 800fe68:	f7f0 fa20 	bl	80002ac <__adddf3>
 800fe6c:	465a      	mov	r2, fp
 800fe6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fe72:	464b      	mov	r3, r9
 800fe74:	4658      	mov	r0, fp
 800fe76:	4649      	mov	r1, r9
 800fe78:	f7f0 fbce 	bl	8000618 <__aeabi_dmul>
 800fe7c:	4b6a      	ldr	r3, [pc, #424]	@ (8010028 <__ieee754_pow+0x790>)
 800fe7e:	2200      	movs	r2, #0
 800fe80:	4606      	mov	r6, r0
 800fe82:	460f      	mov	r7, r1
 800fe84:	f7f0 fa12 	bl	80002ac <__adddf3>
 800fe88:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fe8c:	f7f0 fa0e 	bl	80002ac <__adddf3>
 800fe90:	46d8      	mov	r8, fp
 800fe92:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800fe96:	460d      	mov	r5, r1
 800fe98:	465a      	mov	r2, fp
 800fe9a:	460b      	mov	r3, r1
 800fe9c:	4640      	mov	r0, r8
 800fe9e:	4649      	mov	r1, r9
 800fea0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800fea4:	f7f0 fbb8 	bl	8000618 <__aeabi_dmul>
 800fea8:	465c      	mov	r4, fp
 800feaa:	4680      	mov	r8, r0
 800feac:	4689      	mov	r9, r1
 800feae:	4b5e      	ldr	r3, [pc, #376]	@ (8010028 <__ieee754_pow+0x790>)
 800feb0:	2200      	movs	r2, #0
 800feb2:	4620      	mov	r0, r4
 800feb4:	4629      	mov	r1, r5
 800feb6:	f7f0 f9f7 	bl	80002a8 <__aeabi_dsub>
 800feba:	4632      	mov	r2, r6
 800febc:	463b      	mov	r3, r7
 800febe:	f7f0 f9f3 	bl	80002a8 <__aeabi_dsub>
 800fec2:	4602      	mov	r2, r0
 800fec4:	460b      	mov	r3, r1
 800fec6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800feca:	f7f0 f9ed 	bl	80002a8 <__aeabi_dsub>
 800fece:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fed2:	f7f0 fba1 	bl	8000618 <__aeabi_dmul>
 800fed6:	4622      	mov	r2, r4
 800fed8:	4606      	mov	r6, r0
 800feda:	460f      	mov	r7, r1
 800fedc:	462b      	mov	r3, r5
 800fede:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fee2:	f7f0 fb99 	bl	8000618 <__aeabi_dmul>
 800fee6:	4602      	mov	r2, r0
 800fee8:	460b      	mov	r3, r1
 800feea:	4630      	mov	r0, r6
 800feec:	4639      	mov	r1, r7
 800feee:	f7f0 f9dd 	bl	80002ac <__adddf3>
 800fef2:	4606      	mov	r6, r0
 800fef4:	460f      	mov	r7, r1
 800fef6:	4602      	mov	r2, r0
 800fef8:	460b      	mov	r3, r1
 800fefa:	4640      	mov	r0, r8
 800fefc:	4649      	mov	r1, r9
 800fefe:	f7f0 f9d5 	bl	80002ac <__adddf3>
 800ff02:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800ff06:	a33c      	add	r3, pc, #240	@ (adr r3, 800fff8 <__ieee754_pow+0x760>)
 800ff08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff0c:	4658      	mov	r0, fp
 800ff0e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800ff12:	460d      	mov	r5, r1
 800ff14:	f7f0 fb80 	bl	8000618 <__aeabi_dmul>
 800ff18:	465c      	mov	r4, fp
 800ff1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ff1e:	4642      	mov	r2, r8
 800ff20:	464b      	mov	r3, r9
 800ff22:	4620      	mov	r0, r4
 800ff24:	4629      	mov	r1, r5
 800ff26:	f7f0 f9bf 	bl	80002a8 <__aeabi_dsub>
 800ff2a:	4602      	mov	r2, r0
 800ff2c:	460b      	mov	r3, r1
 800ff2e:	4630      	mov	r0, r6
 800ff30:	4639      	mov	r1, r7
 800ff32:	f7f0 f9b9 	bl	80002a8 <__aeabi_dsub>
 800ff36:	a332      	add	r3, pc, #200	@ (adr r3, 8010000 <__ieee754_pow+0x768>)
 800ff38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff3c:	f7f0 fb6c 	bl	8000618 <__aeabi_dmul>
 800ff40:	a331      	add	r3, pc, #196	@ (adr r3, 8010008 <__ieee754_pow+0x770>)
 800ff42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff46:	4606      	mov	r6, r0
 800ff48:	460f      	mov	r7, r1
 800ff4a:	4620      	mov	r0, r4
 800ff4c:	4629      	mov	r1, r5
 800ff4e:	f7f0 fb63 	bl	8000618 <__aeabi_dmul>
 800ff52:	4602      	mov	r2, r0
 800ff54:	460b      	mov	r3, r1
 800ff56:	4630      	mov	r0, r6
 800ff58:	4639      	mov	r1, r7
 800ff5a:	f7f0 f9a7 	bl	80002ac <__adddf3>
 800ff5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ff60:	4b32      	ldr	r3, [pc, #200]	@ (801002c <__ieee754_pow+0x794>)
 800ff62:	4413      	add	r3, r2
 800ff64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff68:	f7f0 f9a0 	bl	80002ac <__adddf3>
 800ff6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ff70:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ff72:	f7f0 fae7 	bl	8000544 <__aeabi_i2d>
 800ff76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ff78:	4b2d      	ldr	r3, [pc, #180]	@ (8010030 <__ieee754_pow+0x798>)
 800ff7a:	4413      	add	r3, r2
 800ff7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ff80:	4606      	mov	r6, r0
 800ff82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ff86:	460f      	mov	r7, r1
 800ff88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff8c:	f7f0 f98e 	bl	80002ac <__adddf3>
 800ff90:	4642      	mov	r2, r8
 800ff92:	464b      	mov	r3, r9
 800ff94:	f7f0 f98a 	bl	80002ac <__adddf3>
 800ff98:	4632      	mov	r2, r6
 800ff9a:	463b      	mov	r3, r7
 800ff9c:	f7f0 f986 	bl	80002ac <__adddf3>
 800ffa0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800ffa4:	4632      	mov	r2, r6
 800ffa6:	463b      	mov	r3, r7
 800ffa8:	4658      	mov	r0, fp
 800ffaa:	460d      	mov	r5, r1
 800ffac:	f7f0 f97c 	bl	80002a8 <__aeabi_dsub>
 800ffb0:	4642      	mov	r2, r8
 800ffb2:	464b      	mov	r3, r9
 800ffb4:	f7f0 f978 	bl	80002a8 <__aeabi_dsub>
 800ffb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ffbc:	f7f0 f974 	bl	80002a8 <__aeabi_dsub>
 800ffc0:	465c      	mov	r4, fp
 800ffc2:	4602      	mov	r2, r0
 800ffc4:	e036      	b.n	8010034 <__ieee754_pow+0x79c>
 800ffc6:	bf00      	nop
 800ffc8:	4a454eef 	.word	0x4a454eef
 800ffcc:	3fca7e28 	.word	0x3fca7e28
 800ffd0:	93c9db65 	.word	0x93c9db65
 800ffd4:	3fcd864a 	.word	0x3fcd864a
 800ffd8:	a91d4101 	.word	0xa91d4101
 800ffdc:	3fd17460 	.word	0x3fd17460
 800ffe0:	518f264d 	.word	0x518f264d
 800ffe4:	3fd55555 	.word	0x3fd55555
 800ffe8:	db6fabff 	.word	0xdb6fabff
 800ffec:	3fdb6db6 	.word	0x3fdb6db6
 800fff0:	33333303 	.word	0x33333303
 800fff4:	3fe33333 	.word	0x3fe33333
 800fff8:	e0000000 	.word	0xe0000000
 800fffc:	3feec709 	.word	0x3feec709
 8010000:	dc3a03fd 	.word	0xdc3a03fd
 8010004:	3feec709 	.word	0x3feec709
 8010008:	145b01f5 	.word	0x145b01f5
 801000c:	be3e2fe0 	.word	0xbe3e2fe0
 8010010:	7ff00000 	.word	0x7ff00000
 8010014:	43400000 	.word	0x43400000
 8010018:	0003988e 	.word	0x0003988e
 801001c:	000bb679 	.word	0x000bb679
 8010020:	08012de8 	.word	0x08012de8
 8010024:	3ff00000 	.word	0x3ff00000
 8010028:	40080000 	.word	0x40080000
 801002c:	08012dc8 	.word	0x08012dc8
 8010030:	08012dd8 	.word	0x08012dd8
 8010034:	460b      	mov	r3, r1
 8010036:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801003a:	e5d7      	b.n	800fbec <__ieee754_pow+0x354>
 801003c:	f04f 0a01 	mov.w	sl, #1
 8010040:	e65e      	b.n	800fd00 <__ieee754_pow+0x468>
 8010042:	a3b4      	add	r3, pc, #720	@ (adr r3, 8010314 <__ieee754_pow+0xa7c>)
 8010044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010048:	4630      	mov	r0, r6
 801004a:	4639      	mov	r1, r7
 801004c:	f7f0 f92e 	bl	80002ac <__adddf3>
 8010050:	4642      	mov	r2, r8
 8010052:	e9cd 0100 	strd	r0, r1, [sp]
 8010056:	464b      	mov	r3, r9
 8010058:	4620      	mov	r0, r4
 801005a:	4629      	mov	r1, r5
 801005c:	f7f0 f924 	bl	80002a8 <__aeabi_dsub>
 8010060:	4602      	mov	r2, r0
 8010062:	460b      	mov	r3, r1
 8010064:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010068:	f7f0 fd66 	bl	8000b38 <__aeabi_dcmpgt>
 801006c:	2800      	cmp	r0, #0
 801006e:	f47f ae00 	bne.w	800fc72 <__ieee754_pow+0x3da>
 8010072:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8010076:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801007a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 801007e:	fa43 fa0a 	asr.w	sl, r3, sl
 8010082:	44da      	add	sl, fp
 8010084:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8010088:	489d      	ldr	r0, [pc, #628]	@ (8010300 <__ieee754_pow+0xa68>)
 801008a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801008e:	4108      	asrs	r0, r1
 8010090:	ea00 030a 	and.w	r3, r0, sl
 8010094:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8010098:	f1c1 0114 	rsb	r1, r1, #20
 801009c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80100a0:	fa4a fa01 	asr.w	sl, sl, r1
 80100a4:	f1bb 0f00 	cmp.w	fp, #0
 80100a8:	4640      	mov	r0, r8
 80100aa:	4649      	mov	r1, r9
 80100ac:	f04f 0200 	mov.w	r2, #0
 80100b0:	bfb8      	it	lt
 80100b2:	f1ca 0a00 	rsblt	sl, sl, #0
 80100b6:	f7f0 f8f7 	bl	80002a8 <__aeabi_dsub>
 80100ba:	4680      	mov	r8, r0
 80100bc:	4689      	mov	r9, r1
 80100be:	4632      	mov	r2, r6
 80100c0:	463b      	mov	r3, r7
 80100c2:	4640      	mov	r0, r8
 80100c4:	4649      	mov	r1, r9
 80100c6:	f7f0 f8f1 	bl	80002ac <__adddf3>
 80100ca:	2400      	movs	r4, #0
 80100cc:	a37c      	add	r3, pc, #496	@ (adr r3, 80102c0 <__ieee754_pow+0xa28>)
 80100ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d2:	4620      	mov	r0, r4
 80100d4:	460d      	mov	r5, r1
 80100d6:	f7f0 fa9f 	bl	8000618 <__aeabi_dmul>
 80100da:	4642      	mov	r2, r8
 80100dc:	e9cd 0100 	strd	r0, r1, [sp]
 80100e0:	464b      	mov	r3, r9
 80100e2:	4620      	mov	r0, r4
 80100e4:	4629      	mov	r1, r5
 80100e6:	f7f0 f8df 	bl	80002a8 <__aeabi_dsub>
 80100ea:	4602      	mov	r2, r0
 80100ec:	460b      	mov	r3, r1
 80100ee:	4630      	mov	r0, r6
 80100f0:	4639      	mov	r1, r7
 80100f2:	f7f0 f8d9 	bl	80002a8 <__aeabi_dsub>
 80100f6:	a374      	add	r3, pc, #464	@ (adr r3, 80102c8 <__ieee754_pow+0xa30>)
 80100f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100fc:	f7f0 fa8c 	bl	8000618 <__aeabi_dmul>
 8010100:	a373      	add	r3, pc, #460	@ (adr r3, 80102d0 <__ieee754_pow+0xa38>)
 8010102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010106:	4680      	mov	r8, r0
 8010108:	4689      	mov	r9, r1
 801010a:	4620      	mov	r0, r4
 801010c:	4629      	mov	r1, r5
 801010e:	f7f0 fa83 	bl	8000618 <__aeabi_dmul>
 8010112:	4602      	mov	r2, r0
 8010114:	460b      	mov	r3, r1
 8010116:	4640      	mov	r0, r8
 8010118:	4649      	mov	r1, r9
 801011a:	f7f0 f8c7 	bl	80002ac <__adddf3>
 801011e:	4604      	mov	r4, r0
 8010120:	460d      	mov	r5, r1
 8010122:	4602      	mov	r2, r0
 8010124:	460b      	mov	r3, r1
 8010126:	e9dd 0100 	ldrd	r0, r1, [sp]
 801012a:	f7f0 f8bf 	bl	80002ac <__adddf3>
 801012e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010132:	4680      	mov	r8, r0
 8010134:	4689      	mov	r9, r1
 8010136:	f7f0 f8b7 	bl	80002a8 <__aeabi_dsub>
 801013a:	4602      	mov	r2, r0
 801013c:	460b      	mov	r3, r1
 801013e:	4620      	mov	r0, r4
 8010140:	4629      	mov	r1, r5
 8010142:	f7f0 f8b1 	bl	80002a8 <__aeabi_dsub>
 8010146:	4642      	mov	r2, r8
 8010148:	4606      	mov	r6, r0
 801014a:	460f      	mov	r7, r1
 801014c:	464b      	mov	r3, r9
 801014e:	4640      	mov	r0, r8
 8010150:	4649      	mov	r1, r9
 8010152:	f7f0 fa61 	bl	8000618 <__aeabi_dmul>
 8010156:	a360      	add	r3, pc, #384	@ (adr r3, 80102d8 <__ieee754_pow+0xa40>)
 8010158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801015c:	4604      	mov	r4, r0
 801015e:	460d      	mov	r5, r1
 8010160:	f7f0 fa5a 	bl	8000618 <__aeabi_dmul>
 8010164:	a35e      	add	r3, pc, #376	@ (adr r3, 80102e0 <__ieee754_pow+0xa48>)
 8010166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801016a:	f7f0 f89d 	bl	80002a8 <__aeabi_dsub>
 801016e:	4622      	mov	r2, r4
 8010170:	462b      	mov	r3, r5
 8010172:	f7f0 fa51 	bl	8000618 <__aeabi_dmul>
 8010176:	a35c      	add	r3, pc, #368	@ (adr r3, 80102e8 <__ieee754_pow+0xa50>)
 8010178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801017c:	f7f0 f896 	bl	80002ac <__adddf3>
 8010180:	4622      	mov	r2, r4
 8010182:	462b      	mov	r3, r5
 8010184:	f7f0 fa48 	bl	8000618 <__aeabi_dmul>
 8010188:	a359      	add	r3, pc, #356	@ (adr r3, 80102f0 <__ieee754_pow+0xa58>)
 801018a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801018e:	f7f0 f88b 	bl	80002a8 <__aeabi_dsub>
 8010192:	4622      	mov	r2, r4
 8010194:	462b      	mov	r3, r5
 8010196:	f7f0 fa3f 	bl	8000618 <__aeabi_dmul>
 801019a:	a357      	add	r3, pc, #348	@ (adr r3, 80102f8 <__ieee754_pow+0xa60>)
 801019c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101a0:	f7f0 f884 	bl	80002ac <__adddf3>
 80101a4:	4622      	mov	r2, r4
 80101a6:	462b      	mov	r3, r5
 80101a8:	f7f0 fa36 	bl	8000618 <__aeabi_dmul>
 80101ac:	4602      	mov	r2, r0
 80101ae:	460b      	mov	r3, r1
 80101b0:	4640      	mov	r0, r8
 80101b2:	4649      	mov	r1, r9
 80101b4:	f7f0 f878 	bl	80002a8 <__aeabi_dsub>
 80101b8:	4604      	mov	r4, r0
 80101ba:	460d      	mov	r5, r1
 80101bc:	4602      	mov	r2, r0
 80101be:	460b      	mov	r3, r1
 80101c0:	4640      	mov	r0, r8
 80101c2:	4649      	mov	r1, r9
 80101c4:	f7f0 fa28 	bl	8000618 <__aeabi_dmul>
 80101c8:	2200      	movs	r2, #0
 80101ca:	e9cd 0100 	strd	r0, r1, [sp]
 80101ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80101d2:	4620      	mov	r0, r4
 80101d4:	4629      	mov	r1, r5
 80101d6:	f7f0 f867 	bl	80002a8 <__aeabi_dsub>
 80101da:	4602      	mov	r2, r0
 80101dc:	460b      	mov	r3, r1
 80101de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80101e2:	f7f0 fb43 	bl	800086c <__aeabi_ddiv>
 80101e6:	4632      	mov	r2, r6
 80101e8:	4604      	mov	r4, r0
 80101ea:	460d      	mov	r5, r1
 80101ec:	463b      	mov	r3, r7
 80101ee:	4640      	mov	r0, r8
 80101f0:	4649      	mov	r1, r9
 80101f2:	f7f0 fa11 	bl	8000618 <__aeabi_dmul>
 80101f6:	4632      	mov	r2, r6
 80101f8:	463b      	mov	r3, r7
 80101fa:	f7f0 f857 	bl	80002ac <__adddf3>
 80101fe:	4602      	mov	r2, r0
 8010200:	460b      	mov	r3, r1
 8010202:	4620      	mov	r0, r4
 8010204:	4629      	mov	r1, r5
 8010206:	f7f0 f84f 	bl	80002a8 <__aeabi_dsub>
 801020a:	4642      	mov	r2, r8
 801020c:	464b      	mov	r3, r9
 801020e:	f7f0 f84b 	bl	80002a8 <__aeabi_dsub>
 8010212:	460b      	mov	r3, r1
 8010214:	4602      	mov	r2, r0
 8010216:	493b      	ldr	r1, [pc, #236]	@ (8010304 <__ieee754_pow+0xa6c>)
 8010218:	2000      	movs	r0, #0
 801021a:	f7f0 f845 	bl	80002a8 <__aeabi_dsub>
 801021e:	ec41 0b10 	vmov	d0, r0, r1
 8010222:	ee10 3a90 	vmov	r3, s1
 8010226:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801022a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801022e:	da30      	bge.n	8010292 <__ieee754_pow+0x9fa>
 8010230:	4650      	mov	r0, sl
 8010232:	f000 f8b9 	bl	80103a8 <scalbn>
 8010236:	ec51 0b10 	vmov	r0, r1, d0
 801023a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801023e:	f7ff bbd2 	b.w	800f9e6 <__ieee754_pow+0x14e>
 8010242:	4c31      	ldr	r4, [pc, #196]	@ (8010308 <__ieee754_pow+0xa70>)
 8010244:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010248:	42a3      	cmp	r3, r4
 801024a:	d91a      	bls.n	8010282 <__ieee754_pow+0x9ea>
 801024c:	4b2f      	ldr	r3, [pc, #188]	@ (801030c <__ieee754_pow+0xa74>)
 801024e:	440b      	add	r3, r1
 8010250:	4303      	orrs	r3, r0
 8010252:	d009      	beq.n	8010268 <__ieee754_pow+0x9d0>
 8010254:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010258:	2200      	movs	r2, #0
 801025a:	2300      	movs	r3, #0
 801025c:	f7f0 fc4e 	bl	8000afc <__aeabi_dcmplt>
 8010260:	3800      	subs	r0, #0
 8010262:	bf18      	it	ne
 8010264:	2001      	movne	r0, #1
 8010266:	e42b      	b.n	800fac0 <__ieee754_pow+0x228>
 8010268:	4642      	mov	r2, r8
 801026a:	464b      	mov	r3, r9
 801026c:	f7f0 f81c 	bl	80002a8 <__aeabi_dsub>
 8010270:	4632      	mov	r2, r6
 8010272:	463b      	mov	r3, r7
 8010274:	f7f0 fc56 	bl	8000b24 <__aeabi_dcmpge>
 8010278:	2800      	cmp	r0, #0
 801027a:	d1eb      	bne.n	8010254 <__ieee754_pow+0x9bc>
 801027c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 801031c <__ieee754_pow+0xa84>
 8010280:	e6f7      	b.n	8010072 <__ieee754_pow+0x7da>
 8010282:	469a      	mov	sl, r3
 8010284:	4b22      	ldr	r3, [pc, #136]	@ (8010310 <__ieee754_pow+0xa78>)
 8010286:	459a      	cmp	sl, r3
 8010288:	f63f aef3 	bhi.w	8010072 <__ieee754_pow+0x7da>
 801028c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8010290:	e715      	b.n	80100be <__ieee754_pow+0x826>
 8010292:	ec51 0b10 	vmov	r0, r1, d0
 8010296:	4619      	mov	r1, r3
 8010298:	e7cf      	b.n	801023a <__ieee754_pow+0x9a2>
 801029a:	491a      	ldr	r1, [pc, #104]	@ (8010304 <__ieee754_pow+0xa6c>)
 801029c:	2000      	movs	r0, #0
 801029e:	f7ff bb18 	b.w	800f8d2 <__ieee754_pow+0x3a>
 80102a2:	2000      	movs	r0, #0
 80102a4:	2100      	movs	r1, #0
 80102a6:	f7ff bb14 	b.w	800f8d2 <__ieee754_pow+0x3a>
 80102aa:	4630      	mov	r0, r6
 80102ac:	4639      	mov	r1, r7
 80102ae:	f7ff bb10 	b.w	800f8d2 <__ieee754_pow+0x3a>
 80102b2:	460c      	mov	r4, r1
 80102b4:	f7ff bb5e 	b.w	800f974 <__ieee754_pow+0xdc>
 80102b8:	2400      	movs	r4, #0
 80102ba:	f7ff bb49 	b.w	800f950 <__ieee754_pow+0xb8>
 80102be:	bf00      	nop
 80102c0:	00000000 	.word	0x00000000
 80102c4:	3fe62e43 	.word	0x3fe62e43
 80102c8:	fefa39ef 	.word	0xfefa39ef
 80102cc:	3fe62e42 	.word	0x3fe62e42
 80102d0:	0ca86c39 	.word	0x0ca86c39
 80102d4:	be205c61 	.word	0xbe205c61
 80102d8:	72bea4d0 	.word	0x72bea4d0
 80102dc:	3e663769 	.word	0x3e663769
 80102e0:	c5d26bf1 	.word	0xc5d26bf1
 80102e4:	3ebbbd41 	.word	0x3ebbbd41
 80102e8:	af25de2c 	.word	0xaf25de2c
 80102ec:	3f11566a 	.word	0x3f11566a
 80102f0:	16bebd93 	.word	0x16bebd93
 80102f4:	3f66c16c 	.word	0x3f66c16c
 80102f8:	5555553e 	.word	0x5555553e
 80102fc:	3fc55555 	.word	0x3fc55555
 8010300:	fff00000 	.word	0xfff00000
 8010304:	3ff00000 	.word	0x3ff00000
 8010308:	4090cbff 	.word	0x4090cbff
 801030c:	3f6f3400 	.word	0x3f6f3400
 8010310:	3fe00000 	.word	0x3fe00000
 8010314:	652b82fe 	.word	0x652b82fe
 8010318:	3c971547 	.word	0x3c971547
 801031c:	4090cc00 	.word	0x4090cc00

08010320 <with_errno>:
 8010320:	b510      	push	{r4, lr}
 8010322:	ed2d 8b02 	vpush	{d8}
 8010326:	eeb0 8a40 	vmov.f32	s16, s0
 801032a:	eef0 8a60 	vmov.f32	s17, s1
 801032e:	4604      	mov	r4, r0
 8010330:	f7fd fcc0 	bl	800dcb4 <__errno>
 8010334:	eeb0 0a48 	vmov.f32	s0, s16
 8010338:	eef0 0a68 	vmov.f32	s1, s17
 801033c:	ecbd 8b02 	vpop	{d8}
 8010340:	6004      	str	r4, [r0, #0]
 8010342:	bd10      	pop	{r4, pc}

08010344 <xflow>:
 8010344:	4603      	mov	r3, r0
 8010346:	b507      	push	{r0, r1, r2, lr}
 8010348:	ec51 0b10 	vmov	r0, r1, d0
 801034c:	b183      	cbz	r3, 8010370 <xflow+0x2c>
 801034e:	4602      	mov	r2, r0
 8010350:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010354:	e9cd 2300 	strd	r2, r3, [sp]
 8010358:	e9dd 2300 	ldrd	r2, r3, [sp]
 801035c:	f7f0 f95c 	bl	8000618 <__aeabi_dmul>
 8010360:	ec41 0b10 	vmov	d0, r0, r1
 8010364:	2022      	movs	r0, #34	@ 0x22
 8010366:	b003      	add	sp, #12
 8010368:	f85d eb04 	ldr.w	lr, [sp], #4
 801036c:	f7ff bfd8 	b.w	8010320 <with_errno>
 8010370:	4602      	mov	r2, r0
 8010372:	460b      	mov	r3, r1
 8010374:	e7ee      	b.n	8010354 <xflow+0x10>
	...

08010378 <__math_uflow>:
 8010378:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010380 <__math_uflow+0x8>
 801037c:	f7ff bfe2 	b.w	8010344 <xflow>
 8010380:	00000000 	.word	0x00000000
 8010384:	10000000 	.word	0x10000000

08010388 <__math_oflow>:
 8010388:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010390 <__math_oflow+0x8>
 801038c:	f7ff bfda 	b.w	8010344 <xflow>
 8010390:	00000000 	.word	0x00000000
 8010394:	70000000 	.word	0x70000000

08010398 <fabs>:
 8010398:	ec51 0b10 	vmov	r0, r1, d0
 801039c:	4602      	mov	r2, r0
 801039e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80103a2:	ec43 2b10 	vmov	d0, r2, r3
 80103a6:	4770      	bx	lr

080103a8 <scalbn>:
 80103a8:	b570      	push	{r4, r5, r6, lr}
 80103aa:	ec55 4b10 	vmov	r4, r5, d0
 80103ae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80103b2:	4606      	mov	r6, r0
 80103b4:	462b      	mov	r3, r5
 80103b6:	b991      	cbnz	r1, 80103de <scalbn+0x36>
 80103b8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80103bc:	4323      	orrs	r3, r4
 80103be:	d03d      	beq.n	801043c <scalbn+0x94>
 80103c0:	4b35      	ldr	r3, [pc, #212]	@ (8010498 <scalbn+0xf0>)
 80103c2:	4620      	mov	r0, r4
 80103c4:	4629      	mov	r1, r5
 80103c6:	2200      	movs	r2, #0
 80103c8:	f7f0 f926 	bl	8000618 <__aeabi_dmul>
 80103cc:	4b33      	ldr	r3, [pc, #204]	@ (801049c <scalbn+0xf4>)
 80103ce:	429e      	cmp	r6, r3
 80103d0:	4604      	mov	r4, r0
 80103d2:	460d      	mov	r5, r1
 80103d4:	da0f      	bge.n	80103f6 <scalbn+0x4e>
 80103d6:	a328      	add	r3, pc, #160	@ (adr r3, 8010478 <scalbn+0xd0>)
 80103d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103dc:	e01e      	b.n	801041c <scalbn+0x74>
 80103de:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80103e2:	4291      	cmp	r1, r2
 80103e4:	d10b      	bne.n	80103fe <scalbn+0x56>
 80103e6:	4622      	mov	r2, r4
 80103e8:	4620      	mov	r0, r4
 80103ea:	4629      	mov	r1, r5
 80103ec:	f7ef ff5e 	bl	80002ac <__adddf3>
 80103f0:	4604      	mov	r4, r0
 80103f2:	460d      	mov	r5, r1
 80103f4:	e022      	b.n	801043c <scalbn+0x94>
 80103f6:	460b      	mov	r3, r1
 80103f8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80103fc:	3936      	subs	r1, #54	@ 0x36
 80103fe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8010402:	4296      	cmp	r6, r2
 8010404:	dd0d      	ble.n	8010422 <scalbn+0x7a>
 8010406:	2d00      	cmp	r5, #0
 8010408:	a11d      	add	r1, pc, #116	@ (adr r1, 8010480 <scalbn+0xd8>)
 801040a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801040e:	da02      	bge.n	8010416 <scalbn+0x6e>
 8010410:	a11d      	add	r1, pc, #116	@ (adr r1, 8010488 <scalbn+0xe0>)
 8010412:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010416:	a31a      	add	r3, pc, #104	@ (adr r3, 8010480 <scalbn+0xd8>)
 8010418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801041c:	f7f0 f8fc 	bl	8000618 <__aeabi_dmul>
 8010420:	e7e6      	b.n	80103f0 <scalbn+0x48>
 8010422:	1872      	adds	r2, r6, r1
 8010424:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8010428:	428a      	cmp	r2, r1
 801042a:	dcec      	bgt.n	8010406 <scalbn+0x5e>
 801042c:	2a00      	cmp	r2, #0
 801042e:	dd08      	ble.n	8010442 <scalbn+0x9a>
 8010430:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010434:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010438:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801043c:	ec45 4b10 	vmov	d0, r4, r5
 8010440:	bd70      	pop	{r4, r5, r6, pc}
 8010442:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8010446:	da08      	bge.n	801045a <scalbn+0xb2>
 8010448:	2d00      	cmp	r5, #0
 801044a:	a10b      	add	r1, pc, #44	@ (adr r1, 8010478 <scalbn+0xd0>)
 801044c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010450:	dac1      	bge.n	80103d6 <scalbn+0x2e>
 8010452:	a10f      	add	r1, pc, #60	@ (adr r1, 8010490 <scalbn+0xe8>)
 8010454:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010458:	e7bd      	b.n	80103d6 <scalbn+0x2e>
 801045a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801045e:	3236      	adds	r2, #54	@ 0x36
 8010460:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010464:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010468:	4620      	mov	r0, r4
 801046a:	4b0d      	ldr	r3, [pc, #52]	@ (80104a0 <scalbn+0xf8>)
 801046c:	4629      	mov	r1, r5
 801046e:	2200      	movs	r2, #0
 8010470:	e7d4      	b.n	801041c <scalbn+0x74>
 8010472:	bf00      	nop
 8010474:	f3af 8000 	nop.w
 8010478:	c2f8f359 	.word	0xc2f8f359
 801047c:	01a56e1f 	.word	0x01a56e1f
 8010480:	8800759c 	.word	0x8800759c
 8010484:	7e37e43c 	.word	0x7e37e43c
 8010488:	8800759c 	.word	0x8800759c
 801048c:	fe37e43c 	.word	0xfe37e43c
 8010490:	c2f8f359 	.word	0xc2f8f359
 8010494:	81a56e1f 	.word	0x81a56e1f
 8010498:	43500000 	.word	0x43500000
 801049c:	ffff3cb0 	.word	0xffff3cb0
 80104a0:	3c900000 	.word	0x3c900000

080104a4 <__ieee754_sqrt>:
 80104a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104a8:	4a68      	ldr	r2, [pc, #416]	@ (801064c <__ieee754_sqrt+0x1a8>)
 80104aa:	ec55 4b10 	vmov	r4, r5, d0
 80104ae:	43aa      	bics	r2, r5
 80104b0:	462b      	mov	r3, r5
 80104b2:	4621      	mov	r1, r4
 80104b4:	d110      	bne.n	80104d8 <__ieee754_sqrt+0x34>
 80104b6:	4622      	mov	r2, r4
 80104b8:	4620      	mov	r0, r4
 80104ba:	4629      	mov	r1, r5
 80104bc:	f7f0 f8ac 	bl	8000618 <__aeabi_dmul>
 80104c0:	4602      	mov	r2, r0
 80104c2:	460b      	mov	r3, r1
 80104c4:	4620      	mov	r0, r4
 80104c6:	4629      	mov	r1, r5
 80104c8:	f7ef fef0 	bl	80002ac <__adddf3>
 80104cc:	4604      	mov	r4, r0
 80104ce:	460d      	mov	r5, r1
 80104d0:	ec45 4b10 	vmov	d0, r4, r5
 80104d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104d8:	2d00      	cmp	r5, #0
 80104da:	dc0e      	bgt.n	80104fa <__ieee754_sqrt+0x56>
 80104dc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80104e0:	4322      	orrs	r2, r4
 80104e2:	d0f5      	beq.n	80104d0 <__ieee754_sqrt+0x2c>
 80104e4:	b19d      	cbz	r5, 801050e <__ieee754_sqrt+0x6a>
 80104e6:	4622      	mov	r2, r4
 80104e8:	4620      	mov	r0, r4
 80104ea:	4629      	mov	r1, r5
 80104ec:	f7ef fedc 	bl	80002a8 <__aeabi_dsub>
 80104f0:	4602      	mov	r2, r0
 80104f2:	460b      	mov	r3, r1
 80104f4:	f7f0 f9ba 	bl	800086c <__aeabi_ddiv>
 80104f8:	e7e8      	b.n	80104cc <__ieee754_sqrt+0x28>
 80104fa:	152a      	asrs	r2, r5, #20
 80104fc:	d115      	bne.n	801052a <__ieee754_sqrt+0x86>
 80104fe:	2000      	movs	r0, #0
 8010500:	e009      	b.n	8010516 <__ieee754_sqrt+0x72>
 8010502:	0acb      	lsrs	r3, r1, #11
 8010504:	3a15      	subs	r2, #21
 8010506:	0549      	lsls	r1, r1, #21
 8010508:	2b00      	cmp	r3, #0
 801050a:	d0fa      	beq.n	8010502 <__ieee754_sqrt+0x5e>
 801050c:	e7f7      	b.n	80104fe <__ieee754_sqrt+0x5a>
 801050e:	462a      	mov	r2, r5
 8010510:	e7fa      	b.n	8010508 <__ieee754_sqrt+0x64>
 8010512:	005b      	lsls	r3, r3, #1
 8010514:	3001      	adds	r0, #1
 8010516:	02dc      	lsls	r4, r3, #11
 8010518:	d5fb      	bpl.n	8010512 <__ieee754_sqrt+0x6e>
 801051a:	1e44      	subs	r4, r0, #1
 801051c:	1b12      	subs	r2, r2, r4
 801051e:	f1c0 0420 	rsb	r4, r0, #32
 8010522:	fa21 f404 	lsr.w	r4, r1, r4
 8010526:	4323      	orrs	r3, r4
 8010528:	4081      	lsls	r1, r0
 801052a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801052e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8010532:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010536:	07d2      	lsls	r2, r2, #31
 8010538:	bf5c      	itt	pl
 801053a:	005b      	lslpl	r3, r3, #1
 801053c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8010540:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010544:	bf58      	it	pl
 8010546:	0049      	lslpl	r1, r1, #1
 8010548:	2600      	movs	r6, #0
 801054a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801054e:	106d      	asrs	r5, r5, #1
 8010550:	0049      	lsls	r1, r1, #1
 8010552:	2016      	movs	r0, #22
 8010554:	4632      	mov	r2, r6
 8010556:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801055a:	1917      	adds	r7, r2, r4
 801055c:	429f      	cmp	r7, r3
 801055e:	bfde      	ittt	le
 8010560:	193a      	addle	r2, r7, r4
 8010562:	1bdb      	suble	r3, r3, r7
 8010564:	1936      	addle	r6, r6, r4
 8010566:	0fcf      	lsrs	r7, r1, #31
 8010568:	3801      	subs	r0, #1
 801056a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801056e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010572:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8010576:	d1f0      	bne.n	801055a <__ieee754_sqrt+0xb6>
 8010578:	4604      	mov	r4, r0
 801057a:	2720      	movs	r7, #32
 801057c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8010580:	429a      	cmp	r2, r3
 8010582:	eb00 0e0c 	add.w	lr, r0, ip
 8010586:	db02      	blt.n	801058e <__ieee754_sqrt+0xea>
 8010588:	d113      	bne.n	80105b2 <__ieee754_sqrt+0x10e>
 801058a:	458e      	cmp	lr, r1
 801058c:	d811      	bhi.n	80105b2 <__ieee754_sqrt+0x10e>
 801058e:	f1be 0f00 	cmp.w	lr, #0
 8010592:	eb0e 000c 	add.w	r0, lr, ip
 8010596:	da42      	bge.n	801061e <__ieee754_sqrt+0x17a>
 8010598:	2800      	cmp	r0, #0
 801059a:	db40      	blt.n	801061e <__ieee754_sqrt+0x17a>
 801059c:	f102 0801 	add.w	r8, r2, #1
 80105a0:	1a9b      	subs	r3, r3, r2
 80105a2:	458e      	cmp	lr, r1
 80105a4:	bf88      	it	hi
 80105a6:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 80105aa:	eba1 010e 	sub.w	r1, r1, lr
 80105ae:	4464      	add	r4, ip
 80105b0:	4642      	mov	r2, r8
 80105b2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80105b6:	3f01      	subs	r7, #1
 80105b8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80105bc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80105c0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80105c4:	d1dc      	bne.n	8010580 <__ieee754_sqrt+0xdc>
 80105c6:	4319      	orrs	r1, r3
 80105c8:	d01b      	beq.n	8010602 <__ieee754_sqrt+0x15e>
 80105ca:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8010650 <__ieee754_sqrt+0x1ac>
 80105ce:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8010654 <__ieee754_sqrt+0x1b0>
 80105d2:	e9da 0100 	ldrd	r0, r1, [sl]
 80105d6:	e9db 2300 	ldrd	r2, r3, [fp]
 80105da:	f7ef fe65 	bl	80002a8 <__aeabi_dsub>
 80105de:	e9da 8900 	ldrd	r8, r9, [sl]
 80105e2:	4602      	mov	r2, r0
 80105e4:	460b      	mov	r3, r1
 80105e6:	4640      	mov	r0, r8
 80105e8:	4649      	mov	r1, r9
 80105ea:	f7f0 fa91 	bl	8000b10 <__aeabi_dcmple>
 80105ee:	b140      	cbz	r0, 8010602 <__ieee754_sqrt+0x15e>
 80105f0:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 80105f4:	e9da 0100 	ldrd	r0, r1, [sl]
 80105f8:	e9db 2300 	ldrd	r2, r3, [fp]
 80105fc:	d111      	bne.n	8010622 <__ieee754_sqrt+0x17e>
 80105fe:	3601      	adds	r6, #1
 8010600:	463c      	mov	r4, r7
 8010602:	1072      	asrs	r2, r6, #1
 8010604:	0863      	lsrs	r3, r4, #1
 8010606:	07f1      	lsls	r1, r6, #31
 8010608:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801060c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8010610:	bf48      	it	mi
 8010612:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8010616:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801061a:	4618      	mov	r0, r3
 801061c:	e756      	b.n	80104cc <__ieee754_sqrt+0x28>
 801061e:	4690      	mov	r8, r2
 8010620:	e7be      	b.n	80105a0 <__ieee754_sqrt+0xfc>
 8010622:	f7ef fe43 	bl	80002ac <__adddf3>
 8010626:	e9da 8900 	ldrd	r8, r9, [sl]
 801062a:	4602      	mov	r2, r0
 801062c:	460b      	mov	r3, r1
 801062e:	4640      	mov	r0, r8
 8010630:	4649      	mov	r1, r9
 8010632:	f7f0 fa63 	bl	8000afc <__aeabi_dcmplt>
 8010636:	b120      	cbz	r0, 8010642 <__ieee754_sqrt+0x19e>
 8010638:	1ca0      	adds	r0, r4, #2
 801063a:	bf08      	it	eq
 801063c:	3601      	addeq	r6, #1
 801063e:	3402      	adds	r4, #2
 8010640:	e7df      	b.n	8010602 <__ieee754_sqrt+0x15e>
 8010642:	1c63      	adds	r3, r4, #1
 8010644:	f023 0401 	bic.w	r4, r3, #1
 8010648:	e7db      	b.n	8010602 <__ieee754_sqrt+0x15e>
 801064a:	bf00      	nop
 801064c:	7ff00000 	.word	0x7ff00000
 8010650:	20000118 	.word	0x20000118
 8010654:	20000110 	.word	0x20000110

08010658 <_init>:
 8010658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801065a:	bf00      	nop
 801065c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801065e:	bc08      	pop	{r3}
 8010660:	469e      	mov	lr, r3
 8010662:	4770      	bx	lr

08010664 <_fini>:
 8010664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010666:	bf00      	nop
 8010668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801066a:	bc08      	pop	{r3}
 801066c:	469e      	mov	lr, r3
 801066e:	4770      	bx	lr

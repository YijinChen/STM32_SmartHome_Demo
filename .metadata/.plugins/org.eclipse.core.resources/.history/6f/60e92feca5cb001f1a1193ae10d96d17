#include "dht11.h"
//#include "tim.h"
#include "FreeRtos.h"
#include "task.h"
#include <stdio.h>

//#define DHT11_Pin GPIO_PIN_6
//#define DHT11_GPIO_Port GPIOC
//
//char msg[50];
//char message1[16];
//char message2[16];
//uint8_t TOUT = 0, CheckSum, i;
//uint8_t T_Byte1, T_Byte2, RH_Byte1, RH_Byte2;

//void Delay_US(int us){
//	__HAL_TIM_SET_COUNTER(&htim2,0);
//	while(__HAL_TIM_GET_COUNTER(&htim2) < us);
//}
//
//void start_signal(void){
//	GPIO_InitTypeDef GPIO_InitStruct = {0};
//	GPIO_InitStruct.Pin = DHT11_Pin;
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
//
//	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
//	HAL_Delay(18);
//	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
//	delay_us(30);
//
//	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
//	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
//
//}
//
//
//uint8_t check_response(void){
//	TOUT=0;
//	__HAL_TIM_SET_COUNTER(&htim2,0);
//	while(!HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) && (__HAL_TIM_GET_COUNTER(&htim2) < 100)){};
//	if((__HAL_TIM_GET_COUNTER(&htim2)) >= 100){
//		printf("aaa\r\n");
//		return 0;
//	}
//	while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) && (__HAL_TIM_GET_COUNTER(&htim2) < 100)){};
//	if((__HAL_TIM_GET_COUNTER(&htim2)) >= 100){
//		printf("bbb\r\n");
//		return 0;
//	}
//	return 1;
//
//}
//
//uint8_t read_byte(void){
//	uint8_t num = 0;
//	for(i = 0; i < 8; i++){
//		while(!HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)){};
//		__HAL_TIM_SET_COUNTER(&htim2,0);
//		while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)){};
//		if(__HAL_TIM_GET_COUNTER(&htim2) > 40){
//			num |= (1 << (7-i));
//		}
//	}
//	return num;
//}
//
//void process_sensor_data(void){
//	RH_Byte1 = read_byte();
//	RH_Byte2 = read_byte();
//	T_Byte1 = read_byte();
//	T_Byte2 = read_byte();
//	CheckSum = read_byte();
//
//	uint8_t humidity_integer = RH_Byte1;
//	uint8_t humidity_decimal = RH_Byte2/10;
//
//	uint8_t temperature_integer = T_Byte1;
//	uint8_t temperature_decimal = T_Byte2/10;
//
//	if(CheckSum == ((RH_Byte1 + RH_Byte2 + T_Byte1 + T_Byte2)&0xff)){
//		printf("Humidity = %d.%d %%\r\n", humidity_integer, humidity_decimal);
//		printf("Temperature = %d.%d C\r\n", temperature_integer, temperature_decimal);
//	}
//	else{
//		printf("CheckSum Errors | Trying Again...\r\n");
//	}
//}

void Delay_US(uint32_t us)
{
	uint32_t old_time = SysTick->VAL;
	uint32_t new_time;
	uint32_t ticks = us * 99;
	uint32_t cnt = 0;
	uint32_t load = SysTick->LOAD;

	while (1)
	{
		new_time = SysTick->VAL;

		if (new_time != old_time)
		{
			if (new_time < old_time)
				cnt += (old_time - new_time);
			else
				cnt += (load - new_time + old_time);

			if (cnt >= ticks)
				break;

			old_time = new_time;
		}
	}
}


void DHT11_Init(void)
{
	__HAL_RCC_GPIOC_CLK_ENABLE();

	GPIO_InitTypeDef GPIO_Init_Struct;

	GPIO_Init_Struct.Mode = GPIO_MODE_OUTPUT_OD;
	GPIO_Init_Struct.Pin = GPIO_PIN_6;
	GPIO_Init_Struct.Pull = GPIO_PULLUP;
	GPIO_Init_Struct.Speed = GPIO_SPEED_FREQ_HIGH;

	HAL_GPIO_Init(GPIOC, &GPIO_Init_Struct);
}

void DHT11_Start(void)
{
	//printf("start\r\n");
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);

	HAL_Delay(20);
	//printf("start2\r\n");
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);

	Delay_US(30);
	//printf("start3\r\n");
}

uint8_t DHT11_Response(void)
{
	uint16_t time = 0;

	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) && time < 100)
	{
		Delay_US(1);
		time++;
	}

	if (time >= 100)
		return 1;

	time = 0;

	while (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) && time < 100)
	{
		Delay_US(1);
		time++;
	}

	if (time >= 100)
		return 1;

	return 0;
}

uint8_t DHT11_Read_Bit(void)
{
	uint16_t time = 0;

	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) && time < 100)
	{
		Delay_US(1);
		time++;
	}

	if (time >= 100)
		return 2;

	while (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) && time < 100)
	{
		Delay_US(1);
		time++;
	}

	if (time >= 100)
		return 2;

	Delay_US(30);

	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == 0)
		return 0;
	else
		return 1;
}

uint8_t DHT11_Read_Byte(void)
{
	uint8_t data = 0;
	uint8_t i = 0;

	for (i = 0; i < 8; i++)
	{
		data <<= 1;
		data = data | DHT11_Read_Bit();
	}

	return data;
}

void DHT11_Read_Data(uint8_t *pData)
{
	DHT11_Start();
	//printf("read data\r\n");

	if (DHT11_Response()){
		//printf("response\r\n");
		return;
	}

	//printf("no response\r\n");


	uint8_t i;
	for (i = 0; i < 5; i++)
	{
		pData[i] = DHT11_Read_Byte();
	}

	if (pData[4] != pData[0] + pData[1] + pData[2] + pData[3])
	{
		for (i = 0; i < 5; i++)
		{
			pData[i] = 0;
		}
	}
}
